@model eRoute.Models.ViewModel.AssesmentVM
@{
    AjaxOptions ajaxOptions = new AjaxOptions
    {
        UpdateTargetId = "searchResults",
    };
}
@if (@Session["IdLeader"] == null)
{
    Session["IdLeader"] = string.Empty;
}
<input type="hidden" id="idLeader" value="@Session["IdLeader"].ToString()" />
<input type="hidden" id="ErrorComplete" value="@Localization.ErrorComplete" />
<input type="hidden" id="OnFailureAss" value="@Localization.OnFailureAss" />
<script type="text/javascript">
    function OnSuccess() {
        alert(document.getElementById('ErrorComplete').value);
        if (document.getElementById('idLeader').value == '') {
            window.location.href = "/Assesment/LeaderList";
        }
        else {
            window.location.href = "/Assesment/ManageList";
        }
    }
    function OnFailure() {
        alert(document.getElementById('OnFailureAss').value);
    }
</script>
@using (Ajax.BeginForm("LeaderFis", ajaxOptions))
{
    <div class="dxgvGroupPanel_Aqua" style="border: 1px solid #A3C0E8; color: #E65905;
        font-weight: bold">
        <table width="100%" cellpadding="0" cellspacing="0">
            <tr>
                <td align="left">
                    @if (@Model.CheckItem)
                    {
                        <div style="float: left;">
                            @Html.DevExpress().Button(settings =>
                       {
                           settings.Name = "btnFis";
                           settings.Height = 15;
                           settings.Width = 60;
                           settings.Text = Localization.BtnComplete;
                           settings.UseSubmitBehavior = true;
                       }).GetHtml()</div>
                    }
                </td>
                <td align="right">
                    <div style="float: right; padding-right: 20px">
                        @Html.Raw(@Model.ItemCount)
                    </div>
                </td>
            </tr>
        </table>
    </div>
    @Html.DevExpress().GridView(settings =>
{
    settings.Name = "dvData";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.KeyFieldName = "DistributorID";
    settings.Settings.ShowFilterRow = false;
    settings.SettingsBehavior.AllowSort = false;
    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
    settings.EncodeHtml = false;
    settings.SettingsBehavior.AllowSelectByRowClick = true;
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.Leader;
        column.FieldName = "Leader";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.Auditor;
        column.FieldName = "Auditor";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.RouteID;
        column.FieldName = "RouteID";
        column.Width = 80;
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.RouteName;
        column.FieldName = "RouteName";
        column.Width = 80;
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.Distributor;
        column.FieldName = "DistributorName";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.Status;
        column.FieldName = "Status";
        column.Width = 100;
    });
    settings.Columns.Add(column =>
    {
        column.Caption = Localization.View;
        column.SetDataItemTemplateContent(c =>
        {
            ViewContext.Writer.Write(
                Html.ActionLink("[replacetext]", "LeaderAssesment/" + Url.Content(System.Web.UI.DataBinder.Eval(c.DataItem, "RouteID").ToString() + "-" + Url.Content(System.Web.UI.DataBinder.Eval(c.DataItem, "DistributorID").ToString()))).ToHtmlString().Replace("[replacetext]", "<center><img src='/Content/images/View.png'></img></center>")
            );
        });
    });
    settings.DataBound = (source, e) =>
    {
        ASPxGridView dv = (ASPxGridView)source;
        GridViewDataTextColumn colNo = new GridViewDataTextColumn();
        colNo.Caption = Localization.No;
        colNo.FieldName = "No";
        colNo.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        colNo.Width = 30;
        colNo.VisibleIndex = 0;
        colNo.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
        dv.Columns.Add(colNo);
    };
    settings.CustomUnboundColumnData = (source, e) =>
    {
        if (e.Column.FieldName == "No")
        {
            e.Value = e.ListSourceRowIndex + 1;
        }
    };
}
).Bind(Model.sp_Assesment_Leader_Fillter.ToList()).GetHtml()
}
