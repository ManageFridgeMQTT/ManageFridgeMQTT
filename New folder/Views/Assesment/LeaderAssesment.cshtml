@model eRoute.Models.ViewModel.AssesmentVM
@{
    Layout = "~/Views/Shared/_rootLayout.cshtml";
    ViewBag.Title = "LeaderAssesment";
    AjaxOptions ajaxOptions = new AjaxOptions
    {
        UpdateTargetId = "searchResults"
    };
}
<link type="text/css" href="@Url.Content("~/Content/lightbox.css")" rel="stylesheet"  />
<link type="text/css" href="@Url.Content("~/Content/screen.css")" rel="stylesheet" />
@if (@Session["IdLeader"] == null)
{
    Session["IdLeader"] = string.Empty;
}
<input type="hidden" id="idLeader" value="@Session["IdLeader"].ToString()" />
<input type="hidden" id="OnSuccessAss" value="@Localization.OnSuccessAss" />
<input type="hidden" id="OnFailureAss" value="@Localization.OnFailureAss" />
<input type="hidden" id="BtnRefusal" value="@Localization.BtnRefusal" />
<input type="hidden" id="ErrorRefusal" value="@Localization.ErrorRefusal" />
<input type="hidden" id="InputReasonsForRefusal" value="@Localization.InputReasonsForRefusal" />
<input type="hidden" id="ApproveAssesment" value="@Localization.ApproveAssesment" />
<script type="text/javascript">
    function OnSuccess() {
        alert(document.getElementById('OnSuccessAss').value);
        if (document.getElementById('idLeader').value == '') {
            window.location.href = "/Assesment/LeaderList";
        }
        else {
            window.location.href = "/Assesment/LeaderList/" + document.getElementById('idLeader').value;
        }
    }
    function OnSuccessAcc() {
        alert(document.getElementById('ApproveAssesment').value);
        if (document.getElementById('idLeader').value == '') {
            window.location.href = "/Assesment/LeaderList";
        }
        else {
            window.location.href = "/Assesment/LeaderList/" + document.getElementById('idLeader').value;
        }
    }
    function OnFailure() {
        alert(document.getElementById('OnFailureAss').value);
    }
    function OnRefusalNotEmpty() {
        alert(document.getElementById('InputReasonsForRefusal').value);
    }
    function OnRefusal() {
        btnAss.SetEnabled(true);
        txtStatus.SetValue(document.getElementById('BtnRefusal').value);
        document.getElementById('div1').setAttribute("style", "display:none");
        document.getElementById('div2').setAttribute("style", "display:none");
        document.getElementById('div3').setAttribute("style", "display:none");
        document.getElementById('div4').setAttribute("style", "display:none");
        alert(document.getElementById('ErrorRefusal').value);
    }
</script>
@using (Ajax.BeginForm("LeaderAssesment", ajaxOptions))
{
    <div style="float: left; padding: 10px">
        <div style="float: left; font-weight: bold; padding-top: 17px">
            @Localization.Status</div>
        <div style="float: left; padding-left: 10px; padding-top: 16px">
            @Html.DevExpress().TextBox(settings =>
       {
           settings.Name = "txtStatus";
           if (Model.sp_Assesment_Auditor.FirstOrDefault() != null)
           {
               settings.Text = ViewBag.Name;
           }
           else
           {
               settings.Text = Localization.RouteImagesNot;
           }
           settings.Height = 25;
           settings.ReadOnly = true;
       }).GetHtml()</div>
        <div style="float: left; padding-left: 10px; padding-right: 150px; padding-top: 16px">
            @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btnAss";
           settings.UseSubmitBehavior = true;
           settings.Text = Localization.BtnRevaluation;
           settings.ClientEnabled = false;
       }).GetHtml()
        </div>
        <div id="div1" style="float: left; padding-left: 10px; padding-top: 16px">
            @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btnAcc";
           settings.Text = Localization.ApproveList;
           settings.ClientEnabled = false;
           if (Model.sp_Assesment_Auditor.Count() > 0)
           {
               string strDate = string.Empty;
               if (Session["dt"] != null)
               {
                   strDate = Session["dt"].ToString();
               }
               if (Model.sp_Assesment_Auditor.FirstOrDefault().StatusAssessment == 3 || strDate != string.Empty)
               {
                   settings.ClientEnabled = true;
               }
           }
           else
           {
               settings.ClientEnabled = true;
           }
           settings.UseSubmitBehavior = true;
       }).GetHtml()
        </div>
        <div id="div2" style="float: right; padding-left: 10px;">
            @Html.DevExpress().Memo(settings =>
       {
           settings.Name = "txtMemo";
           settings.Width = 528;
           if (Model.sp_Assesment_Auditor.FirstOrDefault() != null)
           {
               if (Model.sp_Assesment_Auditor.FirstOrDefault().ReasonsForRefusal != null)
               {
                   settings.Text = Model.sp_Assesment_Auditor.FirstOrDefault().ReasonsForRefusal;
               }
           }
       }).GetHtml()
        </div>
        <div id="div4" style="float: right; font-weight: bold; padding-top: 17px">
            @Localization.ReasonsForRefusal:</div>
        <div id="div3" style="float: right; padding-left: 10px; padding-right: 50px; padding-top: 16px">
            @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btnRefusal";
           settings.Text = Localization.BtnRefusal;
           settings.ClientEnabled = false;
           if (Model.sp_Assesment_Auditor.Count() > 0)
           {
               string strDate = string.Empty;
               if (Session["dt"] != null)
               {
                   strDate = Session["dt"].ToString();
               }
               if (Model.sp_Assesment_Auditor.FirstOrDefault().StatusAssessment == 3 || strDate != string.Empty)
               {
                   settings.ClientEnabled = true;
               }
           }
           settings.UseSubmitBehavior = true;
       }).GetHtml()
        </div>
    </div>
    <div style="clear: both" id="searchResults">
        @Html.DevExpress().GridView(settings =>
   {
       int index = 0;
       string image = string.Empty;
       settings.Name = "dvData";
       settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
       settings.KeyFieldName = "DisplayOutletImageID";
       settings.Settings.ShowGroupPanel = false;
       settings.Settings.ShowFilterRow = false;
       settings.SettingsBehavior.EnableRowHotTrack = true;
       settings.SettingsBehavior.AllowSort = false;
       settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
       settings.DataBound = (source, e) =>
       {
           ASPxGridView dv = (ASPxGridView)source;
           GridViewDataTextColumn colNo = new GridViewDataTextColumn();
           colNo.Caption = Localization.No;
           colNo.FieldName = "STT";
           colNo.FixedStyle = GridViewColumnFixedStyle.Left;
           colNo.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
           colNo.Width = 30;
           colNo.VisibleIndex = 0;
           colNo.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
           dv.Columns.Add(colNo);
       };
       settings.CustomUnboundColumnData = (source, e) =>
       {
           if (e.Column.FieldName == "STT")
           {
               e.Value = e.ListSourceRowIndex + 1;
           }
       };
       settings.Columns.Add(column =>
       {
           column.FieldName = "OutletID";
           column.Caption = Localization.OutletID;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
       });
       settings.Columns.Add(column =>
       {
           column.FieldName = "OutletName";
           column.Caption = Localization.OutletName;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
       });
       settings.Columns.Add(column =>
       {
           column.FieldName = "Address";
           column.Caption = Localization.Address;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
       });
       settings.Columns.Add(column =>
       {
           column.FieldName = "distance";
           column.Caption = Localization.Distance;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
           column.Width = 110;
       });
       settings.Columns.Add(column =>
       {
           column.FieldName = "file_name";
           column.Caption = Localization.ImageOutlet;
           column.Width = 150;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
           column.SetDataItemTemplateContent(c =>
           {
               string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content(String.Format("http://eroute.thp.com.vn/SFA/outlet/images/{0}", DataBinder.Eval(c.DataItem, "file_name")));
               ViewContext.Writer.Write(String.Format("<center><a  class='example-image-link' href='" + imageUrl + "' data-lightbox='example-2'><img alt='image-2' class='example-image' src=\"{0}\" /></a></center>", imageUrl));
               index = 0;
               image = string.Empty;
           });
       });
       settings.Columns.Add(column =>
       {
           column.FieldName = "ImageFile";
           column.Caption = Localization.ImageFile;
           column.Width = 150;
           column.FixedStyle = GridViewColumnFixedStyle.Left;
           column.SetDataItemTemplateContent(c =>
           {
               if (DataBinder.Eval(c.DataItem, "ImageFile").ToString() != string.Empty)
               {
                   string filename = string.Empty;
                   string filenameOnServer = string.Empty;
                   string dt = DateTime.Parse(DataBinder.Eval(c.DataItem, "ImageDate").ToString()).ToString(eRoute.Models.Constant.imageDateFormat);
                   filenameOnServer = eRoute.Models.Constant.SalesOrdersImageFolder + dt + "/";
                   filename = filenameOnServer + DataBinder.Eval(c.DataItem, "ImageFile");
                   string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content(filename);
                   ViewContext.Writer.Write(String.Format("<center><a  class='example-image-link' href='" + imageUrl + "' data-lightbox='example-1'><img alt='image-1' class='example-image' src=\"{0}\" /></a></center>", imageUrl));
               }
           });
       });
       foreach (var item in Model.list_category)
       {
           settings.Columns.Add(col =>
           {
               col.Caption = item.Name;
               col.Width = System.Web.UI.WebControls.Unit.Percentage(100);
               col.FieldName = "DisplayOutletImageID";
               col.SetDataItemTemplateContent(c =>
               {
                   var value = DataBinder.Eval(c.DataItem, "DisplayOutletImageID");
                   var distance = DataBinder.Eval(c.DataItem, "distance");
                   var CategoryID = DataBinder.Eval(c.DataItem, "CategoryID");
                   if (distance != null)
                   {
                       image = distance.ToString();
                       return;
                   }
                   else
                   {
                       image = string.Empty;
                   }
                   index++;
                   var getVl = Model.list_category[index - 1];
                   Html.DevExpress().CheckBox(cbSettings =>
                   {
                       cbSettings.Style.Add("text-align", "center");
                       cbSettings.Name = value + "|" + c.VisibleIndex + "|" + getVl.CategoryID;
                       cbSettings.Properties.ValueChecked = true;
                       cbSettings.Properties.ValueUnchecked = false;
                       if (CategoryID != null)
                       {
                           string[] cut = CategoryID.ToString().Split(',');
                           if (cut.Contains(getVl.CategoryID.ToString()))
                           {
                               cbSettings.Checked = true;
                           }
                       }
                   }).GetHtml();
               });
           });
       }
       settings.Columns.Add(column =>
       {
           column.Caption = Localization.OtherReasons;
           column.FieldName = "DisplayOutletImageID";
           column.Width = 140;
           column.SetDataItemTemplateContent(c =>
           {
               if (image != string.Empty)
               {
                   return;
               }
               var OtherReasons = DataBinder.Eval(c.DataItem, "OtherReasons");
               var value = DataBinder.Eval(c.DataItem, "DisplayOutletImageID");
               Html.DevExpress().Memo(v =>
               {
                   v.Name = value + "|" + c.VisibleIndex + "|txtNode";
                   v.Width = 130;
                   v.Height = 168;
                   if (OtherReasons != null)
                   {
                       v.Text = OtherReasons.ToString();
                   }
               }).GetHtml();
           });
       });

       settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
       settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
       settings.Settings.VerticalScrollableHeight = 435;
   }
).Bind(Model.sp_Assesment_Auditor.ToList()).GetHtml()
    </div>
}