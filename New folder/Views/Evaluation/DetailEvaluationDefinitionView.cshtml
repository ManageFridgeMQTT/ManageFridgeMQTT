@model eRoute.Models.EvaluationDataModel
@{
    ViewBag.Title = Utility.Phrase("CreateEvaluationDefinition");
    Layout = "~/Views/Shared/_NewLayout.cshtml";
    List<string> listSelectedGeoology = ViewData["selectedGeoology"] as List<string>;
    string strSelectedGeoology = string.Join(";", listSelectedGeoology.Select(s=>"+"+s)); 
}
@{
    <script src="~/Scripts/EvaluationScripts/EvaluationScript.js"></script>
    <script type="text/javascript">
        var minReview = 10;
        var Evaluation_ValidateReviewNull = "@Utility.Phrase("Evaluation_ValidateReviewNull")";
        var Evaluation_ValidateReviewLessThan = "@Utility.Phrase("Evaluation_ValidateReviewLessThan")";
        Evaluation_ValidateDisPlayNull = "@Utility.Phrase("Evaluation_MesValidateDisplayNull")";
        Evaluation_ConfirmYesNo = "@Utility.Phrase("Evaluation_ConfirmYesNo")";
        Evaluation_ValidateListRegionNull = "@Utility.Phrase("Evaluation_MesValidateListRegioNull")";
        Evaluation_ValidateTimeInformationEmpty = "@Utility.Phrase("Evaluation_MesValidateTimeInformationEmptyNull")";
        Evaluation_ValidateTypeEvaluationNull = "@Utility.Phrase("Evaluation_MesValidateListEmployeeNotNull")";
        Evaluation_SaveOki = "@Utility.Phrase("Evaluation_SaveOK")";
        Evaluation_ValidateSumOutletCurentMustSumOutletFill = "@Utility.Phrase("Evaluation_ValidateSumOutletCurentMustSumOutletFill")";
    </script>
}
<div class="insider">
    <div id="loading" class="loading"></div>
    @Html.Hidden("selectedDisplayID", Model.FilterModel.DisplayID)
    @Html.Hidden("DSKhuVucDiaLy", strSelectedGeoology + ";")
    <input type="hidden" id="PageID" value="@ViewBag.PageInformation" />
    <div class="row display-table w-100pr mb-10 content-header">
        <div class="report-content-header">
            <div class="col-sm-8">
                <h1>@Utility.Phrase("Evaluation View")</h1>
            </div>
            <div class="col-sm-4">
                <div class="p-0 fr">
                    <a href="@Url.Action("EvaluationDefinition", "Evaluation")">
                        <button type="button" id="btnBack" title="Back"><i class="icon-back"></i>@Utility.Phrase("Back")</button>
                    </a>
                    @if (Model.FilterModel.isAuto)
                    {
                        <a href="@Url.Action("EvalAutoMark", "Evaluation", new { @sEvalID = Model.FilterModel.EvaluationID })">
                            <button type="button" id="btnNext" title="Next"><i class="icon-next"></i>@Utility.Phrase("AutoMarking")</button></a> 
                    }
                    else
                    {
                        <a href="@Url.Action("DistributeOutletToAuditor", "Evaluation", new { @DisplayID = Model.FilterModel.DisplayID, @DisplayCode = "",  @EvaluationCode = Model.FilterModel.EvaluationID,  @EvalState = Model.FilterModel.Status.ToString(), @EvalContent = "", @EvalDesc = "", @DispFromDate="", @DispToDate="", @EvalFromDate= "", @EvalToDate = "", @RefNumber = "" })">
                            <button type="button" id="btnNext" title="Next"><i class="icon-next"></i>@Utility.Phrase("Distribute")</button>
                        </a>   
                    }
                </div>
            </div>
        </div>
        @*@Html.Partial("HeaderCreateEvalDefinition", Model.FilterModel)*@
        <div id="HeaderEvaluation" class="w-100pr">
            @*Ma Danh Gia*@
            <div class="item fl">
                <label for="code" class="fl">@Utility.Phrase("EvaluationCode")</label>
                <div class="input-group">
                    @Html.TextBox("EvaluationCode", Model.FilterModel.EvaluationID, new { @placeholder = Utility.Phrase("AutoEvaluationCode"), @disabled = true })
                </div>
            </div>
            @*CTTB*@
            <div class="item fl">
                <label for="display" class="fl">@Utility.Phrase("DisplayName")</label>
                <div class="input-group">
                    @Html.Hidden("DisplayID", Model.FilterModel.DisplayID)
                    @Html.TextBox("DisplayCode", Model.FilterModel.Display, new { @class = "form-control", @placeholder = Utility.Phrase("SelectDisplayName"), @disabled = true })
                </div>
            </div>
            <div class="item fl">
                <label class="fl">@Utility.Phrase("Type")</label>
                <div class="input-group">
                    @Html.TextBox("EvalType", Model.FilterModel.listType.Where(x => x.Selected == true).Select(s => s.Text).SingleOrDefault(), new { @disabled = true })
                </div>
            </div>
            <div class="item fl">
                <label>@Utility.Phrase("Content")</label>
                <div class="input-group">
                    @Html.TextBox("EvalContent", Model.FilterModel.Content.ToString())
                </div>
            </div>
            <div class="item fl">
                <label>@Utility.Phrase("Status")</label>
                <div class="input-group">
                    @Html.TextBox("EvalState", Model.FilterModel.listStatus.Where(x => x.Selected == true).Select(s => s.Text).SingleOrDefault(), new { @disabled = true })
                </div>
            </div>
        </div>
    </div>
    <!-- Detail  -->
    <div class="content-body row">
        <div class="tab-header">
            <div class="toolbox">
                <div id="ErMesgBox" class="p-10 fl">
                    <span style="color: red" class="error"></span>
                </div>
                <div id="OkiMesgBox" class="p-10 fl">
                    <span style="color: green" class="error"></span>
                </div>
                <ul class="fr m-0">
                    <li>@if(Model.FilterModel.Status <= 2)
                        {
                            <button onclick="UpdateEvaluationID()"><i class="icon-save"></i>@Utility.Phrase("Update")</button>
                        }
                        <button class="btn-refresh" title="@Utility.Phrase("Refresh")"><i class="icon-update"></i>@Utility.Phrase("Refresh")</button>
                        <button @((Model.FilterModel.Status > 1) ? "disabled" : "") class="btn-select" id ="btnSelectEmployee" title="@Utility.Phrase("SelectEmployee")" data-toggle="modal" data-target="#participant-list" @(Model.FilterModel.isAuto ? "disabled" : "")>
                            <i class="icon-select"></i>
                            @Utility.Phrase("SelectEmployee")</button>
                    </li>
                    <li class="ts-pager">
                        <button type="button" title="@Utility.Phrase("GoBack")" class="prev"><i class="icon-go-back"></i></button>
                        <span class="pagedisplay"></span>
                        <button type="button" title="@Utility.Phrase("GoNext")" class="next"><i class="icon-go-next"></i></button>
                        <span>@Utility.Phrase("GotoPage")
                            <select class="pagenum input-mini" title="Select page number"></select>
                        </span>
                        <span>@Utility.Phrase("Pages")</span>
                        <select class="pagesize input-mini m-0" title="Select page size">
                            <option selected="selected" value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="40">40</option>
                            <option value="50">50</option>
                        </select>
                    </li>
                </ul>
            </div>
        </div>
        <div class="box-content">
            <div class="col-md-5">
                <table>
                    <thead class="block-theme">
                        <tr>
                            <th colspan="3">@Utility.Phrase("Information")</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>@Utility.Phrase("ChooseImageTimeDisplay")*</th>
                            <td>
                                <label for>@Utility.Phrase("Start")</label>
                                <input type="text" @(((Model.FilterModel.Status > 1 && Model.FilterModel.Type == "M") || (Model.FilterModel.Status > 2 && Model.FilterModel.Type == "A")) ? "disabled" : "") class="datepicker" id="DisplayDateFrom" value="@Model.FilterModel.DisplayFromDate.Value.ToShortPattern()" onchange="CheckSelectionDate($(this))" /></td>
                            <td>
                                <label for>@Utility.Phrase("End")</label>
                                <input type="text" @(((Model.FilterModel.Status > 1 && Model.FilterModel.Type == "M") || (Model.FilterModel.Status > 2 && Model.FilterModel.Type == "A")) ? "disabled" : "") class="datepicker" id="DisplayDateTo"  value="@Model.FilterModel.DisplayToDate.Value.ToShortPattern()" onchange="CheckSelectionDate($(this))" /></td>
                        </tr>
                        <tr>
                            <th>@Utility.Phrase("DisplayType")</th>
                            <td>
                                <label>
                                    <input name="type" id="EvalDateTypeByDate" type="radio" />@Utility.Phrase("WithDate")</label></td>
                            <td>
                                <label>
                                    <input name="type" type="radio" checked />@Utility.Phrase("WithTime")</label></td>
                        </tr>
                        <tr>
                            <th>@Utility.Phrase("TimeEvaluation")* </th>
                            <td>
                                <label for>@Utility.Phrase("Start")</label>
                                <input type="text" @((Model.FilterModel.Status > 2) ? "disabled" : "") class="datepicker" id="EvalDateFrom" value="@Model.FilterModel.EvalFromDate.Value.ToShortPattern()" onchange="CheckSelectionDate($(this))" /></td>
                            <td>
                                <label for>@Utility.Phrase("End")</label>
                                <input type="text" @((Model.FilterModel.Status > 2) ? "disabled" : "") class="datepicker" id="EvalDateTo" value="@Model.FilterModel.EvalToDate.Value.ToShortPattern()" onchange="CheckSelectionDate($(this))" /></td>
                        </tr>
                        <tr>
                            <th>@Utility.Phrase("RateReview")</th>
                            <td colspan="2">
                                <input name="isApplyReview" id="isApplyReview" type="checkbox" @((Model.FilterModel.HasRate) ? "checked" : "") onclick="ApplyReviewEmployee();" />
                                <input type="number" id="ReviewRate" class="ip-small" value="@Model.FilterModel.Rate" style="@((Model.FilterModel.HasRate) ? "" : "display: none")" />
                                %
                            </td>
                        </tr>
                        <tr>
                            <th colspan="3">
                                <div class="col-sm-4">
                                    <fieldset>
                                        <legend>@Utility.Phrase("EvaluationType")</legend>
                                        @if (Model.FilterModel.isAuto)
                                        {
                                            <label>
                                                <input name="assume" id="assumeAuto" type="radio" checked onclick="VisibleSelectEmployee();" />@Utility.Phrase("Auto")</label>
                                        }
                                        else
                                        {
                                            <label>
                                                <input name="assume" id="assumeManu" type="radio" checked onclick="VisibleSelectEmployee();" />@Utility.Phrase("Manual")</label>
                                        }
                                    </fieldset>
                                </div>
                                <div id="isNumeric-box" class="col-sm-4" style="@((Model.FilterModel.isNumeric) ? "" : "display:none")">
                                    <fieldset>
                                        <legend>@Utility.Phrase("EvaluationNumeric")</legend>
                                        <label>
                                            <input @((Model.FilterModel.Status > 2) ? "disabled" : "") name="numeric" id="isNumeric" type="checkbox" data-toggle="modal" @((Model.FilterModel.isNumeric) ? "checked" : "") data-target="#product-list" />
                                        </label>
                                    </fieldset>
                                </div>
                                <div class="col-sm-4">
                                    <fieldset>
                                        <legend>@Utility.Phrase("Area")</legend>
                                        <label>
                                            <input @((Model.FilterModel.Status > 2) ? "disabled" : "") name="area" id="isGeoology" type="radio" data-toggle="modal" data-target="#geo-area-list" @((!Model.FilterModel.isGeography) ? "checked" : "") />@Utility.Phrase("AreaGeography")
                                        </label>
                                        <label>
                                            <input @((Model.FilterModel.Status > 2) ? "disabled" : "") name="area" id="isCountry" type="radio" data-toggle="modal" data-target="#geo-area-ldist" onclick="GetAllOutletDisplay();" @((Model.FilterModel.isGeography) ? "checked" : "") />@Utility.Phrase("Country")
                                        </label>
                                    </fieldset>
                                </div>
                                <div id="product-list" class="modal fade" role="dialog">
                                    <div class="modal-dialog w-90pr mw-1000 bottom">
                                        <!-- Modal content-->
                                        <div class="modal-content">
                                            <div class="modal-header block-theme">
                                                <button type="button" class="close" data-dismiss="modal"><i class="icon-delete icon-white"></i></button>
                                                <h4 class="modal-title">@Utility.Phrase("ListOfProductsEvaluatedPresence")</h4>
                                            </div>
                                            <div id="itemlistbyrefnbr" class="modal-body p-0">
                                                @{ Html.RenderAction("ItemListByReferenceNbr");}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <script src="~/Scripts/EvaluationScripts/bootstrap.treeview.js"></script>
                                <div id="geo-area-list" class="modal fade" role="dialog">
                                    <div class="modal-dialog w-90pr mw-500 bottom">
                                        <!-- Modal content-->
                                        <div class="modal-content">
                                            <div class="modal-header block-theme">
                                                <button type="button" class="close" data-dismiss="modal" onclick="CancelSelectGeo();"><i class="icon-delete icon-white"></i></button>
                                                <button type="button" class="button" style="background-color:white; float:right" title="@Utility.Phrase("Select")" onclick="SelectGeo();">@Utility.Phrase("Select")</button>
                                                <h4 class="modal-title">@Utility.Phrase("SelectAreaGeography")</h4>
                                            </div>
                                            <div class="modal-body p-0">
                                                <div class="table-box wrapper">
                                                    <div id="geo-area-treeview" class="treeview"></div>
                                                    <script>
                                                        var selectedGeo = $('#DSKhuVucDiaLy').val().split(';');
                                                        ListGeo = selectedGeo;
                                                        ListResult = @Html.Raw(Json.Encode(ViewData["GeoologyData"]));
                                                        geoData = ListResult.reduce(function (r, a) {
                                                            function getParent(s, b) {
                                                                return b.id === a.parentId ? b : (b.nodes && b.nodes.reduce(getParent, s));
                                                            }
                                                            var index = 0, node;
                                                            if ('parentId' in a) {
                                                                node = r.reduce(getParent, {});
                                                            }
                                                            if (node && Object.keys(node).length) {
                                                                node.nodes = node.nodes || [];
                                                                node.nodes.push(a);
                                                            } else {
                                                                while (index < r.length) {
                                                                    if (r[index].parentId === a.id) {
                                                                        a.nodes = (a.nodes || []).concat(r.splice(index, 1));
                                                                    } else {
                                                                        index++;
                                                                    }
                                                                }
                                                                r.push(a);
                                                            }
                                                            return r;
                                                        }, []);

                                                        var $checkableTree = $('#geo-area-treeview').treeview({
                                                            data: geoData,
                                                            showIcon: false,
                                                            collapsed: true,
                                                            showCheckbox: true,
                                                            selectable: false,
                                                            multiSelect: true,
                                                            highlightSelected: false,
                                                            onNodeChecked: function (event, node) {
                                                                ListGeo.push("+" + node.MaKhuVuc);
                                                            },
                                                            onNodeUnchecked: function (event, node) {
                                                                ListGeo = jQuery.grep(ListGeo, function (a) {
                                                                    return a !== "+" + node.MaKhuVuc;
                                                                });
                                                            }
                                                        });

                                                    </script>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </th>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-7">
                <div id="userlistbyselection" class="modal-body p-0">
                    @{ Html.RenderAction("UserListBySelection");}
                </div>
            </div>
            <div id="participant-list" class="modal fade" role="dialog">
                <div class="modal-dialog w-90pr mw-1000 bottom">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header block-theme">
                            <button type="button" id="btnSelectE" class="close" style="background-color: white;" title="Select" onclick="ChooseListEmployee();">@Utility.Phrase("Select")</button>
                            <button type="button" id="btnCancelE" class="close" style="background-color: white;" title="Cancel" onclick="CancelListEmployee();">@Utility.Phrase("Cancel")</button>
                            <h4 class="modal-title">@Utility.Phrase("ListEmployees")</h4>
                        </div>
                        <div id="participantlist" class="modal-body p-0">
                            <div class="table-box wrapper">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>@Utility.Phrase("No")</th>
                                            <th>@Utility.Phrase("EmployeeName")</th>
                                            <th>@Utility.Phrase("Phone")</th>
                                            <th>@Utility.Phrase("Choose")</th>
                                        </tr>
                                    </thead>
                                    <tbody id="my_table_Participant">
                                        @foreach (var item in Model.AllUserList)
                                        {
                                            
                                            <tr>
                                                <td>@Html.DisplayFor(modelItem => item.STT)</td>
                                                <td style="display: none;">@Html.DisplayFor(modelItem => item.MaNhanVien)</td>
                                                <td>@Html.DisplayFor(modelItem => item.TenNhanVien)</td>
                                                <td>@Html.DisplayFor(modelItem => item.SoDienThoai)</td>
                                                <td>
                                                    <input name="participant-i" id="participant-@item.STT" type="checkbox" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function UpdateEvaluationID() {
        if (valDisplay() && valListRegion() && valTypeEvaluation() && valDate()) {
            // Validation all input data
            var checkinput = false;

            var rows = $('#my_table_Display').children();
            for (i = 0; i < rows.length; i++) {
                if ($('#DisplayCode').val() == rows[i].children[2].innerHTML)
                    checkinput = true;
            }
            var InputData = { MaThamChieu: '', MaCTTB: '', NoiDungCTTB: '', ThoiGianCTTBTu: '', ThoiGianCTTBDen: '', KieuTGDanhGia: '', ThoiGianDanhGiaTu: '', ThoiGianDanhGiaDen: '', TyLeReview: '0', LoaiHinhDanhGia: '', DanhGiaNumeric: '', DanhSachItemID: '', DanhSachChonItem: '', DanhSachUserID: '', DanhSachUserRole: '', DanhSachUserLeader: '', LoaiKhuVuc: '', DanhSachKhuVuc: '' }

            InputData.MaCTTB = $('#DisplayID').val();
            InputData.MaThamChieu = $('#RefNumber').val();
            InputData.NoiDungCTTB = $('#EvalContent').val();
            InputData.ThoiGianCTTBTu = $('#DisplayDateFrom').val();
            InputData.ThoiGianCTTBDen = $('#DisplayDateTo').val();
            InputData.ThoiGianDanhGiaTu = $('#EvalDateFrom').val();
            InputData.ThoiGianDanhGiaDen = $('#EvalDateTo').val();
            InputData.MaDinhNghia = $('#EvaluationCode').val();
            if ($('#isApplyReview').is(':checked')) {
                InputData.TyLeReview = $('#ReviewRate').val();
            }

            if ($('input[id=assumeManu]:checked').length > 0) {
                InputData.LoaiHinhDanhGia = "0";
            } else {
                InputData.LoaiHinhDanhGia = "1";
            }

            InputData.DanhSachItemID = "";
            if ($('input[id=isNumeric]:checked').length > 0) {
                InputData.DanhGiaNumeric = "1";
                var rows = $('#my_table_Item').children();
                for (i = 0; i < rows.length; i++) {
                    if ($('#item-' + rows[i].children[0].innerHTML).prop('checked'))
                        InputData.DanhSachItemID = InputData.DanhSachItemID + ";" + rows[i].children[0].innerHTML;
                }
            } else {
                InputData.DanhGiaNumeric = "0";
            }

            if ($('input[id=EvalDateTypeByDate]:checked').length > 0) {
                InputData.KieuTGDanhGia = "0";
            } else {
                InputData.KieuTGDanhGia = "1";
            }
        
            InputData.LoaiKhuVuc = "0";
            if ($('input[id=isGeoology]:checked').length > 0 || $('input[id=isCountry]:checked').length > 0) {
                InputData.LoaiKhuVuc = "1";
                InputData.DanhSachKhuVuc = $('#DSKhuVucDiaLy').val();
            }
            InputData.DanhSachUserID = "";
            InputData.DanhSachUserRole = "";
            InputData.DanhSachUserLeader = "";
            $('#my_table_Member tr').each(function () {
                var roleSelect = $(this).find('td:nth-child(7)');
                var roleID = $(roleSelect).find("select[name='participant']").val();
                var leaderID = $(roleSelect).find("select[name='leader-user']").val();
                if (roleID > 0) {
                    InputData.DanhSachUserID = InputData.DanhSachUserID + ";" + $(this).find('td:nth-child(3)')[0].innerHTML;
                    InputData.DanhSachUserRole = InputData.DanhSachUserRole + ";" + roleID;
                    if (leaderID != null) {
                        InputData.DanhSachUserLeader = InputData.DanhSachUserLeader + ";" + leaderID;
                    } else {
                        InputData.DanhSachUserLeader = InputData.DanhSachUserLeader + ";" + "";
                    }
                }
            });
            var list = [];
            var rows = $('#my_table_Member').children();
            for (i = 0; i < rows.length; i++) {
                var item = { key: rows[i].children[2].innerHTML, Role: $("#participantL-" + i + " option:selected").val() };
                list.push(item);
            }
            var clean = remove_duplicates();
            if (list.length != clean.length) {
                $('#ErMesgBox span[class^="error"]').html('Data was duplicated. Please choose other roles for these employees');
                return false;
            }
            else {
                $.ajax({
                    url: 'UpdateEvaluationID',
                    method: 'POST',
                    data: InputData,
                    dataType: 'json',
                    success: function (result) {
                        $(".loading").hide();
                        $('#OkiMesgBox span[class^="error"]').html(result);
                    }
                }).done(function () {
                });
                $(".loading").show();
            }
        }
    }
</script>
