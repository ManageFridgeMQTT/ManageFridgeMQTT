@model eRoute.Models.EvaluationDataModel
@{
    //ViewBag.Title = "OutletImageEvaluation";
    ViewBag.Title = Utility.Phrase("OutletImageEvaluation");
    Layout = "~/Views/Shared/_NewLayout.cshtml";

    EvalAutoMarkMV EvalMarkInfo = ViewData["EvalAutoMarkMV"] as EvalAutoMarkMV;
}

<div id="shCenter" style="z-index:99999">
    <label id="mSNoData" style="align-content:center;color:green"></label>
</div>
<div class="insider">
    <input type="hidden" id="selectedDisplayID">
    <input type="hidden" id="PageID" value="@ViewBag.PageInformation" />
    <input type="hidden" id="ScreenID" value="@ViewBag.ScreenID" />
    <div id="loading" class="loading"></div>
    <div class="row display-table w-100pr mb-10 content-header">
        <div class="report-content-header">
            <div class="col-sm-8">
                <h1>@Utility.Phrase("OutletImageEvaluation")</h1>
            </div>
        </div>
        <div class="w-100pr">
            <div class="item fl">
                <label for="code" class="fl">@Utility.Phrase("EvaluationCode")</label>
                <div class="input-group">
                    @Html.TextBox("EvaluationCode", Model.FilterModel.EvaluationID, new { @class = "form-control", @placeholder = Utility.Phrase("SelectEvaluationCode") })
                    <div class="input-group-btn">
                        <button type="button" id="btncode" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span></button>
                        <ul class="dropdown-menu">
                            <li>
                                <div style="height: auto; overflow-y: auto; overflow-x: auto;" class="table-box wrapper">
                                    <table class="table table-striped nowrap m-0">
                                        <thead class="block-theme">
                                            <tr>
                                                <th>@Utility.Phrase("No")</th>
                                                <th>@Utility.Phrase("ProgramName")</th>
                                                <th>@Utility.Phrase("EvaluationCode")</th>
                                                <th>@Utility.Phrase("DateTimeEval")</th>
                                                <th style="display:none">@Utility.Phrase("EvaluationStatus")</th>
                                                <th>@Utility.Phrase("YourStatus")</th>
                                            </tr>
                                        </thead>
                                        <tbody id="my_table_EvaluationID">
                                            @if (Model.FilterModel.EvaluationData != null)
                                            {
                                                int i = 1;
                                                foreach (var item in Model.FilterModel.EvaluationData)
                                                {
                                                    <tr>
                                                        <td>@i</td>
                                                        <td style="display:none">@item.EvaluationID</td>
                                                        <td>@item.ProgramName</td>
                                                        <td>@item.EvaluationID - @item.ProgramContent</td>
                                                        <td>@item.EvalDateFrom.ToShortDateString() - @item.EvalDateTo.ToShortDateString()</td>
                                                        <td style="display:none"><span class="@item.ColorStatus bold">@Utility.Phrase("EvalState_" + item.EvalState)</span></td>
                                                        <td><span class="@item.ColorYourStatus bold">@Utility.Phrase("EvalEmployeeStatus_" + item.YourStatus)</span></td>
                                                    </tr>
                                                    i++;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row content-body">
        <div class="tab-header">
            <div class="toolbox">
                <ul class="fr m-0">
                    <li>
                        @if (!string.IsNullOrEmpty(Model.FilterModel.EvaluationID))
                        {
                            if (EvalMarkInfo.ImageMarking != EvalMarkInfo.TotalImages)
                            {
                                <a href="@Url.Action("MarkingOutletImageEval", "Evaluation", new
                                {
                                    sEvalID = Model.FilterModel.EvaluationID,
                                    sOutletID = "",
                                    typeMarking = "Mark"
                                })">
                                    <button type="button" title="@Utility.Phrase("Mark")"><i class="icon-display"></i>@Utility.Phrase("Mark")</button>
                                </a>
                            }
                            if (EvalMarkInfo.ImageMarking > 0)
                            {
                                <a href="@Url.Action("MarkingOutletImageEval", "Evaluation", new
                                {
                                    sEvalID = Model.FilterModel.EvaluationID,
                                    sOutletID = "",
                                    typeMarking = "ReMark"
                                })">
                                    <button type="button" title="@Utility.Phrase("ReMark")"><i class="icon-display"></i>@Utility.Phrase("ReMark")</button>
                                </a>
                            }
                            if (EvalMarkInfo.ImgRejectMark > 0)
                            {
                                <a href="@Url.Action("MarkingOutletImageEval", "Evaluation", new
                                {
                                    sEvalID = Model.FilterModel.EvaluationID,
                                    sOutletID = "",
                                    typeMarking = "RejectMark"
                                })">
                                    <button type="button" title="@Utility.Phrase("RejectMark")"><i class="icon-display"></i>@Utility.Phrase("RejectMark")</button>
                                </a>
                            }
                        }
                        <a href="@Url.Action("OutletImageEvaluation", "Evaluation", new {sEvalID = Model.FilterModel.EvaluationID, type = "Refresh" })">
                            <button type="button" title="@Utility.Phrase("Refresh")"><i class="icon-update"></i>@Utility.Phrase("Refresh")</button>
                        </a>
                    </li>
                    <li class="ts-pager">
                        <button type="button" title="@Utility.Phrase("GoBack")" class="prev"><i class="icon-go-back"></i></button>
                        <span class="pagedisplay"></span>
                        <button type="button" title="@Utility.Phrase("GoNext")" class="next"><i class="icon-go-next"></i></button>
                        <span>
                            @Utility.Phrase("GotoPage")
                            <select class="pagenum input-mini" title="Select page number"></select>
                        </span>
                        <span>@Utility.Phrase("Pages")</span>
                        <select class="pagesize input-mini m-0" title="Select page size">
                            <option selected="selected" value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="40">40</option>
                            <option value="50">50</option>
                        </select>
                    </li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2">
                <div class="table-box">

                    <table>
                        <thead class="block-theme">
                            <tr>
                                <th colspan="2">@Utility.Phrase("EvalID"): @((EvalMarkInfo.Evaluation != null) ? EvalMarkInfo.Evaluation.EvaluationID : "")</th>
                            </tr>
                        </thead>
                        @if (EvalMarkInfo.Evaluation != null)
                        {
                            <tbody>
                                <tr>
                                    <th colspan="2">@Utility.Phrase("DateEvaluate"): @EvalMarkInfo.Evaluation.ProgramDateFrom.ToShortDateString() - @EvalMarkInfo.Evaluation.ProgramDateTo.ToShortDateString()</th>
                                </tr>
                                <tr>
                                    <th>@Utility.Phrase("DateMarking")</th>
                                    <td class="align-right">@EvalMarkInfo.DateAutoMarking.ToShortDateString()</td>
                                </tr>
                                <tr>
                                    <th>@Utility.Phrase("TotalImages") </th>
                                    <td class="align-right">@EvalMarkInfo.TotalImages</td>
                                </tr>
                                <tr>
                                    <th><a href="@Url.Action("DetailListImage", "Evaluation", new { @sEvalID = EvalMarkInfo.Evaluation.EvaluationID, @strType = Utility.TypeID.ImgMarking })">@Utility.Phrase("ImageMarking") </a></th>
                                    <td class="align-right">@EvalMarkInfo.ImageMarking</td>
                                </tr>
                                <tr>
                                    <th>@Utility.Phrase("NumberStoresEvaluated") </th>
                                    <td class="align-right">@EvalMarkInfo.OutletMarking</td>
                                </tr>
                                <tr>
                                    <th><a href="@Url.Action("DetailListImage", "Evaluation", new { @sEvalID = EvalMarkInfo.Evaluation.EvaluationID, @strType = Utility.TypeID.ImgFakes })">@Utility.Phrase("NumberArtifacts") </a></th>
                                    <td class="align-right">@EvalMarkInfo.ImgFakes</td>
                                </tr>
                                <tr>
                                    <th><a href="@Url.Action("DetailListImage", "Evaluation", new { @sEvalID = EvalMarkInfo.Evaluation.EvaluationID, @strType = Utility.TypeID.ImgNotStandards })">@Utility.Phrase("NumberImageNonStandard") </a></th>
                                    <td class="align-right">@EvalMarkInfo.ImgNotStandard</td>
                                </tr>
                                <tr>
                                    <th><a href="@Url.Action("DetailListImage", "Evaluation", new { @sEvalID = EvalMarkInfo.Evaluation.EvaluationID, @strType = Utility.TypeID.ImgNotPass })">@Utility.Phrase("NumberImageFailed") </a></th>
                                    <td class="align-right">@EvalMarkInfo.ImgNotPass</td>
                                </tr>
                                @*<tr>
                                        <th><a href="@Url.Action("DetailListImage", "Evaluation", new { @sEvalID = EvalMarkInfo.Evaluation.EvaluationID, @strType = Utility.TypeID.ImgNotNumberic })">@Utility.Phrase("NumberImageNotNumeric") </a></th>
                                        <td class="align-right">@EvalMarkInfo.ImgNotPassNumberic</td>
                                    </tr>*@
                            </tbody>

                        }
                    </table>
                </div>
            </div>
            <div class="col-sm-10">
                <div class="tab-content wrapper">
                    <table id="table" class="tablesorter">
                        <thead class="block-theme">
                            <tr>
                                <th data-placeholder="" class="filter-false">@Utility.Phrase("Action")</th>
                                <th>@Utility.Phrase("DistributorCode")</th>
                                <th>@Utility.Phrase("Report_Distributor")</th>
                                <th>@Utility.Phrase("OutletID")</th>
                                <th>@Utility.Phrase("Outlet")</th>
                                <th class="filter-select filter-onlyAvail">@Utility.Phrase("Eval_Status")</th>
                                <th>@Utility.Phrase("Eval_SumImage")</th>
                                <th>@Utility.Phrase("Eval_SumImageEvaluated")</th>
                                <th>@Utility.Phrase("TB_isMatchedWithBefore")</th>
                                <th>@Utility.Phrase("TB_isAccepted")</th>
                                <th>@Utility.Phrase("TB_isCaptured")</th>
                                <th>@Utility.Phrase("TB_isPassed")</th>
                                <th>@Utility.Phrase("Eval_SumImageRest")</th>
                                <th>@Utility.Phrase("Eval_SumImageHasReview")</th>
                                <th>@Utility.Phrase("Eval_SumImageAppoved")</th>
                                <th>@Utility.Phrase("Eval_SumImageReject")</th>
                                <th>@Utility.Phrase("Eval_SumImageisNotYetApprove")</th>
                                <th>@Utility.Phrase("Eval_MarkDate")</th>
                                <th>@Utility.Phrase("Eval_Reviewer") </th>
                            </tr>
                        </thead>
                        <tbody id="my_table_DetailEvaluation">
                            @if (Model.OutletEvalDetailList != null)
                            {
                                foreach (var item in Model.OutletEvalDetailList)
                                {
                                    <tr>
                                        <td>
                                            <a href="@Url.Action("MarkingOutletImageEval", "Evaluation", new
                                            {
                                                sEvalID = item.MaDanhGia.Trim(),
                                                sOutletID = item.MaCuaHang
                                            })">
                                                <button type="button" id="btnBack" title="@Utility.Phrase("Eval_Mark")"><i class="icon-display"></i>@Utility.Phrase("Eval_Mark")</button>
                                            </a>
                                        </td>
                                        <td>@Html.DisplayFor(modelItem => item.DistributorID)</td>
                                        <td>@Html.DisplayFor(modelItem => item.DistributorName)</td>
                                        <td>@Html.DisplayFor(modelItem => item.MaCuaHang)</td>
                                        <td>@Html.DisplayFor(modelItem => item.TenCuaHang)</td>
                                        <td><span class=@item.MauSac>@Utility.Phrase(item.stringTrangThai) </span></td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImage)</td> 
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImageisFinished)</td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgMatchedWithBefore)</td> 
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgAccepted)</td> 
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgCaptured)</td> 
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgPassed)</td> 
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgRest)</td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImgReview)</td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImageApprove)</td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImageReject)</td>
                                        <td class="align-right">@Html.DisplayFor(modelItem => item.SumImageisNotYetApprove)</td>
                                        <td>@Html.DisplayFor(modelItem => item.NgayCham)</td>
                                        <td>@Html.DisplayFor(modelItem => item.NguoiReview)</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <input type="hidden" id="selectedAuditorID" name="NameofselectedAuditorID" value="">
                    <input type="hidden" id="selectedOutletName" name="NameofselectedOutletName" value="">
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var mess = '@TempData["Mess"]';
        if (mess != '') {
            ShowMessageNoData('@TempData["Mess"]');
        }

        $("table").on('click', '#my_table_EvaluationID tr', function () {
            $(this).addClass('selected').siblings().removeClass('selected');
            var keyVal = $(this).find('td:nth-child(2)').html();
            $('#EvaluationCode').val(keyVal);
            var url = '@(Url.Action("OutletImageEvaluation", "Evaluation"))?sEvalID=' + keyVal;
            window.location = url;
        });
    });

    $("#table").tablesorter({
        // initialize zebra striping and filter widgets
        widgets: ["zebra", "filter"],

        ignoreCase: false,

        widgetOptions: {
            filter_childRows: false,
            filter_columnFilters: true,
            filter_cellFilter: '',
            filter_cssFilter: '',
            filter_defaultFilter: {},
            filter_excludeFilter: {},
            filter_external: '',
            filter_filteredRow: 'filtered',
            filter_formatter: null,
            filter_functions: {
            },
            filter_hideEmpty: true,
            filter_hideFilters: false,
            filter_ignoreCase: true,
            filter_liveSearch: true,
            filter_onlyAvail: 'filter-onlyAvail',
            filter_placeholder: { search: '', select: '' },
            filter_reset: 'button.reset',
            filter_saveFilters: true,
            filter_searchDelay: 300,
            filter_searchFiltered: true,
            filter_selectSource: null,
            filter_serversideFiltering: false,
            filter_startsWith: false,
            filter_useParsedData: false,
            filter_defaultAttrib: 'data-value',

        }

    });

</script>
