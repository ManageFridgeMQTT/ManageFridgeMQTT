@model HomeVM
@using DevExpress.Web.Mvc.UI;
@using DevExpress.Web.Mvc;
@using System.Web.UI.WebControls;
@{
    Layout = "";
    
}
<html>
<head>
    <title>@Utility.Phrase("SalesSupervisor_Title")</title>
    <meta charset="utf-8" />

    <script src="~/Content/THP/js/jquery.js"></script>
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.iconlabel.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.label.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.js")"></script>
    <!-- Leaflet MiniMap Plugins -->
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3.2&sensor=true"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet-google.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/jquery-1.9.1.min.js")"></script>
    <!-- Leaflet Element Label Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.iconlabel.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/BaseMarkerMethods.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Marker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/CircleMarker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Path.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Map.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/FeatureGroup.Label.js")"></script>
    <!-- ### Leaflet Element Label Plugins -->
    <!-- Leaflet MarkerCluster Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.Default.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.markercluster-src.js")"></script>
    <!-- ### Leaflet MarkerCluster Plugins -->
    <!-- Leaflet Awesome Markers Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/font-awesome.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.awesome-markers.css")"/>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.awesome-markers.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!--DATA TEMP-->
    <script type="text/javascript" src="@Url.Content("~/MapTest/mines.js")"></script>
    <!-- Leaflet MiniMap Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Control.MiniMap.css")" />
    <script  type="text/javascript"src="@Url.Content("~/MapTest/Control.MiniMap.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!-- Leaflet Routing Plugins -->
    @*<link rel="stylesheet" href="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.css")" />*@
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.OSRM.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Line.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Itinerary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Plan.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Control.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/Control.Geocoder.js")"></script>
    <!-- ### Leaflet Routing Plugins -->
    <!-- Leaflet SideBar Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.js")"></script>
    <!-- ### Leaflet SideBar Plugins -->
    <!-- Leaflet PolyLineText Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolyLineText/leaflet.textpath.js")"></script>
    <!-- ### Leaflet PolyLineText Plugins -->
    <!-- Leaflet PolylineDecorator Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.LineUtil.PolylineDecorator.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.RotatedMarker.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.Symbol.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.PolylineDecorator.js")"></script>
    <!-- ### Leaflet PolylineDecorator Plugins -->
    <!-- Leaflet Measure Distance Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Distance/distance.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Distance/leaflet.draw.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/Distance/leaflet.draw.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Distance/Distance.js")"></script>
    <!-- ### Leaflet Measure Distance Plugins -->


    <!-- DateTime Picker -->
    <link href="@Url.Content("~/Content/THP/css/jquery-ui-1.8.17.css")" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="@Url.Content("~/Content/THP/js/jquery-ui-1.8.17.min.js")"></script>
    <!-- ### DateTime Picker -->
    <script type="text/javascript" src="@Url.Content("~/Content/THP/js/jquery.price_format.1.8.js")"></script>

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
        new StyleSheet { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new StyleSheet { ExtensionSuite = ExtensionSuite.GridView },
        new StyleSheet { ExtensionSuite = ExtensionSuite.PivotGrid },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Chart },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Report },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Scheduler },
        new StyleSheet { ExtensionSuite = ExtensionSuite.TreeList }
    )
    @Html.DevExpress().GetScripts(
        new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new Script { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new Script { ExtensionSuite = ExtensionSuite.GridView },
        new Script { ExtensionSuite = ExtensionSuite.PivotGrid },
        new Script { ExtensionSuite = ExtensionSuite.Editors },
        new Script { ExtensionSuite = ExtensionSuite.Chart },
        new Script { ExtensionSuite = ExtensionSuite.Report },
        new Script { ExtensionSuite = ExtensionSuite.Scheduler },
        new Script { ExtensionSuite = ExtensionSuite.TreeList }
    )
    <style>
        body
        {
            padding: 0;
            margin: 0;
        }
        html, body, #map
        {
            height: 100%;
        }
        .placeMarks-label
        {
            -moz-box-shadow: none;
            -webkit-box-shadow: none;
            box-shadow: none;
            color: #fff;
            position: relative;
        }
        .alignleft
        {
            float: left;
        }
        .alignright
        {
            float: right;
        }
        
        .avata
        {
        }
        .details
        {
        }
        .details p
        {
            width: 250px;
        }
        .details p label
        {
            width: 100px;
        }
        .details span char
        {
            float: left;
        }
        .details span num
        {
            float: right;
        }
        #sidebar-left
        {
            overflow: hidden;
        }
        .loading {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 99999999999999999999;
            opacity: .3;
            background: url(/MapTest/images/loading.gif) no-repeat center #bbb;
            display: none;
        }
    </style>
</head>
<body>
    <form id="frmMap">
    <div id="container">
        <div id="map">
        </div>
        @*<script type="text/javascript" src="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.js")"></script>*@
        <div id="sidebar-left">
            <strong>@Utility.Phrase("SalesSupervisor_Filter")</strong>
            <br clear="all" />
            <br clear="all" />
            <div id="combobox">
                <table class='head-report' width='100%' cellpadding="3px" style="border-collapse: collapse;
                    display: block;">
                    <tbody style="width: 100%; font-size: 14px;">
                        <tr>
                            <td>
                                <span class="alignleft">@Utility.Phrase("SalesSupervisor_Date") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                    @Html.DevExpress().DateEdit(
                                    settings =>
                                    {
                                        settings.Name = "strFromDate";
                                        settings.Date = Model.VisitDate;
                                        settings.Properties.NullText = "dd-MM-yyyy";
                                        settings.Properties.EditFormat = EditFormat.Custom;
                                        settings.Properties.EditFormatString = "dd-MM-yyyy";
                                        settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { LoadSalesman(); }";
                                        settings.Width = Unit.Pixel(150);
                                    }
                                    ).GetHtml()
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: top">
                                <span class="alignleft">@Utility.Phrase("Region") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                    <label for="sales">
                                        @Html.DevExpress().ComboBox(
                                        settings =>
                                        {
                                            settings.Name = "RegionID";
                                            settings.Width = Unit.Pixel(250);
                                            settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialRegion" };
                                            settings.Properties.CallbackPageSize = 50;
                                            settings.Properties.DropDownRows = 15;
                                            settings.Properties.AllowMouseWheel = true;
                                            settings.Properties.TextFormatString = "{0}-{1}";
                                            settings.Properties.ValueField = "RegionID";
                                            settings.Properties.ValueType = typeof(string);
                                            settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                            settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                            settings.Properties.Columns.Add("RegionID", Utility.Phrase("RegionID"), 110);
                                            settings.Properties.Columns.Add("Name", Utility.Phrase("RegionName"), 200);
                                            settings.Properties.Height = Unit.Pixel(20);
                                            settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { AreaID.PerformCallback(); DistributorID.PerformCallback(); SalesSupID.PerformCallback(); }";
                                            settings.PreRender = (sender, e) =>
                                            {
                                                MVCxComboBox cmb = sender as MVCxComboBox;
                                                if (string.IsNullOrEmpty(Model.regionID))
                                                {
                                                    cmb.Value = Model.regionID;
                                                }
                                            };
                                        }
                                        ).BindList(Model.ListRegion).Bind(Model.regionID).GetHtml()</label>
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span class="alignleft">@Utility.Phrase("Area") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                    @Html.DevExpress().ComboBox(
                                    settings =>
                                    {
                                        settings.Name = "AreaID";
                                        settings.Width = Unit.Pixel(250);
                                        settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialArea" };
                                        settings.Properties.CallbackPageSize = 50;
                                        settings.Properties.DropDownRows = 15;
                                        settings.Properties.AllowMouseWheel = true;
                                        settings.Properties.TextFormatString = "{0}-{1}";
                                        settings.Properties.ValueField = "AreaID";
                                        settings.Properties.ValueType = typeof(string);
                                        settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                        settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                        settings.Properties.Columns.Add("AreaID", Utility.Phrase("AreaID"), 110);
                                        settings.Properties.Columns.Add("Name", Utility.Phrase("AreaName"), 200);
                                        settings.Properties.Height = Unit.Pixel(20);

                                        settings.PreRender = (sender, e) =>
                                        {
                                            MVCxComboBox cmb = sender as MVCxComboBox;
                                            if (string.IsNullOrEmpty(Model.areaID))
                                            {
                                                cmb.Value = Model.areaID;
                                            }
                                        };

                                        settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { DistributorID.PerformCallback(); SalesSupID.PerformCallback(); }";
                                        settings.Properties.EnableCallbackMode = true;
                                        settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['RegionID'] = RegionID.GetValue(); }";
                                    }
                                    ).BindList(Model.ListArea).Bind(Model.areaID).GetHtml()</span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span class="alignleft">@Utility.Phrase("SaleSup") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                    @Html.DevExpress().ComboBox(
                                    settings =>
                                    {
                                        settings.Name = "SalesSupID";
                                        settings.Width = Unit.Pixel(250);
                                        settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialSaleSup" };
                                        settings.Properties.CallbackPageSize = 50;
                                        settings.Properties.DropDownRows = 15;
                                        settings.Properties.AllowMouseWheel = true;
                                        settings.Properties.TextFormatString = "{1}-{0}";
                                        settings.Properties.ValueField = "EmployeeID";
                                        settings.Properties.ValueType = typeof(string);
                                        settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                        settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                        settings.Properties.Columns.Add("EmployeeID", Utility.Phrase("SaleSupID"), 110);
                                        settings.Properties.Columns.Add("EmployeeName", Utility.Phrase("SaleSupName"), 200);
                                        settings.Properties.Height = Unit.Pixel(20);
                                        settings.PreRender = (sender, e) =>
                                        {
                                            MVCxComboBox cmb = sender as MVCxComboBox;
                                            if (string.IsNullOrEmpty(Model.saleSupID))
                                            {
                                                cmb.Value = Model.saleSupID;
                                            }
                                        };

                                        settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { DistributorID.PerformCallback(); LoadSalesman(); }";
                                        settings.Properties.EnableCallbackMode = true;
                                        settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['RegionID'] = RegionID.GetValue(); e.customArgs['AreaID'] = AreaID.GetValue(); }";
                                    }
                                    ).BindList(Model.listSS).Bind(Model.saleSupID).GetHtml()</span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span class="alignleft">@Utility.Phrase("Distributor") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                    @Html.DevExpress().ComboBox(
                                    settings =>
                                    {
                                        settings.Name = "DistributorID";
                                        settings.Width = Unit.Pixel(250);
                                        settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialDistributor" };
                                        settings.Properties.CallbackPageSize = 50;
                                        settings.Properties.DropDownRows = 15;
                                        settings.Properties.AllowMouseWheel = true;
                                        settings.Properties.TextFormatString = "{1}-{0}";
                                        settings.Properties.ValueField = "DistributorID";
                                        settings.Properties.ValueType = typeof(int);
                                        settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                        settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                        settings.Properties.Columns.Add("DistributorCode", Utility.Phrase("DistributorCode"), 110);
                                        settings.Properties.Columns.Add("DistributorName", Utility.Phrase("DistributorName"), 200);
                                        settings.Properties.Height = Unit.Pixel(20);
                                        settings.PreRender = (sender, e) =>
                                        {
                                            MVCxComboBox cmb = sender as MVCxComboBox;
                                            if (Model.distributorID != 0)
                                            {
                                                cmb.Value = Model.distributorID;
                                            }
                                        };

                                        settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { LoadSalesman(); }";
                                        settings.Properties.ClientSideEvents.EndCallback = "function(s, e) { LoadSalesman(); }";
                                        //settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { LoadSalesman(); }";
                                        settings.Properties.EnableCallbackMode = true;
                                        settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['RegionID'] = RegionID.GetValue(); e.customArgs['AreaID'] = AreaID.GetValue(); e.customArgs['SalesSupID'] = SalesSupID.GetValue();  }";
                                    }
                                    ).BindList(Model.listDis).Bind(Model.distributorID).GetHtml()</span>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <span class="alignleft">@Utility.Phrase("Salesman") :</span> <span class="alignright" id="checkBoxSM" style="height: 250px;
                                    width: 250px; overflow: auto;"></span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <input type="button" value="@Utility.Phrase("View")" onclick="ViewInfoSelected();" />
            <input type="button" value="@Utility.Phrase("Clear")" onclick="ClearMap();" />
            <br clear="all" />
            <strong>@Utility.Phrase("SalesSupervisor_Infomation")</strong>
            <table>
                <tr>
                    <td>
                        @Utility.Phrase("SalesSupervisor_Outlet") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerOutletMCP" id="MarkerOutletMCP" checked="checked"
                            onchange="UpdateMap();" />@Utility.Phrase("IsMCP")
                        <input type="checkbox" name="LineOutlet" id="LineOutlet" checked="checked" onchange="UpdateMap();" />@Utility.Phrase("Line")
                        <input type="checkbox" name="MarkerOutlet" id="MarkerOutlet" onchange="UpdateMap();" />@Utility.Phrase("NotMCP")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("Salesman") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSM" id="MarkerSM" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineSM" id="LineSM" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("SaleSup") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSS" id="MarkerSS" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineSS" id="LineSS" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("ASM") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerASM" id="MarkerASM" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineASM" id="LineASM" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
            </table>
            <input type="button" value="@Utility.Phrase("Home")" onclick="Back();" />
            <br clear="all" />
            @*<br />
            <input type="button" value="@Utility.Phrase("View")" onclick="GetRoute('', 0, '', '');" />
            <input type="button" value="GetSalesmanLastLocation" onclick="GetSalesmanLastLocation();" />*@
        </div>
        <div id="sidebar-right">
            <h1>
                right sidebar</h1>
        </div>
        <div id="loading" class="loading"></div>
        <script type='text/javascript'>
        ////DATA USE IN MAP
        var strVisitDate = '';
        var listSMSelected = '';
        var distributorIDSelected = 0;
        var regionIDSelected = '';
        var areaIDSelected = '';
        var salesupIDSelected = '';

        var mapData = {};
        

        mapData.listRouteRender = [];
        mapData.listOutletInfo = [];
        mapData.listRouteInfo = [];
        mapData.LayerMarkerOutlet = L.layerGroup();
        mapData.LayerMarkerOutletMCP = L.layerGroup();
        mapData.LayerLineOutlet = L.layerGroup();

        mapData.LayerLineOutletSMSSASM = L.layerGroup();
        mapData.LayerMarkerOutletSMSSASM = L.layerGroup();

        mapData.LayerMarkerSM = L.layerGroup();
        mapData.LayerLineSM = L.layerGroup();
        mapData.listSMInfo = [];

        mapData.LayerMarkerSS = L.layerGroup();
        mapData.LayerLineSS = L.layerGroup();
        mapData.listSSInfo = [];

        mapData.LayerMarkerASM = L.layerGroup();
        mapData.LayerLineASM = L.layerGroup();
        mapData.listASMInfo = [];

        mapData.LayerMarkerSMLastLocation = L.layerGroup();
        mapData.listSMLastLocationInfo = [];

        mapData.LayerMarkerSSLastLocation = L.layerGroup();
        mapData.listSSLastLocationInfo = [];

        mapData.LayerMarkerASMLastLocation = L.layerGroup();
        mapData.listASMLastLocationInfo = [];

        mapData.LatLongBounds = [];

        ////##DATA USE IN MAP

        ////INIT GOOGLE MAP
        var map = new L.Map('map', {
            center: [16, 106],
            zoom: 7,
            minZoom: 0,
            maxZoom: 23
        });
        var googleLayer = new L.Google('ROADMAP');
        map.addLayer(googleLayer);
        ////##INIT GOOGLE MAP

        ////MarkerCluster
        mapData.markers = new L.MarkerClusterGroup({ spiderfyOnMaxZoom: true, showCoverageOnHover: false, zoomToBoundsOnClick: true, disableClusteringAtZoom: 16 });
        ////##MarkerCluster

        ////Distance
        var d = new L.Control.Distance(); map.addControl(d);
        map.addControl(new L.Control.Scale());
        ////##Distance

        ////MINI MAP
        //Plugin magic goes here! Note that you cannot use the same layer object again, as that will confuse the two map controls
		//var osm2 = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: 13, attribution: osmAttrib });
        var osm2 = new L.Google('ROADMAP');

		var rect1 = {color: "#ff1100", weight: 3};
		var rect2 = {color: "#0000AA", weight: 1, opacity:0, fillOpacity:0};
		var miniMap = new L.Control.MiniMap(
            osm2, 
            { 
                toggleDisplay: true
                , aimingRectOptions : rect1
                , shadowRectOptions: rect2
                , width: 250
			    , height: 250
            }
        ).addTo(map);
        ////##MINI MAP

        ////Sidebar
        var leftSidebar = L.control.sidebar('sidebar-left', {
            position: 'left'
        });
        map.addControl(leftSidebar);

        var rightSidebar = L.control.sidebar('sidebar-right', {
            position: 'right'
        });
        map.addControl(rightSidebar);
        leftSidebar.show();
        rightSidebar.hide();
        ////##Sidebar

        


         ////Map Utility
        
        $("form#frmMap").error(function() {
            alert("form Error!!!");
            window.location = window.location;
        });

        document.onkeypress = checkKey;
        function checkKey(e) {
            e = e || window.event;
            WriteLog(e.keyCode);
            //alert(e.keyCode);
            if(e.keyCode == 108)
            {
                leftSidebar.show();
            }
            else if(e.keyCode == 114)
            {
                rightSidebar.show();
            } 
        }

        var placeMarker_double = L.Icon.Label.extend({
            options: {
                iconUrl: '',
                shadowUrl: null,
                //iconSize: new L.Point(36, 36),
                iconAnchor: new L.Point(0, 0),
                //labelAnchor: new L.Point(-5, -1),
                wrapperAnchor: new L.Point(12, 13),
                labelClassName: 'placeMarks-label'
            }
        });

        function labelTextAnchor(text)
        {
            var n = text.toString().length;
            if(n == 1)
            {
                return 0;
            }
            else if(n == 2)
            {
                return -3;
            }
            else if(n == 3)
            {
                return -5;
            }
            else
            {
                return 0;
            }
        }

        function RandomColor() {
            colors = ['#000000', '#00008B', '#0000FF', '#006400', '#008000', '#008B8B', '#00DED1', '#1E90FF', '#228B22', '#2F4F4F', '#483D8B', '#4B0082', '#556B2F', '#5F9EA0', '#6495ED', '#696969', '#7FFF00', '#8A2BE2', '#8B0000', '#8B008B', '#9400D3', '#9932CC', '#A52A2A', '#B22222', '#BDB76B', '#CD5C5C', '#D2691E', '#DC143C', '#DEB887', '#E9967A', '#FF7F50', '#FF8C00']
            return colors[Math.floor(Math.random()*colors.length)];
        }

        function arrayPush(arA, arB)
        {
            if(arB != null)
            {
                var n = arB.length;
                for (var i = 0; i < n; i++) {
                    arB.push(arB[i]);
                }
            }
        }

        function WriteLog(log)
        {
            $('#log').html($('#log').html() + '<br/>' + log);
        }

        function Popup(latlng, content)
        {
            var popup = new L.Popup();
            popup.setLatLng(latlng);
            popup.setContent(content);
            map.openPopup(popup);
        }

        function MapPanToAndZoom(latlng, zoom)
        {
            if(mapData.LatLongBounds.length > 0)
            {
                var bounds = new L.LatLngBounds(mapData.LatLongBounds);
                map.fitBounds(bounds);
            }
            //map.fitBounds(mapData.markers.getBounds());
            //map.setView(latlng, zoom);
        }
        
        function RenderPolyline(latlngs, strLabel, strInfo, color, layer)
        {
            polylineMCP = L.polyline(latlngs, {color: color});
            polyLineArrow = L.polylineDecorator(latlngs, {
                patterns: [
                    {offset: 1, repeat: 100, symbol: L.Symbol.arrowHead({pixelSize: 15, pathOptions: {color: color, fillOpacity: 0.6, weight: 0}})}
                ]                
            });

            if(strLabel != '')
            {
                polylineMCP.bindLabel(strLabel, { noHide: true });
            }
            if(strInfo != '')
            {
                polylineMCP.bindPopup(strInfo);
            }               

            if(layer != null)
            {
                layer.addLayer(polylineMCP);
                layer.addLayer(polyLineArrow);
                if(layer == mapData.LayerLineOutletSMSSASM)
                {
                    map.addLayer(layer);
                }
            }

            return polylineMCP;
        }

        function RenderMarker(latlng, number, label, popup, icon, layer1, layer2)
        {
            if(latlng[0] != 0)
            {
                mapData.LatLongBounds.push(latlng);
            }

            var marker = L.marker(latlng, {
                icon: new placeMarker_double({
                    labelText: number
                    , labelAnchor: new L.Point(labelTextAnchor(number), -1)
                    , iconUrl: '../Content/THP/markers/' + icon + '.png'
                })
            })

            if(label != '')
            {
                marker.bindLabel(label, { noHide: false })
            }
            if(popup != '')
            {
                marker.bindPopup(popup, { noHide: false });
            }    

            if(layer1 != null)
            {
                layer1.addLayer(marker);
            }
            if(layer2 != null)
            {
                layer2.addLayer(marker);
            }

            return marker;
        }

        function RenderMarker(latlng, number, label, popup, icon, layer1, layer2, labelNoHide)
        {
            if(latlng[0] != 0)
            {
                mapData.LatLongBounds.push(latlng);
            }

            var marker = L.marker(latlng, {
                icon: new placeMarker_double({
                    labelText: number
                    , labelAnchor: new L.Point(labelTextAnchor(number), -1)
                    , iconUrl: '../Content/THP/markers/' + icon + '.png'
                })
            })

            if(label != '')
            {
                marker.bindLabel(label, { noHide: labelNoHide })
            }
            if(popup != '')
            {
                marker.bindPopup(popup, { noHide: false });
            }    

            if(layer1 != null)
            {
                layer1.addLayer(marker);
            }
            if(layer2 != null)
            {
                layer2.addLayer(marker);
            }

            return marker;
        }

        function UpdateMap()
        {
            mapData.MarkerOutletMCP = $("#MarkerOutletMCP").is(':checked');
            mapData.LineOutlet = $("#LineOutlet").is(':checked');
            mapData.MarkerSM = $("#MarkerSM").is(':checked');
            mapData.LineSM = $("#LineSM").is(':checked');
            mapData.MarkerSS = $("#MarkerSS").is(':checked');
            mapData.LineSS = $("#LineSS").is(':checked');
            mapData.MarkerASM = $("#MarkerASM").is(':checked');
            mapData.LineASM = $("#LineASM").is(':checked');
            mapData.MarkerOutlet = $("#MarkerOutlet").is(':checked');

            MapShowHideLayer(mapData.LayerMarkerOutletMCP, mapData.MarkerOutletMCP, true);
            MapShowHideLayer(mapData.LayerMarkerOutlet, mapData.MarkerOutlet, true);
            MapShowHideLayer(mapData.LayerLineOutlet, mapData.LineOutlet, false);
            MapShowHideLayer(mapData.LayerMarkerSM, mapData.MarkerSM, true);
            MapShowHideLayer(mapData.LayerLineSM, mapData.LineSM, false);
            MapShowHideLayer(mapData.LayerMarkerSS, mapData.MarkerSS, true);
            MapShowHideLayer(mapData.LayerLineSS, mapData.LineSS, false);
            MapShowHideLayer(mapData.LayerMarkerASM, mapData.MarkerASM, true);
            MapShowHideLayer(mapData.LayerLineASM, mapData.LineASM, false);          
        }

        function MapShowHideLayer(layer, show, isMarkerLayer)
        {
            if(show)
            {
                if(map.hasLayer(layer) == false)
                { 
                    map.addLayer(layer);
                    if(isMarkerLayer)
                    {
                        mapData.markers.addLayer(layer);
                    }
                }
            }
            else
            {
                if(map.hasLayer(layer) == true)
                {
                    map.removeLayer(layer);

                    if(isMarkerLayer)
                    {
                        mapData.markers.removeLayer(layer);
                    }
                }
            }
        }

        function ClearMap()
        {
            mapData.listRouteRender = [];
            mapData.listOutletInfo = [];
            mapData.listRouteInfo = [];
            mapData.LayerMarkerOutlet.clearLayers();
            mapData.LayerMarkerOutletMCP.clearLayers();
            mapData.LayerLineOutlet.clearLayers();

            mapData.LayerLineOutletSMSSASM.clearLayers();
            mapData.LayerMarkerOutletSMSSASM.clearLayers();

            mapData.LayerMarkerSM.clearLayers();
            mapData.LayerLineSM.clearLayers();
            mapData.listSMInfo = [];

            mapData.LayerMarkerSS.clearLayers();
            mapData.LayerLineSS.clearLayers();
            mapData.listSSInfo = [];

            mapData.LayerMarkerASM.clearLayers();
            mapData.LayerLineASM.clearLayers();
            mapData.listASMInfo = [];

            mapData.LayerMarkerSMLastLocation.clearLayers();
            mapData.listSMLastLocationInfo = [];

            mapData.LayerMarkerSSLastLocation.clearLayers();
            mapData.listSSLastLocationInfo = [];

            mapData.LayerMarkerASMLastLocation.clearLayers();
            mapData.listASMLastLocationInfo = [];

            mapData.LatLongBounds = [];

            mapData.markers.clearLayers();

            map.removeLayer(mapData.LayerMarkerOutletMCP);
            map.removeLayer(mapData.LayerLineOutlet);
            map.removeLayer(mapData.LayerLineOutletSMSSASM);
            map.removeLayer(mapData.LayerMarkerOutletSMSSASM);
            map.removeLayer(mapData.LayerLineSM);
            map.removeLayer(mapData.LayerMarkerSS);
            map.removeLayer(mapData.LayerLineSS);
            map.removeLayer(mapData.LayerMarkerASM);
            map.removeLayer(mapData.LayerLineASM);
            map.removeLayer(mapData.LayerMarkerSMLastLocation);
            map.removeLayer(mapData.LayerMarkerSSLastLocation);
            map.removeLayer(mapData.LayerMarkerASMLastLocation);
        }
        ////##Map Utility

        //-----------------Outlet Render-----------------//
        function RenderOutletByRoute(routeCD, distributorID) {
            mapData.LatLongBounds = [];
            GetParam();
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/GetOutletInRoute', //Your form processing file url
                data: { routeCD: routeCD, distributorID: distributorID, strVisitDate : strVisitDate }, //Forms name
                dataType: 'json',
                success: function (data) {
                    //insert vào list outlet để sử dụng cho Popup Info
                    mapData.listOutletInfo = mapData.listOutletInfo.concat(data.html);
                    mapData.listSMInfo = mapData.listSMInfo.concat(data.listSMVisit);
                    mapData.listSSInfo = mapData.listSSInfo.concat(data.listSSVisit);
                    mapData.listASMInfo = mapData.listASMInfo.concat(data.listASMVisit);

                    if(mapData.listRouteInfo == null)
                    {
                        mapData.listRouteInfo = [];
                    }

                    mapData.listRouteInfo.push(data.route);

                    //Render Outlet Marker and Line
                    RenderOutletMarker(data.html, data.route);

                    //Render Salesman Marker and Line
                    RenderSalesmanMarker(data.listSMVisit, data.route);

                    //Render SaleSup Marker and Line
                    RenderSaleSupMarker(data.listSSVisit, data.route);

                    //Render ASM Marker and Line
                    RenderASMMarker(data.listASMVisit, data.route);

                    UpdateMap();
                }
            });
        }        

        function RenderOutletMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var markerList = [];
            var latlngs = [];

            var lat = 0;
            var lng = 0;
            for (var i = 0; i < n; i++) {
                var marker = L.marker([data[i].Latitude, data[i].Longtitude], {
                    icon: new placeMarker_double({
                        labelText: data[i].RenderOrder
                        , labelAnchor: new L.Point(labelTextAnchor(data[i].VisitOrder), -1)
                        , iconUrl: '../Content/THP/markers/' + data[i].MarkerColor + '.png'
                    })
                })
                .bindLabel(data[i].VisitOrder + ' - ' + data[i].OutletName, { noHide: false })//data[i].VisitOrder + ' :' + data[i].OutletID + ' - ' + 
                .on('click', OutletClick);

                markerList.push(marker);
                
                if(data[i].ISMCP == 1)
                {
                    latlngs.push([data[i].Latitude, data[i].Longtitude]);
                    mapData.LayerMarkerOutletMCP.addLayer(marker);
                }
                else
                {
                    mapData.LayerMarkerOutlet.addLayer(marker);
                }

                if(data[i].Latitude != 0)
                {
                    lat = data[i].Latitude;
                    lng = data[i].Longtitude;
                }
            }

            MapPanToAndZoom([lat, lng], 16);

            //Render Route
            RenderPolyline(latlngs, routeInfo.RouteID + ' - ' + routeInfo.RouteName, StrRouteInfoPopup(routeInfo), 'blue', mapData.LayerLineOutlet);//RandomColor()
        }

        function OutletClick(e) {
            PopupOutlet(e.latlng);
        }

        function PopupOutlet(curPos)
        {
            var n = mapData.listOutletInfo.length;
            for (var i = 0; i < n; i++) {
                if(mapData.listOutletInfo[i].Latitude == curPos.lat && mapData.listOutletInfo[i].Longtitude == curPos.lng)
                {
                    Popup([mapData.listOutletInfo[i].Latitude, mapData.listOutletInfo[i].Longtitude], RenderOutletInfoPopup(mapData.listOutletInfo[i]));

                    map.addLayer(mapData.LayerMarkerOutletSMSSASM);
                    map.addLayer(mapData.LayerLineOutletSMSSASM);
                    break;
                }
            }
        }
        
        function RenderOutletInfoPopup(data)
        {
            map.removeLayer(mapData.LayerLineOutletSMSSASM);
            map.removeLayer(mapData.LayerMarkerOutletSMSSASM);
            mapData.LayerLineOutletSMSSASM.clearLayers();
            mapData.LayerMarkerOutletSMSSASM.clearLayers();

            var imagesCustomerUrl = '';
            data.ImageFile = 'http://eroute.thp.com.vn/SFA/SalesOrder/images/2014_05_08/1002330_SM00003512_0000520630_1399517845925.jpg';
            if(data.ImageFile != null && data.ImageFile != '')
            {
                imagesCustomerUrl = '<img src="' + data.ImageFile + '" width="100px" />';
            }
            infoHtml = 
                '<div style="width: 300px;" >' + 
                '<h3>' + data.OutletID + ' - ' + data.OutletName + '</h3>' +
                '<p><span class="alignleft">' + imagesCustomerUrl + '</span><span class="alignright">' +
                '<br/><strong>@Utility.Phrase("Contact")</strong>: ' + data.OutletName +
                '<br/><strong>@Utility.Phrase("Address")</strong>: ' + data.Address +
                '<br/><strong>@Utility.Phrase("Phone")</strong>: ' + data.Phone +
                '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.Latitude +
                '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.Longtitude +
                '</span></p>' +
                '<br clear="all"/>';               

                ////RENDER SALESMAN VISIT
                if(data.HasVisit == 1)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("OrderInfo")</h3>' +
                                  '<strong>@Utility.Phrase("SalesmanID")</strong>: ' + data.SalesmanID +
                                  '<br/><strong>@Utility.Phrase("SalesmanName")</strong>: ' + data.SalesmanName +
                                  '<p><span class="alignleft"><strong>@Utility.Phrase("Date")</strong>: </span><span class="alignright">' + data.VisitDate + '</span></p>';
                    var length = data.ListSMVisit.length;
                    element = null;
                    for (var i = 0; i < length; i++) {
                        element = data.ListSMVisit[i];
                         // Do something with element i.
                        infoHtml += '<br/>------------------------';
                        if (element.HasOrder == 1) {
                            infoHtml += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("OrderCode")</strong>: ' + element.Code +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DropSize")</strong>: ' + element.DropSize +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TotalAmt")</strong>: ' + element.TotalAmt +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TotalSKU")</strong>: ' + element.TotalSKU +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SMTimeStart +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SMTimeEnd +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SMDistance;
                        }
                        else if (element.HasOrder == 0) {
                            infoHtml += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("OrderCode")</strong>: @Utility.Phrase("NoOrder")' +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Reason")</strong>: ' + element.Reason +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SMTimeStart +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SMTimeEnd +
                                        '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SMDistance;
                        }

                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.SMLatitude, element.SMLongitude]);
                        RenderPolyline(latlngs, element.SMDistance + ' m', data.SalesmanName, 'black', mapData.LayerLineOutletSMSSASM);

                        RenderMarker([element.SMLatitude, element.SMLongitude], '', data.SalesmanID + ' - ' + data.SalesmanName, '', 'SM', mapData.LayerMarkerOutletSMSSASM, null);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER SALESMAN VISIT

                ////RENDER SALESUP VISIT
                var SSVisit = data.ListSSVisit.length;
                if(SSVisit > 0)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("SaleSupVisitInfo")</h3>' +
                                  '<strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName;
                    element = null;
                    for (var i = 0; i < 1; i++) {
                        element = data.ListSSVisit[i];
                        // Do something with element i.
                        infoHtml += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SUPTimeStart +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SUPTimeEnd +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SUPDistance +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Latitude")</strong>: ' + element.SUPLatitudeStart +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Longitude")</strong>: ' + element.SUPLongtitudeStart;

                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.SUPLatitudeStart, element.SUPLongtitudeStart]);
                        RenderPolyline(latlngs, element.SUPDistance + ' m', data.SaleSupName, 'green', mapData.LayerLineOutletSMSSASM);

                        RenderMarker([element.SUPLatitudeStart, element.SUPLongtitudeStart], '', data.SaleSupID + ' - ' + data.SaleSupName, '', 'SS', mapData.LayerMarkerOutletSMSSASM, null);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER SALESUP VISIT

                ////RENDER ASM VISIT
                var ASMVisit = data.ListASMVisit.length;
                if(ASMVisit > 0)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("ASMVisitInfo")</h3>' +
                                  '<strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;
                    element = null;
                    for (var i = 0; i < 1; i++) {
                        element = data.ListASMVisit[i];
                        // Do something with element i.
                        infoHtml += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.ASMTimeStart +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.ASMTimeEnd +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Distance")</strong>: ' + element.ASMDistance +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Latitude")</strong>: ' + element.ASMLatitudeStart +
                                    '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Longitude")</strong>: ' + element.ASMLongtitudeStart;

                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.ASMLatitudeStart, element.ASMLongtitudeStart]);
                        RenderPolyline(latlngs, element.ASMDistance + ' m', data.ASMName, 'yellow', mapData.LayerLineOutletSMSSASM);

                        RenderMarker([element.ASMLatitudeStart, element.ASMLongtitudeStart], '', data.ASMID + ' - ' + data.ASMName, '', 'ASM', mapData.LayerMarkerOutletSMSSASM, null);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER ASM VISIT

            infoHtml += '</div>';
            return infoHtml;
        }
        //-----------------END Outlet Render-----------------//

        //-----------------Route Render-----------------//
        function StrRouteInfoPopup(routeInfo)
        {
            infoHtml = '<h3>' + routeInfo.RouteID + ' - ' + routeInfo.RouteName + '</h3>' +
                       '<strong>@Utility.Phrase("Salesman")</strong>: ' + routeInfo.SalesmanID  + ' - ' + routeInfo.SalesmanName + 
                       '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + routeInfo.DistributorCode + ' - ' + routeInfo.DistributorName + 
                       '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName + 
                       '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + routeInfo.ASMID + ' - ' + routeInfo.ASMName + 
                       '<br/><strong>@Utility.Phrase("OutletInRoute")</strong>: ' + routeInfo.OutletInRoute + 
                       '<br/><strong>@Utility.Phrase("OutletInSubRoute")</strong>: ' + routeInfo.OutletInSubRoute + 
                       '<br/><strong>------------------------@Utility.Phrase("IsMCP")Đúng tuyến</strong>' +
                       '<br/><strong>@Utility.Phrase("OutletVisited")</strong>: ' + routeInfo.OutletVisited + 
                       '<br/><strong>@Utility.Phrase("OutletHasOrder")</strong>: ' + routeInfo.OutletHasOrder +
                       '<br/><strong>@Utility.Phrase("OrderCount")</strong>: ' + routeInfo.OrderCount +
                       '<br/><strong>@Utility.Phrase("TotalSKU")</strong>: ' + routeInfo.TotalSKU +
                       '<br/><strong>@Utility.Phrase("LPPC")</strong>: ' + routeInfo.LPPC +
                       '<br/><strong>@Utility.Phrase("TotalAmount")</strong>: ' + routeInfo.TotalAmount +
                       '<br/><strong>@Utility.Phrase("TotalQuantity")</strong>: ' + routeInfo.TotalQuantity +
                       '<br/><strong>------------------------@Utility.Phrase("NotMCP")</strong>' +
                       '<br/><strong>@Utility.Phrase("OutletVisited")</strong>: ' + routeInfo.OutletVisited + 
                       '<br/><strong>@Utility.Phrase("OutletHasOrder")</strong>: ' + routeInfo.OutletHasOrder +
                       '<br/><strong>@Utility.Phrase("OrderCount")</strong>: ' + routeInfo.OrderCount +
                       '<br/><strong>@Utility.Phrase("TotalSKU")</strong>: ' + routeInfo.TotalSKU +
                       '<br/><strong>@Utility.Phrase("LPPC")</strong>: ' + routeInfo.LPPC +
                       '<br/><strong>@Utility.Phrase("TotalAmount")</strong>: ' + routeInfo.TotalAmount +
                       '<br/><strong>@Utility.Phrase("TotalQuantity")</strong>: ' + routeInfo.TotalQuantity +
                       '<br/>';
            return infoHtml;
        }
        
        function GetRoute(routeCD, distributorID, regionID, areaID){
            GetParam();
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/GetRouteByUser', //Your form processing file url
                data: { routeCD: routeCD, distributorID: distributorID, regionID: regionID, areaID: areaID }, //Forms name
                dataType: 'json',
                success: function (data) {
                    if(data != null)
                    {
                        //ClearMap();
                        mapData.listRouteRender = mapData.listRouteRender.concat(data.html);
                        RenderRouteSelectedByUser();
                    }
                }
            });
        }

        function RenderRouteSelectedByUser(){
            if(mapData.listRouteRender != null)
            {
                var n = mapData.listRouteRender.length;
                for (var i = 0; i < n; i++) {
                    //WriteLog('RenderRouteSelectedByUser ' + mapData.listRouteRender[i].RouteID + ' ' + mapData.listRouteRender[i].DistributorID.toString());
                    RenderOutletByRoute(mapData.listRouteRender[i].RouteID, mapData.listRouteRender[i].DistributorID);
                }
                UpdateMap();
            }
        }
        //-----------------END Route Render-----------------//

        //-----------------Salesman Render-----------------//
        function RenderSalesmanMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                RenderMarker([data[i].SMLatitude, data[i].SMLongitude], (i + 1).toString(), data[i].SMTimeStart + ' - ' + data[i].SMTimeEnd, routeInfo.SalesmanID + ' - ' + routeInfo.SalesmanName, 'SM', mapData.LayerMarkerSM, null);
                latlngs.push([data[i].SMLatitude, data[i].SMLongitude]);
            }

            //Render Route
            RenderPolyline(latlngs, '', '', 'black', mapData.LayerLineSM);

            //Set View
            MapPanToAndZoom([data[n-1].SMLatitude, data[n-1].SMLongitude], 16);
        }
        //-----------------END Salesman Render-----------------//

        //-----------------SaleSup Render-----------------//
        function RenderSaleSupMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                RenderMarker([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart], (i + 1).toString(), data[i].SUPTimeStart + ' - ' + data[i].SUPTimeEnd, routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName, 'SS', mapData.LayerMarkerSS, null);
                latlngs.push([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart]);
            }

            //Render Route
            RenderPolyline(latlngs, '', '', 'green', mapData.LayerLineSS);
        }
        //-----------------END SaleSup Render-----------------//

        //-----------------ASM Render-----------------//
        function RenderASMMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                RenderMarker([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart], (i + 1).toString(), data[i].ASMTimeStart + ' - ' + data[i].ASMTimeEnd, routeInfo.ASMID + ' - ' + routeInfo.ASMName, 'ASM', mapData.LayerMarkerASM, null);
                latlngs.push([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart]);
            }

            //Render Route
            RenderPolyline(latlngs, '', '', 'yellow', mapData.LayerLineASM);
        }
        //-----------------END ASM Render-----------------//
        
        function LoadSalesman(){
            GetParam();
            $.ajax({
                url: '@Url.Action("LoadSalesman", "Tracking")',
                type: "post",
                data: {DistributorID : distributorIDSelected, strVisitDate: strVisitDate},
                success: function (data) {
                    if (data != null) {
                        $('#checkBoxSM').html(data.html);
                        ToggleListSM();
                    }
                    else {
                        alert('Không hợp lệ');
                    }
                },
                error: function () {
                }
            });
        };

        function ToggleListSM(){
            if(typeof listSM === "undefined")
                return false;

            if(checkAll.GetChecked())
            {
                listSM.SelectAll();
            }
            else
            {
                listSM.UnselectAll();
            }
        };

        //-----------------SalesmanLastLocation Render-----------------//
        function GetSalesmanLastLocation() {
            //GetParam();            
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/RenderListSMLastLocation', //Your form processing file url
                data: { strSMSelected: listSMSelected, distributorID: distributorIDSelected, salesSupID : salesupIDSelected, strVisitDate : strVisitDate }, //Forms name
                dataType: 'json',
                success: function (data) {
                    //Clear data and layer
                    mapData.listSMLastLocationInfo = [];
                    mapData.LayerMarkerSMLastLocation.clearLayers();
                    
                    MapShowHideLayer(mapData.LayerMarkerSMLastLocation, false, true);

                    mapData.listSMLastLocationInfo = mapData.listSMLastLocationInfo.concat(data.html);
                    RenderSalesmanLastLocation(data.html);
                }
            });
        }

        function RenderSalesmanLastLocation(data) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var lat = 0;
            var lng = 0;

            for (var i = 0; i < n; i++) {
                var label = data[i].SalesmanID + ' - ' + data[i].SalesmanName;
                if(data[i].ASMWW == 1 || data[i].SUPWW == 1)
                {
                    label += ' (WW)';
                }

                var m = RenderMarker([data[i].Latitude, data[i].Longtitude], '', data[i].SalesmanID + ' - ' + data[i].SalesmanName, StrSalesmanLastLocationPopup(data[i]), 'SM', mapData.LayerMarkerSMLastLocation, null, true);
                //mapData.markers.addLayer(m);

                if(data[i].Latitude != 0)
                {
                    lat = data[i].Latitude;
                    lng = data[i].Longtitude;
                }
            }
            MapShowHideLayer(mapData.LayerMarkerSMLastLocation, true, true);

            MapPanToAndZoom([lat, lng], 16);
        }

        function StrSalesmanLastLocationPopup(data){
            infoHtml = '<h3>@Utility.Phrase("Salesman"): ' + data.SalesmanID + ' - ' + data.SalesmanName + '</h3>';
            infoHtml += '<strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID  + ' - ' + data.RouteID ; 
            infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName ; 

            if(data.SUPWW == 1)
            {
                infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName + ' (WW)' ; 
            }
            else
            {
                infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName ; 
            }

            if(data.ASMWW == 1)
            {
                infoHtml += '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName + ' (WW)' ; 
            }
            else
            {
                infoHtml += '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName ; 
            }
            
            infoHtml += '<br/><strong>------------------------</strong>' ;
            infoHtml += '<br/><strong>@Utility.Phrase("VisitTime")</strong>: ' + data.VisitTime ; 
            infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.Latitude ;
            infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.Longtitude ;
            infoHtml += '<br/><strong>@Utility.Phrase("OutletLastVisit")</strong>: ' + data.OutletID + ' - ' + data.OutletName ; 
            infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.Distance ;
            infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="RenderOutletByRoute(\''+ data.RouteID +'\',\''+ data.DistributorID +'\',\'\',\'\');" />' ; 
            infoHtml += '<br/>';
            return infoHtml;
        }
        //-----------------END SalesmanLastLocation Render-----------------//

        //-----------------SaleSupLastLocation Render-----------------//
        function GetSaleSupLastLocation() {
            //GetParam();
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/RenderListSSLastLocation', //Your form processing file url
                data: { regionID: regionIDSelected, areaID: areaIDSelected, salesupID: salesupIDSelected, distributorID : distributorIDSelected, strVisitDate : strVisitDate }, //Forms name
                dataType: 'json',
                success: function (data) {
                    //Clear data and layer
                    mapData.listSSLastLocationInfo = [];
                    mapData.LayerMarkerSSLastLocation.clearLayers();

                    MapShowHideLayer(mapData.LayerMarkerSSLastLocation, false, true);

                    mapData.listSSLastLocationInfo = mapData.listSSLastLocationInfo.concat(data.html);
                    RenderSaleSupLastLocation(data.html);
                }
            });
        }

        function RenderSaleSupLastLocation(data) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var lat = 0;
            var lng = 0;

            for (var i = 0; i < n; i++) {
                var label = data[i].SaleSupID + ' - ' + data[i].SaleSupName;
                if(data[i].WW == 1)
                {
                    label += ' (WW)';
                }

                var m = RenderMarker([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart], '', label, StrSaleSupLastLocationPopup(data[i]), 'SS', mapData.LayerMarkerSSLastLocation, null, true);
                //mapData.markers.addLayer(m);

                if(data[i].SUPLatitudeStart != 0)
                {
                    lat = data[i].SUPLatitudeStart;
                    lng = data[i].SUPLongtitudeStart;
                }
            }
            MapShowHideLayer(mapData.LayerMarkerSSLastLocation, true, true);

            MapPanToAndZoom([lat, lng], 16);
        }

        function StrSaleSupLastLocationPopup(data){
            infoHtml = '<h3>@Utility.Phrase("SaleSup"): ' + data.SaleSupID + ' - ' + data.SaleSupName + '</h3>' +
                       '<strong>@Utility.Phrase("Area")</strong>: ' + data.AreaID + ' - ' + data.AreaName + 
                       '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;
                       
            if(data.WW == 1)
            {
                infoHtml += '<br/><strong>@Utility.Phrase("WWInfo"): </strong>';
                infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName;
                infoHtml += '<br/><strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteName;
                infoHtml += '<br/><strong>@Utility.Phrase("Salesman")</strong>: ' + data.SalesmanID + ' - ' + data.SalesmanName;
                infoHtml += '<br/><strong>@Utility.Phrase("Time")</strong>: ' + data.SUPTimeStart ; 
                infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.SUPLatitudeStart ;
                infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.SUPLongtitudeStart ;
                infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.SUPDistance;    
                infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="$(\'#MarkerSS\').attr(\'checked\', \'checked\'); $(\'#LineSS\').attr(\'checked\', \'checked\'); RenderOutletByRoute(\''+ data.RouteID +'\',\''+ data.DistributorID +'\',\'\',\'\');" /><input type="button" value="@Utility.Phrase("ViewSalesman")" onclick="SSPopupClick(\''+ data.SaleSupID +'\');" />' ;             
            }

            infoHtml += '<br/>';
            return infoHtml;
        }
        //-----------------END SaleSupLastLocation Render-----------------//

        //-----------------ASMLastLocation Render-----------------//
        function GetASMLastLocation() {
            //GetParam();
            $.ajax({ //ProceASM the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/RenderListASMLastLocation', //Your form proceASMing file url
                data: { regionID: regionIDSelected, areaID : areaIDSelected, strVisitDate : strVisitDate }, //Forms name
                dataType: 'json',
                success: function (data) {
                    //Clear data and layer
                    mapData.listASMLastLocationInfo = [];
                    mapData.LayerMarkerASMLastLocation.clearLayers();
                    MapShowHideLayer(mapData.LayerMarkerASMLastLocation, false, true);

                    mapData.listASMLastLocationInfo = mapData.listASMLastLocationInfo.concat(data.html);
                    RenderASMLastLocation(data.html);
                }
            });
        }

        function RenderASMLastLocation(data) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;
            var lat = 0;
            var lng = 0;

            for (var i = 0; i < n; i++) {
                var label = data[i].ASMID + ' - ' + data[i].ASMName;
                if(data[i].WW == 1)
                {
                    label += ' (WW)';
                }

                var m = RenderMarker([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart], '', label, StrASMLastLocationPopup(data[i]), 'ASM', mapData.LayerMarkerASMLastLocation, null, true);
                //mapData.markers.addLayer(m);

                if(data[i].ASMLatitudeStart != 0)
                {
                    lat = data[i].ASMLatitudeStart;
                    lng = data[i].ASMLongtitudeStart;
                }
            }
            MapShowHideLayer(mapData.LayerMarkerASMLastLocation, true, true);

            MapPanToAndZoom([lat, lng], 16);
        }

        function StrASMLastLocationPopup(data){
            infoHtml = '<h3>@Utility.Phrase("ASM"): ' + data.ASMID + ' - ' + data.ASMName + '</h3>' +
                       '<strong>@Utility.Phrase("Area")</strong>: ' + data.AreaID + ' - ' + data.AreaName;

            if(data.WW == 1)
            {
                infoHtml += '<br/><strong>@Utility.Phrase("WWInfo"): </strong>';
                infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SalesSupID + ' - ' + data.SalesSupName;
                infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName;
                infoHtml += '<br/><strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteName;
                infoHtml += '<br/><strong>@Utility.Phrase("Salesman")</strong>: ' + data.SalesmanID + ' - ' + data.SalesmanName;
                infoHtml += '<br/><strong>@Utility.Phrase("Time")</strong>: ' + data.ASMTimeStart ; 
                infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.ASMLatitudeStart ;
                infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.ASMLongtitudeStart ;
                infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.ASMDistance;         
                infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="$(\'#MarkerASM\').attr(\'checked\', \'checked\'); $(\'#LineASM\').attr(\'checked\', \'checked\'); RenderOutletByRoute(\''+ data.RouteID +'\',\''+ data.DistributorID +'\',\'\',\'\');" /><input type="button" value="@Utility.Phrase("ViewSaleSup")" onclick="ASMPopupClick(\''+ data.AreaID +'\');" />' ;        
            }

            infoHtml += '<br/>';
            return infoHtml;
        }
        //-----------------END ASMLastLocation Render-----------------//

        function ASMPopupClick(areaID)
        {
            mapData.LatLongBounds = [];
            areaIDSelected = areaID;
            GetSaleSupLastLocation();
        }

        function SSPopupClick(ssID)
        {
            mapData.LatLongBounds = [];
            salesupIDSelected = ssID;
            GetSalesmanLastLocation();            
        }

        function GetParam(){
            strVisitDate = $('input[name="strFromDate"]').val();

            listSMSelected = '';
            if(typeof listSM != "undefined")
            {
                var a = listSM.GetSelectedValues();
                var n = a.length;
                for (var i = 0; i < n; i++) {
                    listSMSelected += a[i] + ',';
                }
            }

            distributorIDSelected = DistributorID.GetValue() == null ? 0 : DistributorID.GetValue();
            regionIDSelected = RegionID.GetValue() == null ? '' : RegionID.GetValue();
            areaIDSelected = AreaID.GetValue() == null ? '' : AreaID.GetValue();
            salesupIDSelected = SalesSupID.GetValue() == null ? '' : SalesSupID.GetValue();
        }

        function ViewInfoSelected(){
            ClearMap();
            GetParam();
            if(distributorIDSelected != 0)
            {
                GetSaleSupLastLocation();
                GetSalesmanLastLocation();
            }
            else if(salesupIDSelected != '')
            {
                GetSaleSupLastLocation();
                GetSalesmanLastLocation();
            }            
            else if(areaIDSelected != '')
            {
                GetSaleSupLastLocation();
                GetASMLastLocation();
            }
            else if(regionIDSelected != '')
            {
                GetASMLastLocation();
            }
        }

        function Back(){
            window.location = '@Url.Action("Index", "Home")';
        }
        
        $(".dateInput").datepicker({
            dateFormat: 'dd-mm-yy'
        })
        .change(function (){
        });

        $('.number').priceFormat({
            prefix: '',
            centsSeparator: '.',
            thousandsSeparator: ',',
            centsLimit: 0,
        });
        $('.number').css("text-align", "right"); 

        $(document).ajaxStart(function () {
            $("#loading").show();
        });
        $(document).ajaxStop(function () {
            $("#loading").hide();
        });
        $(document).ajaxError(function () {
            //alert("ajax có vấn đề");
        });
        </script>
    </div>
    </form>
</body>
</html>
