@using DevExpress.Web.Mvc.UI;
@using DevExpress.Web.Mvc;
@using System.Web.UI.WebControls;
@{
    Layout = "";
}
<html>
<head>
    <title>Leaflet Marker Label Example</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.4/leaflet.css" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.iconlabel.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.label.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.js")"></script>
    <!-- Leaflet MiniMap Plugins -->
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3.2&sensor=true"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet-google.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/jquery-1.9.1.min.js")"></script>
    <!-- Leaflet Element Label Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.iconlabel.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/BaseMarkerMethods.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Marker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/CircleMarker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Path.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Map.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/FeatureGroup.Label.js")"></script>
    <!-- ### Leaflet Element Label Plugins -->
    <!-- Leaflet MarkerCluster Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.Default.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.markercluster-src.js")"></script>
    <!-- ### Leaflet MarkerCluster Plugins -->
    <!-- Leaflet Awesome Markers Plugins -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.0.0/css/font-awesome.css" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.awesome-markers.css")"/>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.awesome-markers.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!--DATA TEMP-->
    <script type="text/javascript" src="@Url.Content("~/MapTest/mines.js")"></script>
    <!-- Leaflet MiniMap Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Control.MiniMap.css")" />
    <script  type="text/javascript"src="@Url.Content("~/MapTest/Control.MiniMap.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!-- Leaflet Routing Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.OSRM.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Line.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Itinerary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Plan.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Control.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/Control.Geocoder.js")"></script>
    <!-- ### Leaflet Routing Plugins -->
    <!-- Leaflet SideBar Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.js")"></script>
    <!-- ### Leaflet SideBar Plugins -->
    <!-- Leaflet PolyLineText Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolyLineText/leaflet.textpath.js")"></script>
    <!-- ### Leaflet PolyLineText Plugins -->
    <style>
        body
        {
            padding: 0;
            margin: 0;
        }
        html, body, #map
        {
            height: 100%;
        }
        .placeMarks-label
        {
            -moz-box-shadow: none;
            -webkit-box-shadow: none;
            box-shadow: none;
            color: #fff;
            position: relative;
        }
        .alignleft
        {
            float: left;
        }
        .alignright
        {
            float: right;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="map">
        </div>
        <div id="sidebar-left">
            <h1>
                Lọc dữ liệu</h1>
            <div id="log">
            </div>
            <table>
                <tr>
                    <td>
                        Outlet :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerOutletMCP" id="MarkerOutletMCP" checked="checked"
                            onchange="UpdateMap();" />Đúng tuyến
                        <input type="checkbox" name="LineOutlet" id="LineOutlet" checked="checked" onchange="UpdateMap();" />Line
                        <input type="checkbox" name="MarkerOutlet" id="MarkerOutlet" checked="checked" onchange="UpdateMap();" />Trái
                        tuyến
                    </td>
                </tr>
                <tr>
                    <td>
                        Saleman :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSM" id="MarkerSM" checked="checked" onchange="UpdateMap();" />Vị
                        trí
                        <input type="checkbox" name="LineSM" id="LineSM" checked="checked" onchange="UpdateMap();" />Line
                    </td>
                </tr>
                <tr>
                    <td>
                        SaleSup :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSS" id="MarkerSS" checked="checked" onchange="UpdateMap();" />Vị
                        trí
                        <input type="checkbox" name="LineSS" id="LineSS" checked="checked" onchange="UpdateMap();" />Line
                    </td>
                </tr>
                <tr>
                    <td>
d                        ASM :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerASM" id="MarkerASM" checked="checked" onchange="UpdateMap();" />Vị
                        trí
                        <input type="checkbox" name="LineASM" id="LineASM" checked="checked" onchange="UpdateMap();" />Line
                    </td>
                </tr>
            </table>
            <br />
            <input type="button" value="@Utility.Phrase("View")" onclick="GetRoute('', 0, '', '');" />
            <input type="button" value="Cập nhật" onclick="UpdateMap();" />
        </div>
        <div id="sidebar-right">
            <h1>
                right sidebar</h1>
        </div>
    </div>
    <script type='text/javascript'>
        ////DATA USE IN MAP
        var strVisitDate = '2014-04-17';
        var mapData = {};
        

        mapData.listRouteRender = [];
        mapData.listOutletInfo = [];
        mapData.listRouteInfo = [];
        mapData.LayerMarkerOutlet = L.layerGroup();
        mapData.LayerMarkerOutletMCP = L.layerGroup();
        mapData.LayerLineOutlet = L.layerGroup();

        mapData.LayerLineOutletSMSSASM = L.layerGroup();
        mapData.LayerMarkerOutletSMSSASM = L.layerGroup();

        mapData.LayerMarkerSM = L.layerGroup();
        mapData.LayerLineSM = L.layerGroup();
        mapData.listSMInfo = [];

        mapData.LayerMarkerSS = L.layerGroup();
        mapData.LayerLineSS = L.layerGroup();
        mapData.listSSInfo = [];

        mapData.LayerMarkerASM = L.layerGroup();
        mapData.LayerLineASM = L.layerGroup();
        mapData.listASMInfo = [];
        ////##DATA USE IN MAP

        ////INIT GOOGLE MAP
        var map = new L.Map('map', {
            center: [16, 106],
            zoom: 7,
            minZoom: 0,
            maxZoom: 23,
        });
        var googleLayer = new L.Google('ROADMAP');
        map.addLayer(googleLayer);
        ////##INIT GOOGLE MAP

        ////MarkerCluster
        mapData.markers = new L.MarkerClusterGroup({ spiderfyOnMaxZoom: true, showCoverageOnHover: false, zoomToBoundsOnClick: true, disableClusteringAtZoom: 16 });
        ////##MarkerCluster

        ////MINI MAP
        //Plugin magic goes here! Note that you cannot use the same layer object again, as that will confuse the two map controls
		//var osm2 = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: 13, attribution: osmAttrib });
        var osm2 = new L.Google('ROADMAP');

		var rect1 = {color: "#ff1100", weight: 3};
		var rect2 = {color: "#0000AA", weight: 1, opacity:0, fillOpacity:0};
		var miniMap = new L.Control.MiniMap(
            osm2, 
            { 
                toggleDisplay: true
                , aimingRectOptions : rect1
                , shadowRectOptions: rect2
                , width: 250
			    , height: 250
            }
        ).addTo(map);
        ////##MINI MAP

        ////Sidebar
        var leftSidebar = L.control.sidebar('sidebar-left', {
            position: 'left'
        });
        map.addControl(leftSidebar);

        var rightSidebar = L.control.sidebar('sidebar-right', {
            position: 'right'
        });
        map.addControl(rightSidebar);
        leftSidebar.show();
        rightSidebar.hide();
        ////##Sidebar

        //document.onkeypress = checkKey;


         ////Map Utility
        function checkKey(e) {
            e = e || window.event;
            //WriteLog(e.keyCode);
        }

        var placeMarker_double = L.Icon.Label.extend({
            options: {
                iconUrl: '',
                shadowUrl: null,
                //iconSize: new L.Point(36, 36),
                iconAnchor: new L.Point(0, 0),
                //labelAnchor: new L.Point(-5, -1),
                wrapperAnchor: new L.Point(12, 13),
                labelClassName: 'placeMarks-label'
            }
        });

        function labelTextAnchor(text)
        {
            var n = text.toString().length;
            if(n == 1)
            {
                return 0;
            }
            else if(n == 2)
            {
                return -3;
            }
            else if(n == 3)
            {
                return -5;
            }
            else
            {
                return 0;
            }
        }

        function RandomColor() {
            colors = ['#000000', '#00008B', '#0000FF', '#006400', '#008000', '#008B8B', '#00DED1', '#1E90FF', '#228B22', '#2F4F4F', '#483D8B', '#4B0082', '#556B2F', '#5F9EA0', '#6495ED', '#696969', '#7FFF00', '#8A2BE2', '#8B0000', '#8B008B', '#9400D3', '#9932CC', '#A52A2A', '#B22222', '#BDB76B', '#CD5C5C', '#D2691E', '#DC143C', '#DEB887', '#E9967A', '#FF7F50', '#FF8C00']
            return colors[Math.floor(Math.random()*colors.length)];
        }

        function arrayPush(arA, arB)
        {
            if(arB != null)
            {
                var n = arB.length;
                for (var i = 0; i < n; i++) {
                    arB.push(arB[i]);
                }
            }
        }

        function WriteLog(log)
        {
            $('#log').html($('#log').html() + '<br/>' + log);
        }

        function Popup(latlng, content)
        {
            var popup = new L.Popup();
            popup.setLatLng(latlng);
            popup.setContent(content);
            map.openPopup(popup);
        }

        function MapPanToAndZoom(latlng, zoom)
        {
            map.setView(latlng, zoom);
        }
        
        function RenderPolyline(latlngs, strLabel, strInfo, color, layer)
        {
            polylineMCP = L.polyline(latlngs, {color: color})
                .bindLabel(strLabel, { noHide: true })
                .bindPopup(strInfo);

//            var polylineMCP = L.polyline(latlngs, {
//                weight: 4,
//                color: color,
//                dashArray: '2, 2'
//            })
//            .bindLabel(strLabel, { noHide: true })
//            .bindPopup(strInfo);

//            polylineMCP.setText('>        ', 
//                            {
//                                repeat: true,
//                                offset: 8,
//                                attributes: {
//                                    'font-weight': 'bold',
//                                    'font-size': '24'
//                                    }
//                            });
            
            if(layer != null)
            {
                layer.addLayer(polylineMCP);
                //mapData.LayerLineOutletSMSSASM.addLayer(polylineMCP);
            }
//            mapData.LayerLineOutletSMSSASM.addTo(map);
        }

        function UpdateMap()
        {
            mapData.MarkerOutletMCP = $("#MarkerOutletMCP").is(':checked');
            mapData.LineOutlet = $("#LineOutlet").is(':checked');
            mapData.MarkerSM = $("#MarkerSM").is(':checked');
            mapData.LineSM = $("#LineSM").is(':checked');
            mapData.MarkerSS = $("#MarkerSS").is(':checked');
            mapData.LineSS = $("#LineSS").is(':checked');
            mapData.MarkerASM = $("#MarkerASM").is(':checked');
            mapData.LineASM = $("#LineASM").is(':checked');
            mapData.MarkerOutlet = $("#MarkerOutlet").is(':checked');

            MapShowHideLayer(mapData.LayerMarkerOutletMCP, mapData.MarkerOutletMCP, true);
            MapShowHideLayer(mapData.LayerMarkerOutlet, mapData.MarkerOutlet, true);
            MapShowHideLayer(mapData.LayerLineOutlet, mapData.LineOutlet, false);
            MapShowHideLayer(mapData.LayerMarkerSM, mapData.MarkerSM, true);
            MapShowHideLayer(mapData.LayerLineSM, mapData.LineSM, false);
            MapShowHideLayer(mapData.LayerMarkerSS, mapData.MarkerSS, true);
            MapShowHideLayer(mapData.LayerLineSS, mapData.LineSS, false);
            MapShowHideLayer(mapData.LayerMarkerASM, mapData.MarkerASM, true);
            MapShowHideLayer(mapData.LayerLineASM, mapData.LineASM, false);          
        }

        function MapShowHideLayer(layer, show, isMarkerLayer)
        {
            if(show)
            {
                if(map.hasLayer(layer) == false)
                { 
                    map.addLayer(layer);
                    if(isMarkerLayer)
                    {
                        mapData.markers.addLayer(layer);
                    }
                }
            }
            else
            {
                if(map.hasLayer(layer) == true)
                {
                    map.removeLayer(layer);
                }
            }
        }

        function ClearMap()
        {
            mapData.listRouteRender = [];
            mapData.listOutletInfo = [];
            mapData.listRouteInfo = [];
            mapData.LayerMarkerOutlet.clearLayers();
            mapData.LayerMarkerOutletMCP.clearLayers();
            mapData.LayerLineOutlet.clearLayers();

            mapData.LayerLineOutletSMSSASM.clearLayers();
            mapData.LayerMarkerOutletSMSSASM.clearLayers();

            mapData.LayerMarkerSM.clearLayers();
            mapData.LayerLineSM.clearLayers();
            mapData.listSMInfo = [];

            mapData.LayerMarkerSS.clearLayers();
            mapData.LayerLineSS.clearLayers();
            mapData.listSSInfo = [];

            mapData.LayerMarkerASM.clearLayers();
            mapData.LayerLineASM.clearLayers();
            mapData.listASMInfo = [];

            mapData.markers.clearLayers();

            map.removeLayer(mapData.LayerMarkerOutletMCP);
            map.removeLayer(mapData.LayerLineOutlet);
            map.removeLayer(mapData.LayerLineOutletSMSSASM);
            map.removeLayer(mapData.LayerMarkerOutletSMSSASM);
            map.removeLayer(mapData.LayerLineSM);
            map.removeLayer(mapData.LayerMarkerSS);
            map.removeLayer(mapData.LayerLineSS);
            map.removeLayer(mapData.LayerMarkerASM);
            map.removeLayer(mapData.LayerLineASM);
        }
        ////##Map Utility

        //-----------------Outlet Render-----------------//
        function RenderOutlet(routeCD, distributorID) {
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/GetOutletInRoute', //Your form processing file url
                data: { routeCD: routeCD, distributorID: distributorID, strVisitDate : strVisitDate }, //Forms name
                dataType: 'json',
                success: function (data) {
                    //insert vào list outlet để sử dụng cho Popup Info
                    mapData.listOutletInfo = mapData.listOutletInfo.concat(data.html);

                    mapData.listRouteInfo.push(data.route);

                    mapData.listSMInfo = mapData.listSMInfo.concat(data.listSMVisit);
                    mapData.listSSInfo = mapData.listSSInfo.concat(data.listSSVisit);
                    mapData.listASMInfo = mapData.listASMInfo.concat(data.listASMVisit);

                    //Render data của Route này
                    RenderOutletMarker(data.html, data.route);

                    RenderSalesmanMarker(data.listSMVisit, data.route);
                    RenderSaleSupMarker(data.listSSVisit, data.route);
                    RenderASMMarker(data.listASMVisit, data.route);
                }
            });
        }        

        function RenderOutletMarker(data, routeInfo) {
            var markerList = [];
            var latlngs = [];
            var n = data.length;
            for (var i = 0; i < n; i++) {
                var marker = L.marker([data[i].Latitude, data[i].Longtitude], {
                    icon: new placeMarker_double({
                        labelText: data[i].VisitOrder
                        , labelAnchor: new L.Point(labelTextAnchor(data[i].VisitOrder), -1)
                        , iconUrl: '../Content/THP/markers/' + data[i].MarkerColor + '.png'
                    })
                })
                .bindLabel(data[i].OutletID + ' - ' + data[i].OutletName, { noHide: false })
                .on('click', OutletClick);

                markerList.push(marker);
                
                if(data[i].ISMCP == 1)
                {
                    latlngs.push([data[i].Latitude, data[i].Longtitude]);
                    mapData.LayerMarkerOutletMCP.addLayer(marker);
                }
                else
                {
                    mapData.LayerMarkerOutlet.addLayer(marker);
                }
            }

            //Render Route
            RenderPolyline(latlngs, routeInfo.RouteID + ' - ' + routeInfo.RouteName, RenderRouteInfoPopup(routeInfo), 'black', mapData.LayerLineOutlet);//RandomColor()
//            map.addLayer(mapData.LayerMarkerOutletMCP);
//            map.addLayer(mapData.LayerMarkerOutlet);
            //map.addLayer(mapData.markers);

            //mapData.LayerMarkerOutletMCP.addTo(map);
        }

        function OutletClick(e) {
            PopupOutlet(e.latlng);
        }

        function PopupOutlet(curPos)
        {
            var n = mapData.listOutletInfo.length;
            for (var i = 0; i < n; i++) {
                if(mapData.listOutletInfo[i].Latitude == curPos.lat && mapData.listOutletInfo[i].Longtitude == curPos.lng)
                {
                    Popup([mapData.listOutletInfo[i].Latitude, mapData.listOutletInfo[i].Longtitude], RenderOutletInfoPopup(mapData.listOutletInfo[i]));
                    break;
                }
            }
        }
        
        function RenderOutletInfoPopup(data)
        {
            mapData.LayerLineOutletSMSSASM.clearLayers();
            mapData.LayerMarkerOutletSMSSASM.clearLayers();
            map.removeLayer(mapData.LayerLineOutletSMSSASM);
            map.removeLayer(mapData.LayerMarkerOutletSMSSASM);

            map.removeLayer(mapData.LayerMarkerSM);
            map.removeLayer(mapData.LayerMarkerSS);
            map.removeLayer(mapData.LayerMarkerASM);

            var imagesCustomerUrl = '';
            data.ImageFile = 'http://eroute.thp.com.vn/SFA/SalesOrder/images/2014_05_08/1002330_SM00003512_0000520630_1399517845925.jpg';
            if(data.ImageFile != null && data.ImageFile != '')
            {
                imagesCustomerUrl = '<img src="' + data.ImageFile + '" width="100px" />';
            }
            infoHtml = 
                '<div style="width: 300px;" >' + 
                '<h3>' + data.OutletID + ' - ' + data.OutletName + '</h3>' +
                '<p><span class="alignleft">' + imagesCustomerUrl + '</span><span class="alignright">' +
                '<br/><strong>Người liên hệ</strong>: ' + data.OutletName +
                '<br/><strong>Địa chỉ</strong>: ' + data.Address +
                '<br/><strong>Phone</strong>: ' + data.Phone +
                '<br/><strong>Latitude</strong>: ' + data.Latitude +
                '<br/><strong>Longitude</strong>: ' + data.Longtitude +
                '</span></p>' +
                '<br clear="all"/>';               

                ////RENDER SALESMAN VISIT
                if(data.HasVisit == 1)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">Thông tin đơn hàng</h3>' +
                                  '<strong>Mã NVBH</strong>: ' + data.SalesmanID +
                                  '<br/><strong>Tên NVBH</strong>: ' + data.SalesmanName +
                                  '<br/><strong>Ngày</strong>: ' + data.VisitDate;
                    var length = data.ListSMVisit.length;
                    element = null;
                    for (var i = 0; i < length; i++) {
                        element = data.ListSMVisit[i];
                        // Do something with element i.
                        infoHtml += '<br/>------------------------';
                        if (element.HasOrder == 1) {
                            infoHtml += '<br/>&nbsp;&nbsp;<strong>Đơn hàng số</strong>: ' + element.DropSize +
                                        '<br/>&nbsp;&nbsp;<strong>Sản lượng (thùng/két)</strong>: ' + element.DropSize +
                                        '<br/>&nbsp;&nbsp;<strong>Giá trị đơn hàng (VND)</strong>: ' + element.TotalAmt +
                                        '<br/>&nbsp;&nbsp;<strong>SKU</strong>: ' + element.TotalSKU +
                                        '<br/>&nbsp;&nbsp;<strong>Giờ vào</strong>: ' + element.SMTimeStart +
                                        '<br/>&nbsp;&nbsp;<strong>Giờ ra</strong>: ' + element.SMTimeEnd +
                                        '<br/>&nbsp;&nbsp;<strong>Khoảng cách đến cửa hàng(m)</strong>: ' + element.SMDistance;
                        }
                        else if (element.HasOrder == 0) {
                            infoHtml += '<br/>&nbsp;&nbsp;<strong>Đơn hàng số</strong>: không có' +
                                        '<br/>&nbsp;&nbsp;<strong>Lý do</strong>: ' + element.Reason +
                                        '<br/>&nbsp;&nbsp;<strong>Giờ vào</strong>: ' + element.SMTimeStart +
                                        '<br/>&nbsp;&nbsp;<strong>Giờ ra</strong>: ' + element.SMTimeEnd +
                                        '<br/>&nbsp;&nbsp;<strong>Khoảng cách đến cửa hàng(m)</strong>: ' + element.SMDistance;
                        }


                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.SMLatitude, element.SMLongitude]);
                        RenderPolyline(latlngs, element.SMDistance + ' m', data.SalesmanName, 'blue', mapData.LayerLineOutletSMSSASM);

                        var marker = L.marker([element.SMLatitude, element.SMLongitude], {
                            icon: new placeMarker_double({
                                iconUrl: '../Content/THP/markers/SM.png'
                            })
                        })
                        .bindLabel(data.SalesmanID + ' - ' + data.SalesmanName, { noHide: false });

                        mapData.LayerMarkerOutletSMSSASM.addLayer(marker);
//                        mapData.LayerMarkerOutletSMSSASM.addTo(map);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER SALESMAN VISIT

                ////RENDER SALESUP VISIT
                var SSVisit = data.ListSSVisit.length;
                if(SSVisit > 0)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">Thông tin Salesup viếng thăm</h3>' +
                                  '<strong>Salesup</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName;
                    element = null;
                    for (var i = 0; i < 1; i++) {
                        element = data.ListSSVisit[i];
                        // Do something with element i.
                        infoHtml += '<br/>&nbsp;&nbsp;<strong>Giờ vào</strong>: ' + element.SUPTimeStart +
                                    '<br/>&nbsp;&nbsp;<strong>Giờ ra</strong>: ' + element.SUPTimeEnd +
                                    '<br/>&nbsp;&nbsp;<strong>Khoảng cách đến cửa hàng(m)</strong>: ' + element.SUPDistance +
                                    '<br/>&nbsp;&nbsp;<strong>Latitude</strong>: ' + element.SUPLatitudeStart +
                                    '<br/>&nbsp;&nbsp;<strong>Longitude</strong>: ' + element.SUPLongtitudeStart;

                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.SUPLatitudeStart, element.SUPLongtitudeStart]);
                        RenderPolyline(latlngs, element.SUPDistance + ' m', data.SaleSupName, 'green', mapData.LayerLineOutletSMSSASM);

                        var marker = L.marker([element.SUPLatitudeStart, element.SUPLongtitudeStart], {
                            icon: new placeMarker_double({
                                iconUrl: '../Content/THP/markers/SS.png'
                            })
                        })
                        .bindLabel(data.SaleSupID + ' - ' + data.SaleSupName, { noHide: false });

                        mapData.LayerMarkerOutletSMSSASM.addLayer(marker);
//                        mapData.LayerMarkerOutletSMSSASM.addTo(map);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER SALESUP VISIT

                ////RENDER ASM VISIT
                var ASMVisit = data.ListASMVisit.length;
                if(ASMVisit > 0)
                {
                    infoHtml += '<p>' +
                                 '<h3 style="color:red;font-weight:bold;">Thông tin ASM viếng thăm</h3>' +
                                  '<strong>ASM</strong>: ' + data.ASMID + ' - ' + data.ASMName;
                    element = null;
                    for (var i = 0; i < 1; i++) {
                        element = data.ListASMVisit[i];
                        // Do something with element i.
                        infoHtml += '<br/>&nbsp;&nbsp;<strong>Giờ vào</strong>: ' + element.ASMTimeStart +
                                    '<br/>&nbsp;&nbsp;<strong>Giờ ra</strong>: ' + element.ASMTimeEnd +
                                    '<br/>&nbsp;&nbsp;<strong>Khoảng cách đến cửa hàng(m)</strong>: ' + element.ASMDistance +
                                    '<br/>&nbsp;&nbsp;<strong>Latitude</strong>: ' + element.ASMLatitudeStart +
                                    '<br/>&nbsp;&nbsp;<strong>Longitude</strong>: ' + element.ASMLongtitudeStart;

                        //PolyLineProcess
                        var latlngs = [];
                        latlngs.push([data.Latitude, data.Longtitude]);
                        latlngs.push([element.ASMLatitudeStart, element.ASMLongtitudeStart]);
                        RenderPolyline(latlngs, element.ASMDistance + ' m', data.ASMName, 'black', mapData.LayerLineOutletSMSSASM);

                        var marker = L.marker([element.ASMLatitudeStart, element.ASMLongtitudeStart], {
                            icon: new placeMarker_double({
                                iconUrl: '../Content/THP/markers/ASM.png'
                            })
                        })
                        .bindLabel(data.ASMID + ' - ' + data.ASMName, { noHide: false });

                        mapData.LayerMarkerOutletSMSSASM.addLayer(marker);
//                        mapData.LayerMarkerOutletSMSSASM.addTo(map);
                    }
                    infoHtml += '</p>';
                }
                ////##RENDER ASM VISIT

            infoHtml += '</div>';
            return infoHtml;
        }
        //-----------------END Outlet Render-----------------//

        //-----------------Route Render-----------------//
        function RenderRouteInfoPopup(routeInfo)
        {
            infoHtml = '<h3>' + routeInfo.RouteID + ' - ' + routeInfo.RouteName + '</h3>' +
                       '<strong>NVBH</strong>: ' + routeInfo.SalesmanID  + ' - ' + routeInfo.SalesmanName + 
                       '<br/><strong>NPP</strong>: ' + routeInfo.DistributorCode + ' - ' + routeInfo.DistributorName + 
                       '<br/><strong>SaleSup</strong>: ' + routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName + 
                       '<br/><strong>ASM</strong>: ' + routeInfo.ASMID + ' - ' + routeInfo.ASMName + 
                       '<br/><strong>Số KH trên tuyến</strong>: ' + routeInfo.OutletInRoute + 
                       '<br/><strong>Số KH phải đi trong ngày</strong>: ' + routeInfo.OutletInSubRoute + 
                       '<br/><strong>------------------------Đúng tuyến</strong>' +
                       '<br/><strong>Số KH đã viếng thăm</strong>: ' + routeInfo.OutletVisited + 
                       '<br/><strong>Số KH có đơn hàng</strong>: ' + routeInfo.OutletHasOrder +
                       '<br/><strong>Số đơn hàng</strong>: ' + routeInfo.OrderCount +
                       '<br/><strong>Tổng SKU</strong>: ' + routeInfo.TotalSKU +
                       '<br/><strong>LPPC</strong>: ' + routeInfo.LPPC +
                       '<br/><strong>Tổng doanh số</strong>: ' + routeInfo.TotalAmount +
                       '<br/><strong>Sản lượng(Két/thùng)</strong>: ' + routeInfo.TotalQuantity +
                       '<br/><strong>------------------------Trái tuyến</strong>' +
                       '<br/><strong>Số KH đã viếng thăm</strong>: ' + routeInfo.OutletVisited + 
                       '<br/><strong>Số KH có đơn hàng</strong>: ' + routeInfo.OutletHasOrder +
                       '<br/><strong>Số đơn hàng</strong>: ' + routeInfo.OrderCount +
                       '<br/><strong>Tổng SKU</strong>: ' + routeInfo.TotalSKU +
                       '<br/><strong>LPPC</strong>: ' + routeInfo.LPPC +
                       '<br/><strong>Tổng doanh số</strong>: ' + routeInfo.TotalAmount +
                       '<br/><strong>Sản lượng(Két/thùng)</strong>: ' + routeInfo.TotalQuantity +
                       '<br/>';
            return infoHtml;
        }

        
        function GetRoute(routeCD, distributorID, regionID, areaID){
            $.ajax({ //Process the form using $.ajax()
                type: 'POST', //Method type
                url: '/MapTest/GetRouteByUser', //Your form processing file url
                data: { routeCD: routeCD, distributorID: distributorID, regionID: regionID, areaID: areaID }, //Forms name
                dataType: 'json',
                success: function (data) {
                    if(data != null)
                    {
                        ClearMap();
                        mapData.listRouteRender = mapData.listRouteRender.concat(data.html);
                        RenderRoute();
                    }
                }
            });
        }

        function RenderRoute(){
            if(mapData.listRouteRender != null)
            {
                var n = mapData.listRouteRender.length;
                for (var i = 0; i < n; i++) {
                    //WriteLog('RenderRoute ' + mapData.listRouteRender[i].RouteID + ' ' + mapData.listRouteRender[i].DistributorID.toString());
                    RenderOutlet(mapData.listRouteRender[i].RouteID, mapData.listRouteRender[i].DistributorID);
                }
                UpdateMap();
            }
        }
        //-----------------END Route Render-----------------//

        //-----------------Salesman Render-----------------//
        function RenderSalesmanMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;

            var markerList = [];
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                var marker = L.marker([data[i].SMLatitude, data[i].SMLongitude], {
                    icon: new placeMarker_double({
                        labelText: i.toString()
                        , labelAnchor: new L.Point(labelTextAnchor(i.toString()), -1)
                        , iconUrl: '../Content/THP/markers/SM.png'
                    })
                })
                .bindLabel(data[i].SMTimeStart + ' - ' + data[i].SMTimeEnd, { noHide: false })
                .bindPopup(routeInfo.SalesmanID + ' - ' + routeInfo.SalesmanName);//RenderOutletInfoPopup(data[i])
                //.on('click', OutletClick);//, {OutletID : data[i].OutletID}

                markerList.push(marker);
                latlngs.push([data[i].SMLatitude, data[i].SMLongitude]);

                mapData.LayerMarkerSM.addLayer(marker);
            }
//            map.addLayer(mapData.LayerMarkerSM);

            //Render Route
            //var polylineMCP = L.polyline(latlngs, {color: 'blue'});
            RenderPolyline(latlngs, '', '', 'blue', mapData.LayerLineSM);
            //mapData.LayerLineSM.addLayer(polylineMCP);
            //mapData.LayerLineSM.addTo(map);

            //Set View
            MapPanToAndZoom([data[n-1].SMLatitude, data[n-1].SMLongitude], 16);
        }
        //-----------------END Salesman Render-----------------//

        //-----------------SaleSup Render-----------------//
        function RenderSaleSupMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;

            var markerList = [];
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                var marker = L.marker([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart], {
                    icon: new placeMarker_double({
                        labelText: i.toString()
                        , labelAnchor: new L.Point(labelTextAnchor(i.toString()), -1)
                        , iconUrl: '../Content/THP/markers/SS.png'
                    })
                })
                .bindLabel(data[i].SUPTimeStart + ' - ' + data[i].SUPTimeEnd, { noHide: false })
                .bindPopup(routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName);//RenderOutletInfoPopup(data[i])
                //.on('click', OutletClick);//, {OutletID : data[i].OutletID}

                markerList.push(marker);
                latlngs.push([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart]);

                mapData.LayerMarkerSS.addLayer(marker);
            }
//            map.addLayer(mapData.LayerMarkerSS);

            //Render Route
            //var polylineMCP = L.polyline(latlngs, {color: 'green'});
            RenderPolyline(latlngs, '', '', 'green', mapData.LayerLineSS);
            //mapData.LayerLineSS.addLayer(polylineMCP);
//            mapData.LayerLineSS.addTo(map);
        }
        //-----------------END SaleSup Render-----------------//

         //-----------------ASM Render-----------------//
        function RenderASMMarker(data, routeInfo) {
            if(data == null)
                return false;
            var n = data.length;
            if(n == 0)
                return false;

            var markerList = [];
            var latlngs = [];

            for (var i = 0; i < n; i++) {
                var marker = L.marker([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart], {
                    icon: new placeMarker_double({
                        labelText: i.toString()
                        , labelAnchor: new L.Point(labelTextAnchor(i.toString()), -1)
                        , iconUrl: '../Content/THP/markers/ASM.png'
                    })
                })
                .bindLabel(data[i].ASMTimeStart + ' - ' + data[i].ASMTimeEnd, { noHide: false })
                .bindPopup(routeInfo.ASMID + ' - ' + routeInfo.ASMName);//RenderOutletInfoPopup(data[i])
                //.on('click', OutletClick);//, {OutletID : data[i].OutletID}

                markerList.push(marker);
                latlngs.push([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart]);

                mapData.LayerMarkerASM.addLayer(marker);
            }
//            map.addLayer(mapData.LayerMarkerASM);

            //Render Route
//            var polylineMCP = L.polyline(latlngs, {color: 'yellow'});
              RenderPolyline(latlngs, '', '', 'yellow', mapData.LayerLineASM);
//            mapData.LayerLineASM.addLayer(polylineMCP);
//            mapData.LayerLineASM.addTo(map);
        }
        //-----------------END ASM Render-----------------//

       
    </script>
</body>
</html>
