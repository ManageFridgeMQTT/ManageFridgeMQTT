@model Hammer.Models.SMAssessmentModel
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabDailyWork";
    settings.HeaderText = Utility.Phrase("eCalendar_tabDailyWork");  //"Công việc hằng ngày";"Công việc hằng ngày";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    //settings.Attributes.CssStyle.Value = "block-theme";
    settings.Styles.Header.CssClass = "block-theme";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table class='border-none no-selected' width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.DailyWorks.Count; i++)
        {
            ViewContext.Writer.Write("<tr>");
            ViewContext.Writer.Write("<td style=\"width:300px;\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].CriteriaID, label =>
                {
                    label.Text =
                       eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.DailyWorks[i].CriteriaID);
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].AssessmentDate).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].CriteriaID).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].AssessmentFor).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].UserID).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].UniqueID).ToHtmlString());
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td style=\"width:100px;\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].CriteriaScore, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (

                Html.DevExpress().SpinEditFor(m => m.DailyWorks[i].CriteriaScore, spin =>
                {
                    spin.Properties.MinValue = 1;
                    spin.Properties.MaxValue = 5;
                    //spin.ShowModelErrors = true;
                    spin.ClientEnabled = !Model.Header.Released;
                    spin.Width = 100;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Pros, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Pros, memo =>
                {
                    memo.ShowModelErrors = true;
                    memo.ClientEnabled = !Model.Header.Released;
                  //  //memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Cons, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");

                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Cons, memo =>
                {
                    memo.ShowModelErrors = true;
                    memo.ClientEnabled = !Model.Header.Released;
                    ////memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Note, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Note, memo =>
                {
                    memo.ShowModelErrors = true;
                    memo.ClientEnabled = !Model.Header.Released;
                    ////memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");

            ViewContext.Writer.Write("</tr>");
        }

        ViewContext.Writer.Write("</table>");
    });
}).GetHtml()
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabTools";
    settings.HeaderText = Utility.Phrase("eCalendar_tabTools");  //"4 công cụ";"4 công cụ";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Styles.Header.CssClass = "block-theme";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table class='border-none no-selected' width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.Tools.Count; i++)
        {
            if (Model.Tools[i].CriteriaID == 5)
            {
            }
            else if (Model.Tools[i].CriteriaID == 6)
            {
            }
            else
            {
                ViewContext.Writer.Write("<tr>");
                ViewContext.Writer.Write("<td style=\"width:300px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].CriteriaID, label =>
                    {
                        label.Text =
                           eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.Tools[i].CriteriaID);
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Tools[i].AssessmentDate).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Tools[i].CriteriaID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Tools[i].AssessmentFor).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Tools[i].UserID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Tools[i].UniqueID).ToHtmlString());
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style=\"width:100px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].CriteriaScore, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (

                    Html.DevExpress().SpinEditFor(m => m.Tools[i].CriteriaScore, spin =>
                    {
                        spin.Properties.MinValue = 1;
                        spin.Properties.MaxValue = 5;
                        spin.ClientEnabled = !Model.Header.Released;
                        spin.Width = 100;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Pros, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Pros, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Cons, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Cons, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Note, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Note, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
            }
        }
        ViewContext.Writer.Write("</table>");
    });

}).GetHtml()
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabSteps";
    settings.HeaderText = Utility.Phrase("eCalendar_tabSteps");  //"9 bước bán hàng";"9 bước bán hàng";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Styles.Header.CssClass = "block-theme";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table  width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.Steps.Count; i++)
        {
            if (Model.Steps[i].CriteriaID != 16)
            {
                ViewContext.Writer.Write("<tr>");
                ViewContext.Writer.Write("<td style=\"width:300px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].CriteriaID, label =>
                    {
                        label.Text =
                           eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.Steps[i].CriteriaID);
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].AssessmentDate).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].CriteriaID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].AssessmentFor).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].UserID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].UniqueID).ToHtmlString());
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style=\"width:100px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].CriteriaScore, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (

                    Html.DevExpress().SpinEditFor(m => m.Steps[i].CriteriaScore, spin =>
                    {
                        spin.Properties.MinValue = 1;
                        spin.Properties.MaxValue = 5;
                        spin.ClientEnabled = !Model.Header.Released;
                        spin.Width = 100;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");



                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Pros, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");

                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Pros, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Cons, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Cons, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Note, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Note, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ClientEnabled = !Model.Header.Released;
                        //memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("</tr>");
            }
        }
        ViewContext.Writer.Write("</table>");
    });
}).GetHtml()
