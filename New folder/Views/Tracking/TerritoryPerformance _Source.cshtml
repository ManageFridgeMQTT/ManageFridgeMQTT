@model HomeVM
@using DevExpress.Web.Mvc.UI;
@using DevExpress.Web.Mvc;
@using System.Web.UI.WebControls;
@{
    Layout = "";
    string textSearch = Utility.StringParse(ViewBag.Search);    
}
<html>
<head>
    <title>@Utility.Phrase("SalesSupervisor_Title")</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.iconlabel.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.label.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.js")"></script>
    <link href="~/Content/THP/leaflet-routing-machine-control.css" rel="stylesheet" />
    <script src="~/Content/Js/leaflet.contextmenu.js"></script>
    <script src="~/Content/Js/leaflet.contextmenu-src.js"></script>
    <link href="~/Content/leaflet.contextmenu.css" rel="stylesheet" />
    @*<script type="text/javascript" src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>    *@
    <!-- Leaflet MiniMap Plugins -->
    @*<script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3.2&sensor=false"></script>*@
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?v=3&amp;sensor=false"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet-google.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    @*<script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>*@
    <script type="text/javascript" src="@Url.Content("~/MapTest/JqueryUI/jquery-1.10.2.js")"></script>
    <!-- Leaflet Element Label Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.iconlabel.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/BaseMarkerMethods.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Marker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/CircleMarker.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Path.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Map.Label.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/FeatureGroup.Label.js")"></script>

    <!-- ### Leaflet Element Label Plugins -->
    <!-- Leaflet MarkerCluster Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/MarkerCluster.Default.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.markercluster-src.js")"></script>
    <!-- ### Leaflet MarkerCluster Plugins -->
    <!-- Leaflet Awesome Markers Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/font-awesome.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/leaflet.awesome-markers.css")"/>
    <script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.awesome-markers.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!--DATA TEMP-->
    <script type="text/javascript" src="@Url.Content("~/MapTest/mines.js")"></script>
    <!-- Leaflet MiniMap Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Control.MiniMap.css")" />
    <script  type="text/javascript"src="@Url.Content("~/MapTest/Control.MiniMap.js")"></script>
    <!-- ### Leaflet MiniMap Plugins -->
    <!-- Leaflet Routing Plugins -->
    @*<link rel="stylesheet" href="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.css")" />*@
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/leaflet-routing-machine.min.js")"></script>
    <script src="~/MapTest/Routing/leaflet-routing-machine.js"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.OSRM.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Line.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Itinerary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Plan.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/L.Routing.Control.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Routing/Control.Geocoder.js")"></script>
    <!-- ### Leaflet Routing Plugins -->
    <!-- Leaflet SideBar Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/SideBar/L.Control.Sidebar.js")"></script>
    <!-- ### Leaflet SideBar Plugins -->
    <!-- Leaflet PolyLineText Plugins -->
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolyLineText/leaflet.textpath.js")"></script>
    <!-- ### Leaflet PolyLineText Plugins -->
    <!-- Leaflet PolylineDecorator Plugins -->
    @*<script type="text/javascript" src="@Url.Content("~/MapTest/leaflet.polylineDecorator.js")"></script>*@
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.LineUtil.PolylineDecorator.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.RotatedMarker.js")")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.Symbol.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/PolylineDecorator/L.PolylineDecorator.js")"></script>
    <!-- ### Leaflet PolylineDecorator Plugins -->
    <!-- Leaflet Measure Distance Plugins -->
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Distance/distance.css")" />
    <link rel="stylesheet" href="@Url.Content("~/MapTest/Distance/leaflet.draw.css")" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/Distance/leaflet.draw.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/MapTest/Distance/Distance.js")"></script>
    <!-- ### Leaflet Measure Distance Plugins -->
    <!-- DateTime Picker -->
    @*<link href="@Url.Content("~/Content/THP/css/jquery-ui-1.8.17.css")" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="@Url.Content("~/Content/THP/js/jquery-ui-1.8.17.min.js")"></script>*@
    @*<link rel="stylesheet" href="http://code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">    
    <script src="http://code.jquery.com/ui/1.11.2/jquery-ui.js"></script>*@
    <link href="@Url.Content("~/MapTest/JqueryUI/jquery-ui.css")" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="@Url.Content("~/MapTest/JqueryUI/jquery-ui.js")"></script>
    <!-- ### DateTime Picker -->
    <script type="text/javascript" src="@Url.Content("~/Content/THP/js/jquery.price_format.1.8.js")"></script>
    <!-- HighCharts -->
    <script src="@Url.Content("~/MapTest/HighCharts/highcharts.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/MapTest/HighCharts/modules/data.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/MapTest/HighCharts/modules/exporting.js")" type="text/javascript"></script>
    <!-- ### HighCharts -->
    <!-- Leaflet MiniMap Plugins -->
    <!-- ### Leaflet MiniMap Plugins -->
    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
        new StyleSheet { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new StyleSheet { ExtensionSuite = ExtensionSuite.GridView },
        new StyleSheet { ExtensionSuite = ExtensionSuite.PivotGrid },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Chart },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Report },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Scheduler },
        new StyleSheet { ExtensionSuite = ExtensionSuite.TreeList }
    )
    @Html.DevExpress().GetScripts(
        new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new Script { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new Script { ExtensionSuite = ExtensionSuite.GridView },
        new Script { ExtensionSuite = ExtensionSuite.PivotGrid },
        new Script { ExtensionSuite = ExtensionSuite.Editors },
        new Script { ExtensionSuite = ExtensionSuite.Chart },
        new Script { ExtensionSuite = ExtensionSuite.Report },
        new Script { ExtensionSuite = ExtensionSuite.Scheduler },
        new Script { ExtensionSuite = ExtensionSuite.TreeList }
    )
    <style>
		html, body {
			margin: 0;
			padding: 0;
			height: 100%;
		}
        #map, #container
        {
			width:100%;
            height: 100%;
        }
        .placeMarks-label
        {
            -moz-box-shadow: none;
            -webkit-box-shadow: none;
            box-shadow: none;
            color: #fff;
            position: relative;
        }
        .alignleft
        {
            float: left;
        }
        .alignright
        {
            float: right;
        }
        
        .avata
        {
        }
        .details
        {
        }
        .details p
        {
            width: 250px;
        }
        .details p label
        {
            width: 100px;
        }
        .details span char
        {
            float: left;
        }
        .details span num
        {
            float: right;
        }
        #sidebar-left
        {
            overflow: hidden;
        }
        .loading
        {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 99999999999999999999;
            opacity: .3;
            background: url(/MapTest/images/loading.gif) no-repeat center #bbb;
            display: none;
        }
        .customSearch
        {
        margin-left:10px;
        }
        .real-order
        {
            color: blue;
            font-family: "Lucida Grande" , "Arial" , sans-serif;
            font-size: 11px;
            font-weight: bold;
            font-style: italic;
            text-align: center;
            white-space: nowrap;
        }
        .labelmaps
        {
            color: blue;
            font-family: "Lucida Grande" , "Arial" , sans-serif;
            font-size: 10px;
            font-weight: bold;
            font-style: italic;
            text-align: center;
            white-space: nowrap;
        }
        .list-search
        {
            opacity: 0.8;
            z-index: 99999999;
            padding-left: 5px;
            @*line-height: 25px;
            border-bottom: 1px solid #fff;
            background: #5874F5;
            color: #fff;*@
            background: white;
            position: absolute;
            bottom: 0px;
            right: 0px;
            left: 460px;
            display: none;
        }
        .leaflet-popup-content
        {
            width:auto;
            margin: 14px 10px;    
        }
        
        .imghoverzoom
        {
            opacity:1;
            position:absolute;
            height:auto;
            width:auto;
            left:auto;
            top:auto;
            max-height:none;
            max-width:none;
            margin:0;
            padding:0;
            border-radius:0;
            background-size:100% 100%;
            background-position:center;
            background-repeat:no-repeat;
            overflow:hidden;
            z-index:2147483647;
        }
    </style>
    <script>
        //-----------------Tree Node-----------------//
        function OnTreeViewNodeClick(s, e) {
            //alert("Click " + e.node.name);
            itemId = e.node.name;
            //GetParam();

            // ViewInfoSelected();
            //var itemText =
            RenderTreeViewSelectedHeatMap(itemId);
        }
        function OnTreeViewCheckedChanged(s, e) {
            //alert("CheckedChanged" + e.node.name);
        }
        function OnTreeViewExpandedChanged(s, e) {
            //alert("ExpandedChanged" + e.node.name);
        }
        ////##Tree Node
        var typeHeatMap = 'Coverage';
        var dateSelected = '';
    </script>
</head>
<body>
    <div id="data_popup">
        <div id="tab_popup">
            @*<div class="sub_tab">tab1</div>
            <div class="sub_tab">tab2</div>
            <div class="sub_tab">tab3</div>*@ <a href="#" rel="content1" class="header_tab header_tab1"
                id="header_tab1">@Utility.Phrase("Popup_Outlet_Info")</a> <a href="#" rel="content2"
                    class="header_tab header_tab2" id="header_tab2">@Utility.Phrase("Popup_Outlet_Info_SSASM")</a>
            <a href="#" rel="content3" class="header_tab header_tab3" id="header_tab3">@Utility.Phrase("Popup_Outlet_Info_Image")</a>
        </div>
        <div id="content_popup">
            <div id="content1" class="content_tab content1">
                content1</div>
            <div id="content2" class="content_tab content2">
                content2</div>
            <div id="content3" class="content_tab content3">
                content3</div>
        </div>
        
    </div>
    <style type="text/css">
        #tab_popup a
        {
            background: #ccc;
            width: 100px;
            height: 26px !important;
            text-decoration: none;
            border-radius: 5px 5px 0 0;
            color: #fff;
            padding: 5px;
        }
        #data_popup
        {
            display: none;
        }
        #content_popup
        {
            width: 350px;
            height: 450px;
            overflow: auto;
        }
        .content_tab
        {
            display: none;
            margin-top: 5px;
            border-top: 2px solid #bbb;
        }
        
        .visitInfoTable
        {
            max-height:400px;
            border: 1px solid #ccc;
        }
        
        .visitInfoTable caption {
          text-align: left;
          color: silver;
          font-weight: bold;
          text-transform: uppercase;
          padding: 5px;
        }

        .visitInfoTable thead {
          background: SteelBlue;
          color: white;
        }

        .visitInfoTable th,
        .visitInfoTable td {
          padding: 5px 10px;
          border: 1px solid #ccc;
        }

        .visitInfoTable tbody tr:nth-child(even) {
          background: WhiteSmoke;
        }
                
        .visitInfoTable tfoot {
          background: SeaGreen;
          color: white;
          text-align: right;
        }

        .visitInfoTable tfoot tr th:last-child {
          font-family: monospace;
        }
        
        .visitInfoTable tfoot tr th:last-child {
          font-family: monospace;
        }

        .visitInfoTable tbody tr td:nth-child(3),
        .visitInfoTable tbody tr td:nth-child(4),
        .visitInfoTable tbody tr td:nth-child(5),
        .visitInfoTable tbody tr td:nth-child(6),
        .visitInfoTable tbody tr td:nth-child(7),
        .visitInfoTable tbody tr td:nth-child(8),
        .visitInfoTable tbody tr td:nth-child(9),
        .visitInfoTable tbody tr td:nth-child(10),
        .visitInfoTable tbody tr td:nth-child(11)
        {
          text-align: right;
          font-family: monospace;
        }
    </style>
    @*thanhhq*@
    <div id="container">
        <div id="map">
        </div>
        <script src="~/MapTest/Routing/leaflet-routing-machine-control.js"></script>
        <div class="list-search" style="z-index: 99999">
            <span>@Utility.Phrase("SalesSupervisor_AJAXReportSalesAssessment")</span>
            @*<img alt="" src="@Url.Content("~/Content/img/closeIcon.jpg")" width="15px" ;height="15px" style="float:right;" onclick="" />*@
            <div style="text-align: left; overflow: auto; max-height: 400px;" id="divVisitInfo">
            </div>
        </div>
        <div id="sidebar-left" style="overflow: auto;">
            <strong>@Utility.Phrase("SalesSupervisor_Filter")</strong>
            <br clear="all" />
            <br clear="all" />
            <div id="combobox">
                <table class='head-report' cellpadding="3px" style="border-collapse: collapse;
                    display: block;">
                    <tbody style="font-size: 14px;">
                        <tr>
                            <td>
                                <span class="alignleft">@Utility.Phrase("SalesSupervisor_Date") :</span>
                            </td>
                            <td>
                                <span class="">
                                    @Html.DevExpress().DateEdit(
                                    settings =>
                                    {
                                        settings.Name = "strFromDate";
                                        settings.Date = Model.VisitDate;
                                        settings.Properties.NullText = Utility.info.DateTimeFormat.ShortDatePattern;// "dd-MM-yyyy";
                                        settings.Properties.EditFormat = EditFormat.Custom;
                                        settings.Properties.EditFormatString = Utility.info.DateTimeFormat.ShortDatePattern;// "dd-MM-yyyy";
                                        settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { LoadSalesman(); }";
                                        settings.Width = Unit.Pixel(250);
                                    }
                                    ).GetHtml()
                                </span>
                            </td>
                        </tr>
                        <tr>
                            @*<td>
                                <span class="alignleft">@Utility.Phrase("SalesSupervisor_TerritoryTree") :</span>
                            </td>
                            <td>
                                <span class="alignright">
                                
                                </span>
                            </td>*@
                            <td colspan="2">
                                @*<div style="overflow: auto;">
                                    
                                </div>*@
                               @* @Html.Action("TerritoryTreeView")*@
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
             <div style="margin-left: 75px">
                @Html.TextBox("txtSearch", Utility.StringParse(textSearch))
                @*   <button type="submit" class="btn_long" id="btnSearch" name="btnSearch" style="margin-left: 10px">
                    @Utility.Phrase("Search")
                </button>*@
                @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnSearch";
                settings.Text = Utility.Phrase("Search");
                settings.UseSubmitBehavior = false;
                settings.ControlStyle.CssClass = "customSearch";
            }).GetHtml()
            </div>
            @Html.Action("TerritoryTreeView")
            @*<input type="button" value="@Utility.Phrase("View")" onclick="ViewInfoSelected();" />
            <input type="button" value="@Utility.Phrase("Clear")" onclick="ClearMap();" />*@

            <br clear="all" />
            <input type="checkbox" name="cbtHeatMap" id="cbtHeatMap" checked="checked"><span style="font-size:16px;">Heat Map</span> </input>
            <input type="checkbox" name="cbtRawData" id="cbtRawData" style="margin-left:100px"><span style="font-size:16px;">Raw Data</span></input>
            <br clear="all"/>
            <br clear="all" />
            <br clear="all" />
            <input type="checkbox" name="cbtHeatMapRevenue" id="cbtHeatMapRevenue" onchange="GenerateRevenue();"><span style="font-size:16px;">Revenue</span> </input>
            <input type="checkbox" name="cbtHeatMapQuantity" id="cbtHeatMapQuantity" style="margin-left:100px" onchange="GenerateQuantity();"><span style="font-size:16px;">Quantity</span></input>
            <input type="checkbox" name="cbtHeatMapCoverage" id="cbtHeatMapCoverage" checked="checked" style="margin-left:100px" onchange="GenerateCoverage();"><span style="font-size:16px;">Coverage</span></input>
            <br clear="all" />
            <br clear="all" />
            <div>
                <span class="alignright">
                    <label for="sales">
                        @Html.DevExpress().ComboBox(
                            settings =>
                            {
                                settings.Name = "CategoryID";
                                settings.Width = Unit.Pixel(130);
                                settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialCategory" };
                                settings.Properties.CallbackPageSize = 50;
                                settings.Properties.DropDownRows = 15;
                                settings.Properties.AllowMouseWheel = true;
                                //settings.Properties.TextFormatString = "{0}-{1}";s
                                settings.Properties.TextField = "CategoryName";
                                settings.Properties.ValueField = "CategoryID";
                                settings.Properties.ValueType = typeof(string);
                                settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                settings.Properties.Height = Unit.Pixel(20);
                                settings.Style.Add("float", "right");

                                settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) {InventoryID.PerformCallback();SelectCategoryChange() ;}";
                                settings.Properties.EnableCallbackMode = true;
                                settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) {e.customArgs['typeHM'] =  typeHeatMap;e.customArgs['dateSL'] =  dateSelected;}";
                                settings.PreRender = (sender, e) =>
                                {
                                    MVCxComboBox cmb = sender as MVCxComboBox;
                                        cmb.Value = 0;
                                        cmb.Text= "";
                                };
                            }
                                               ).BindList(Model.listCategory).Bind(Model, "CategoryID").GetHtml()
                    </label>
                </span>

                <span class="alignright">
                    <label for="sales">
                        @Html.DevExpress().ComboBox(
                            settings =>
                            {
                                settings.Name = "InventoryID";
                                settings.Width = Unit.Pixel(130);
                                settings.CallbackRouteValues = new { Controller = "Tracking", Action = "ComboBoxPartialItemCategory" };
                                settings.Properties.CallbackPageSize = 50;
                                settings.Properties.DropDownRows = 15;
                                settings.Properties.AllowMouseWheel = true;
                                //settings.Properties.TextFormatString = "{0}-{1}";
                                settings.Properties.TextField = "InventoryName";
                                settings.Properties.ValueField = "InventoryID";
                                settings.Properties.ValueType = typeof(int);
                                settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                                settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                settings.Properties.Height = Unit.Pixel(20);
                                settings.Style.Add("float", "right");
                                
                                settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) {SelectItemChange() ;}";
                                settings.Properties.EnableCallbackMode = true;
                                settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) {e.customArgs['typeHM'] =  typeHeatMap;e.customArgs['strFromDate'] = $('input[name= " + "strFromDate" + "]').val(); e.customArgs['CategoryID'] = CategoryID.GetValue();}";

                            }
                                                        ).BindList(Model.listItem).Bind(Model, "InventoryID").GetHtml()
                    </label>
                </span>
            </div>
            <strong>@Utility.Phrase("SalesSupervisor_Infomation")</strong>
            <table>
                <tr>
                    <td>
                        @Utility.Phrase("SyncData") :
                    </td>
                    <td>
                        <input type="radio" name="SyncDataFirst" id="VisitLast" group="SyncData" checked="checked"
                            onchange="RenderSMSync();"></input>@Utility.Phrase("VisitLast")
                        <input type="radio" name="SyncDataFirst" id="SyncDataFirst" group="SyncData" onchange="RenderSMSync();"></input>@Utility.Phrase("SyncDataFirst")
                        <input type="radio" name="SyncDataFirst" id="SyncDataLast" group="SyncData" onchange="RenderSMSync();"></input>@Utility.Phrase("SyncDataLast")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("SalesSupervisor_cbtbSalesAssessment") :
                    </td>
                    <td>
                        <input type="checkbox" name="cbtbSalesAssessment" id="cbtbSalesAssessment" 
                            onchange="ToogleSalesAssessment();"></input>
                    </td>
                </tr>
            </table>
            <br clear="all" />
            <strong>Location_Routine</strong>
            <table>
                <tr>
                    <td>
                        Radar:
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerLocation" id="MarkerLocation"
                               onchange="GetLocation();" />GetLocation</td>
                    <td>
                        <input type="checkbox" name="MarkerOutLetS" id="MarkerOutLetS" onchange="GetLocationOutLet();" />Outlet near point 
                        <br clear="all" />
                        </td>
                 </tr>
              </table>
                <br clear="all" />
            <strong>@Utility.Phrase("SalesSupervisor_Infomation_Location")</strong>
            <table>
                <tr>
                    <td>
                        @Utility.Phrase("SalesSupervisor_Outlet") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerOutletMCP" id="MarkerOutletMCP" checked="checked"
                            onchange="UpdateMap();" />@Utility.Phrase("IsMCP")
                        <input type="checkbox" name="LineOutlet" id="LineOutlet" checked="checked" onchange="UpdateMap();" />@Utility.Phrase("Line")
                        <br clear="all" />
                        <input type="checkbox" name="MarkerOutlet" id="MarkerOutlet" />@Utility.Phrase("NotMCP")
                        <br clear="all" />
                        <input type="checkbox" name="MarkerOutletT2" id="MarkerOutletT2" class="checkbox1"
                            onchange="UpdateMap();" />T2
                        <input type="checkbox" name="MarkerOutletT3" id="MarkerOutletT3" class="checkbox1"
                            onchange="UpdateMap();" />T3
                        <input type="checkbox" name="MarkerOutletT4" id="MarkerOutletT4" class="checkbox1"
                            onchange="UpdateMap();" />T4
                        <input type="checkbox" name="MarkerOutletT5" id="MarkerOutletT5" class="checkbox1"
                            onchange="UpdateMap();" />T5
                        <input type="checkbox" name="MarkerOutletT6" id="MarkerOutletT6" class="checkbox1"
                            onchange="UpdateMap();" />T6
                        <input type="checkbox" name="MarkerOutletT7" id="MarkerOutletT7" class="checkbox1"
                            onchange="UpdateMap();" />T7
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("Salesman") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSM" id="MarkerSM" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineSM" id="LineSM" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("SaleSup") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerSS" id="MarkerSS" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineSS" id="LineSS" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
                <tr>
                    <td>
                        @Utility.Phrase("ASM") :
                    </td>
                    <td>
                        <input type="checkbox" name="MarkerASM" id="MarkerASM" onchange="UpdateMap();" />@Utility.Phrase("Location")
                        <input type="checkbox" name="LineASM" id="LineASM" onchange="UpdateMap();" />@Utility.Phrase("Line")
                    </td>
                </tr>
            </table>
            @*<input type="button" value="@Utility.Phrase("Home")" onclick="Back();" />*@
            @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnHome";
                settings.Text = Utility.Phrase("Home");
                settings.UseSubmitBehavior = false;
                settings.ClientSideEvents.Click = "function(s, e) { Back(); }";
            }).GetHtml()
            <br clear="all" />
            <select id="listOutlet" onchange="focusonMap()">
                <option id="opID"></option>
            </select>
        </div>

        <div id="sidebar-right">
            <h1>
                right sidebar</h1>
        </div>
        <script type='text/javascript'>
    var SalesmanAvatarFolder = '@Url.Content(Constant.SalesmanAvatarFolder)';
    var OutletImageFolder = '@Url.Content(Constant.OutletImageFolder)';
    var SalesOrdersImageFolder = '@Url.Content(Constant.SalesOrdersImageFolder)';

    ////DATA USE IN MAP
    var strVisitDate = '';
    var listSMSelected = '';
    var distributorIDSelected = 0;
    var branchIDSelected = '';
    var regionIDSelected = '';
    var areaIDSelected = '';
    var salesupIDSelected = '';

    //Treelist selected
    var itemId = '';

    var mapData = {};

    mapData.listRouteRender = [];
    mapData.listOutletInfo = [];
    mapData.listRouteInfo = [];
    mapData.LayerMarkerOutlet = L.layerGroup();
    mapData.LayerMarkerOutletMCP = L.layerGroup();
    mapData.LayerLineOutlet = L.layerGroup();

    mapData.LayerLineOutletSMSSASM = L.layerGroup();
    mapData.LayerMarkerOutletSMSSASM = L.layerGroup();

    mapData.LayerMarkerSM = L.layerGroup();
    mapData.LayerLineSM = L.layerGroup();
    mapData.listSMInfo = [];

    mapData.LayerMarkerSS = L.layerGroup();
    mapData.LayerLineSS = L.layerGroup();
    mapData.listSSInfo = [];

    mapData.LayerMarkerASM = L.layerGroup();
    mapData.LayerLineASM = L.layerGroup();
    mapData.listASMInfo = [];

    mapData.LayerMarkerSMLastLocation = L.layerGroup();
    mapData.listSMLastLocationInfo = [];

    mapData.LayerMarkerSSLastLocation = L.layerGroup();
    mapData.listSSLastLocationInfo = [];

    mapData.LayerMarkerASMLastLocation = L.layerGroup();
    mapData.listASMLastLocationInfo = [];

    mapData.LayerMarkerDistributor = L.layerGroup();
    mapData.listDistributorInfo = [];

    mapData.LatLongBounds = [];

    mapData.LayerMarkerOutletT2 = L.layerGroup();
    mapData.LayerMarkerOutletT3 = L.layerGroup();
    mapData.LayerMarkerOutletT4 = L.layerGroup();
    mapData.LayerMarkerOutletT5 = L.layerGroup();
    mapData.LayerMarkerOutletT6 = L.layerGroup();
    mapData.LayerMarkerOutletT7 = L.layerGroup();
    mapData.LayerMarkerOutletCN = L.layerGroup();

    ////##DATA USE IN MAP

            ////INIT GOOGLE MAP
    var polygon = null;
    var groupby = null;
    var Geo = null;
    var multipolygon = [];
    var multiLabel = [];
    var itemClick = '';
    var categoryID = '';
    var inventoryItemID = '';
    dateSelected = $('input[name="strFromDate"]').val();
    var map = new L.Map('map', {
        center: [16, 106],
        zoom: 7,
        minZoom: 0,
        maxZoom: 23,
        contextmenu: true,
        contextmenuWidth: 140,
        contextmenuItems: [{
            text: 'Showdata: Region',
            callback: DataMenuItemRegion
        }]
    });
    var googleLayer = new L.Google('ROADMAP');
    map.addLayer(googleLayer);
    
    // Default option for HeatMap
    if ($('#cbtHeatMap').is(':checked'))
    {
        typeHeatMap = 'Coverage';
        groupby = 'Region';
        RenderTerritory('Coverage', dateSelected, groupby, Geo, '', categoryID, inventoryItemID);
    }

    function getColor(d) {
        if (d == 0) {
            return '616161';
        }
        if (d > 0 && d <= 1000) {
            return '0213EA';
        }
        if (d >= 1001 && d <= 5000) {
            return '0FF608';
        }
        if (d >= 5001 && d <= 10000) {
            return 'FFFD01';
        }
        if (d >= 15001 && d <= 20000) {
            return 'FEB101';
        }
        if (d >= 20001) {
            return 'FF1200';
        }
    };
    function DataMenuItemRegion()
    {
        if (typeHeatMap != '')
        {
            var d = dateSelected;
            ClearHeatMapAndRoutineLayer();
            RenderTerritory(typeHeatMap, dateSelected, 'Region', Geo, '', categoryID, inventoryItemID);
        }
    }
    function SelectCategoryChange()
    {
        ClearHeatMapAndRoutineLayer();
        categoryID = CategoryID.GetValue();
        RenderTerritory(typeHeatMap, dateSelected, groupby, Geo, '', categoryID, inventoryItemID);
        inventoryItemID = '';
    }

    function SelectItemChange()
    {
        ClearHeatMapAndRoutineLayer();
        inventoryItemID = InventoryID.GetValue();
        RenderTerritory(typeHeatMap, dateSelected, groupby, Geo, '', categoryID, inventoryItemID);
    }
    function GenerateRevenue() {
        if ($('#cbtHeatMap').is(':checked')) {
            typeHeatMap = 'Revenue';
            CategoryID.PerformCallback();
            InventoryID.PerformCallback()
            ClearHeatMapAndRoutineLayer();
            groupby = 'Region';
            if ($("#cbtHeatMapRevenue").is(':checked')) {
                RenderTerritory('Revenue', dateSelected, groupby, Geo, '', categoryID, inventoryItemID);
                $('#cbtHeatMapQuantity').prop('checked', false);
                $('#cbtHeatMapCoverage').prop('checked', false);
            }
        }
    }
    function GenerateQuantity() {
        if ($('#cbtHeatMap').is(':checked')) {
            typeHeatMap = 'Quantity';
            CategoryID.PerformCallback();
            InventoryID.PerformCallback()
            ClearHeatMapAndRoutineLayer();
            groupby = 'Region';
            if ($("#cbtHeatMapQuantity").is(':checked')) {
                $('#cbtHeatMapRevenue').prop('checked', false);
                $('#cbtHeatMapCoverage').prop('checked', false);
            }
        }
    }
    function GenerateCoverage() {
        if ($('#cbtHeatMap').is(':checked')) {
            typeHeatMap = 'Coverage';
            CategoryID.PerformCallback();
            InventoryID.PerformCallback()
            ClearHeatMapAndRoutineLayer();
            groupby = 'Region';
            if ($("#cbtHeatMapCoverage").is(':checked')) {
                //RenderTerritory('Coverage', dateSelected, groupby, Geo, '', categoryID, inventoryItemID);
                $('#cbtHeatMapRevenue').prop('checked', false);
                $('#cbtHeatMapQuantity').prop('checked', false);
            }
        }
    }
    function RenderTerritory(type, dateSelected, group, GeoId, item, categoryID, inventoryItemID) {
        if (group == null) {
            group = 'Region';
            groupby = 'Region';
        }
        $.ajax({
            type: 'POST', //Method type
            url: '/Tracking/GetTerritory', //Your form processing file url
            data: { type: type, dateSelected: dateSelected, groupby: group, TerritoryID: GeoId, itemClick: item, categoryID: categoryID, itemID: inventoryItemID },
            dataType: 'json',
            success: function (data) {
                for (var item in data) {
                    RenderHeatMapPolygon(type, dateSelected, group, data[item], categoryID, inventoryItemID);
                }
            }
        });
    }
    function RenderHeatMapPolygon(type, dateSelected, groupby, GeoID, categoryID, inventoryItemID) {
        var LatLongBoundMaps = [];
        var LatLongBounds = [];
        var LatLongBoundsCenter = [];
        typeHeatMap = type;
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/GetRevenuePolygon', //Your form processing file url
            data: { type: type, dateSelected: dateSelected, groupby: groupby, TerritoryID: GeoID, categoryID: categoryID, itemID: inventoryItemID }, //Forms name
            dataType: 'json',
            success: function (data) {
                if (data != null && data.html != null && data.html.length > 1) {
                    var n = data.html.length;
                    var nCenterFrom = (n / 4) - 1;
                    var nCenterTo = (n / 4) + 1;
                    var mCenterFrom = nCenterFrom + (n / 2) - 1;
                    var mCenterTo = nCenterTo + (n / 2) - 1;
                    for (var i = 0; i < n; i++) {
                        var latlng = L.latLng(data.html[i].Lat, data.html[i].Lng);
                        LatLongBounds.push(latlng);
                        LatLongBoundMaps.push(latlng);
                        if (i >= nCenterFrom && i <= nCenterTo) {
                            LatLongBoundsCenter.push(latlng);
                        }
                        else if (i >= mCenterFrom && i <= mCenterTo) {
                            LatLongBoundsCenter.push(latlng);
                        }
                    }

                    var strLabel = '';
                    if (data.info != null) {
                        strLabel += '<table style="width:100%" id="tbInfo" >';
                        strLabel += '<caption style="text-align:left;">' + data.info.Code + ' - ' + data.info.Name + '</caption>';
                        if (type == 'Revenue') {
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("TotalRevenue"): </td>';
                            strLabel += '<td nowrap>' + data.info.TotalQuantity + '</td>';
                            strLabel += '</tr>';
                        }
                        if (type == 'Quantity') {
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("CategoryName"): </td>';
                            strLabel += '<td nowrap>' + data.info.Category + '</td>';
                            strLabel += '</tr>'
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("ItemName"): </td>';
                            strLabel += '<td nowrap>' + data.info.InventoryItem + '</td>';
                            strLabel += '</tr>';
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("TotalQuantity"): </td>';
                            strLabel += '<td nowrap>' + data.info.TotalQuantity + '</td>';
                            strLabel += '</tr>';
                                }
                        if (type == 'Coverage') {
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("CategoryName"): </td>';
                            strLabel += '<td nowrap>' + data.info.Category + '</td>';
                            strLabel += '</tr>';
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("ItemName"): </td>';
                            strLabel += '<td nowrap>' + data.info.InventoryItem + '</td>';
                            strLabel += '</tr>';
                            strLabel += '<tr>';
                            strLabel += '<td nowrap>@Utility.Phrase("TotalCoverage"): </td>';
                            strLabel += '<td nowrap>' + data.info.TotalQuantity + '</td>';
                            strLabel += '</tr>';
                                }
                                strLabel += '</table>';

                                polygon = L.multiPolygon([LatLongBounds],
                                     {
                                         color: '#' + getColor(data.info.TotalQuantity), weight: '4px'
                                         , options: {
                                             GeoCode: data.info.Code
                                         }
                                     }
                                                 ).addTo(map)
                                .bindLabel(strLabel).on('click', ViewDetailGeo);
                                multipolygon.push(polygon);
                                //polygon.bindLabel(strLabel).addTo(map);
                                //polygon.on('click', ViewDetailGeo).addTo(map);

                                var bounds = L.latLngBounds(LatLongBoundsCenter);
                                var label = new L.Label();
                                label.setContent(data.info.Code + ' - ' + data.info.Name);// + " " + n.toString());
                                label.setLatLng(bounds.getCenter());
                                multiLabel.push(label);
                                map.showLabel(label);

                                var boundsMap = L.latLngBounds(LatLongBoundMaps);
                                map.fitBounds(boundsMap);
                            }
                        }
                    }
                });
            }
            function ViewDetailGeo(e)
            {
                if (groupby != 'Route') {
                    if (groupby == 'Region') {
                        Geo = e.target._options.options.GeoCode;
                        RenderTerritory(typeHeatMap, dateSelected, 'Area', Geo, '', categoryID, inventoryItemID);
                        groupby = 'Area';
                    }
                    else if (groupby == 'Area') {
                        Geo = e.target._options.options.GeoCode;
                        RenderTerritory(typeHeatMap, dateSelected, 'Distributor', Geo, '', categoryID, inventoryItemID);
                        groupby = 'Distributor';
                    }
                    else if (groupby == 'Distributor') {
                        Geo = e.target._options.options.GeoCode;
                        RenderTerritory(typeHeatMap, dateSelected, 'Route', Geo, '', categoryID, inventoryItemID);
                        groupby = 'Route';
                    }
                    ClearHeatMapAndRoutineLayer();
                }
            }
            function RenderTreeViewSelectedHeatMap(item) {
                var routeID = '';
                var distributorID = '';
                var AreaID = '';
                var regionID = '';
                $.ajax({ //Process the form using $.ajax()
                    type: 'POST', //Method type
                    url: '/Tracking/TerritoryTreeViewSelected', //Your form processing file url
                    data: { itemId: item }, //Forms name
                    dataType: 'json',
                    success: function (data) {
                        routeID = data.listSMSelected;
                        distributorID = data.distributorIDSelected;
                        AreaID = data.areaIDSelected;
                        regionID = data.regionIDSelected;
                        if (regionID == '' && AreaID == '' && distributorID == '' && routeID == '')
                        {
                            RenderTerritory('Region', '', '');
                            groupby = 'Region';
                        }
                        else if(regionID != '')
                        {
                            RenderTerritory('Region', '', regionID);
                            groupby = 'Region';
                        }
                        else if (AreaID != '') {
                            RenderTerritory('Area', '', AreaID);
                            groupby = 'Area';
                        }
                        else if (distributorID != '') {
                            RenderTerritory('Distributor', '', distributorID);
                            groupby = 'Distributor';
                        }
                        else if (routeID != '') {
                            RenderTerritory('distributorID', '', distributorID);
                            groupby = 'routeID';
                        }
                    }
                });
            }
            //#endregion HeatMap

            // Get Routine
            var marker = null;
            var lat = null;
            var long = null;
            var routing = null;
            var markerOutLet = null;
            var marketOutLetArray = new Array();
            function GetLocation() {
                if ($("#MarkerLocation").is(':checked'))
                    map.locate({ setView: true, maxZoom: 17 });
                else
                {
                    if (marker != null)
                    map.removeLayer(marker)
                    if (marketOutLetArray != null) {
                        for (i = 0; i < marketOutLetArray.length; i++) {
                            map.removeLayer(marketOutLetArray[i]);
                        }
                    }
                    if (routing != null) {
                        map.removeControl(routing);
                        routing = null;
                    }

                    $('#MarkerOutLetS').prop('checked', false);
                }
            }
            map.on('locationfound', onLocationFound);

            function onLocationFound(e) {
                lat = e.latlng.lat;
                long = e.latlng.lng;
                var myIcon = L.icon({
                    iconUrl: '/Content/THP/markers/193.png',
                    iconSize: [20, 35]
                });
                // Current Location for Saleman
                 marker = L.marker(e.latlng, { icon: myIcon }).addTo(map);
                marker.on('mouseover', function (e) {
                    marker.bindPopup("<b>Vị trí hiện tại</b><br> Vĩ độ: " + lat + "<br> Kinh độ: " + long).openPopup();
                });
                marker.on('mouseout', function (e) {
                    marker.closePopup();
                });
            }
            function focusonMap()
            {
                var LatLongBounds = [];
                var itemInfo = listOutlet.options[listOutlet.selectedIndex].value.toString().split("-");
                var latlng = L.latLng(itemInfo[0], itemInfo[1]);
                LatLongBounds.push(latlng);
                var boundsMap = L.latLngBounds(LatLongBounds);
                map.fitBounds(boundsMap);
            }
            function GetLocationOutLet() {
                if ($('#MarkerOutLetS').is(':checked') && $('#MarkerLocation').is(':checked')) {
                    $.ajax({
                        type: 'POST',
                        url: "@Url.Action("ShowOutLets", "Tracking")",
                data: { latitude: lat, longtitude: long },
                dataType: 'json',
                success: function (data) {
                    var iconOutlet = L.icon({
                        iconUrl: '/Content/THP/img/markerFFFF00.png',
                        iconSize: [20, 37]
                        //shadowUrl: null
                    });
                    for (var item in data) {
                        markerOutLet = L.marker([data[item].Latitude, data[item].Longtitude], { title: data[item].OutletName, icon: iconOutlet }, { opacity: 0.8 })
                            .addTo(map).bindPopup("<b>Cửa hàng: " + data[item].OutletName + "</b><br> Địa chỉ: " + data[item].Address).openPopup()
                            .on('click', onClick);
                        marketOutLetArray.push(markerOutLet);

                        //var option = document.createElement("opID");
                        //option.text = "Text";
                        //option.value = "myvalue";
                        $('#listOutlet').append(new Option(data[item].OutletName, data[item].Latitude +"-"+ data[item].Longtitude));
                    }

                }
            });
        }
        else {
            if (marketOutLetArray != null) {
                for (i = 0; i < marketOutLetArray.length; i++) {
                    map.removeLayer(marketOutLetArray[i]);
                }
            }
            if (routing != null) {
                map.removeControl(routing);
                routing = null;
            }
                    
        }
    }
    // Find path between Saleman and Outlets
    function onClick(e) {
        if (routing != null) {
            map.removeControl(routing);
            routing = null;
        }
        routing = L.Routing.control({
            plan: L.Routing.plan([
            L.latLng(lat, long),
            L.latLng(e.latlng.lat, e.latlng.lng)
            ], {
                waypointIcon: function (i) {
                    return new L.Icon.Label.Default({
                        labelText: "Destination"
                    });
                }
            })
        }).addTo(map);
    }
    function ClearHeatMapAndRoutineLayer() {
        if (marker != null)
            map.removeLayer(marker)
        if (marketOutLetArray != null) {
            for (i = 0; i < marketOutLetArray.length; i++) {
                map.removeLayer(marketOutLetArray[i]);
            }
        }
        if (routing != null) {
            map.removeControl(routing);
            routing = null;
        }
        if (multipolygon != null) {
            for (i = 0; i < multipolygon.length; i++) {
                map.removeLayer(multipolygon[i]);
            }
        }
        if (multiLabel != null) {
            for (i = 0; i < multiLabel.length; i++) {
                map.removeLayer(multiLabel[i]);
            }
        }
        $('#MarkerOutLetS').prop('checked', false);
        $('#MarkerLocation').prop('checked', false);
    }
    //END GET ROUTINE

    //INSERT VIETNAMESE territorial sovereignty
    //var bienDong = new MarkerWithLabel({
    //    position: new google.maps.LatLng(15.794318, 113.834839),
    //    draggable: false,
    //    raiseOnDrag: false,
    //    map: map,
    //    labelContent: "Biển Đông - Việt Nam",
    //    labelAnchor: new google.maps.Point(22, 0),
    //    labelClass: "labelmaps", // the CSS class for the label
    //    icon: {}
    //});

    //var HoangSa = new MarkerWithLabel({
    //    position: new google.maps.LatLng(17.232054, 112.026215),
    //    draggable: false,
    //    raiseOnDrag: false,
    //    map: map,
    //    labelContent: "Quần Đảo Hoàng Sa " + "<br />" + " (Đà Nẵng - Việt Nam)",
    //    labelAnchor: new google.maps.Point(22, 0),
    //    labelClass: "labelmaps", // the CSS class for the label
    //    icon: {}
    //});

    //var TruongSa = new MarkerWithLabel({
    //    position: new google.maps.LatLng(11.195326, 115.611877),
    //    draggable: false,
    //    raiseOnDrag: false,
    //    map: map,
    //    labelContent: "Quần Đảo Trường Sa " + "<br />" + " (Khánh Hòa - Việt Nam)",
    //    labelAnchor: new google.maps.Point(22, 0),
    //    labelClass: "labelmaps", // the CSS class for the label
    //    icon: {}
    //});

    ////##INIT GOOGLE MAP

    ////Checkbox
    $('#MarkerOutlet').click(function (event) {  //on click
        if (this.checked) { // check select status
            $('.checkbox1').each(function () { //loop through each checkbox
                this.checked = true;  //select all checkboxes with class "checkbox1"
            });
        } else {
            $('.checkbox1').each(function () { //loop through each checkbox
                this.checked = false; //deselect all checkboxes with class "checkbox1"
            });
        }
        UpdateMap();
    });
    ////##Checkbox Event

    $("#sidebar-left").resizable();

    ////MarkerCluster
    mapData.markers = new L.MarkerClusterGroup({ spiderfyOnMaxZoom: true, showCoverageOnHover: false, zoomToBoundsOnClick: true, disableClusteringAtZoom: 16 });
    ////##MarkerCluster

    ////Distance
    var d = new L.Control.Distance(); map.addControl(d);
    map.addControl(new L.Control.Scale());
    ////##Distance

    ////MINI MAP
    //Plugin magic goes here! Note that you cannot use the same layer object again, as that will confuse the two map controls
    //var osm2 = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: 13, attribution: osmAttrib });
    var osm2 = new L.Google('ROADMAP');

    var rect1 = { color: "#ff1100", weight: 3 };
    var rect2 = { color: "#0000AA", weight: 1, opacity: 0, fillOpacity: 0 };
    var miniMap = new L.Control.MiniMap(
                        osm2,
                        {
                            toggleDisplay: true
                            , aimingRectOptions: rect1
                            , shadowRectOptions: rect2
                            , width: 250
                            , height: 250
                        }
                        ).addTo(map);
    ////##MINI MAP

    ////Sidebar
    var leftSidebar = L.control.sidebar('sidebar-left', {
        position: 'left'
    });
    map.addControl(leftSidebar);

    var rightSidebar = L.control.sidebar('sidebar-right', {
        position: 'right'
    });
    map.addControl(rightSidebar);
    leftSidebar.show();
    rightSidebar.hide();
    ////##Sidebar

    ////Map Utility

    $("form#frmMap").error(function () {
        alert("form Error!!!");
        window.location = window.location;
    });

    document.onkeypress = checkKey;
    function checkKey(e) {
        e = e || window.event;
        WriteLog(e.keyCode);
        //alert(e.keyCode);
        if (e.keyCode == 108) {
            leftSidebar.show();
        }
        else if (e.keyCode == 114) {
            rightSidebar.show();
        }
    }

    var placeMarker_double = L.Icon.Label.extend({
        options: {
            iconUrl: '',
            shadowUrl: null,
            //iconSize: new L.Point(36, 36),
            iconAnchor: new L.Point(0, 0),
            //labelAnchor: new L.Point(-5, -1),
            wrapperAnchor: new L.Point(12, 13),
            labelClassName: 'placeMarks-label'
        }
    });

    function labelTextAnchor(text) {
        var n = text.toString().length;
        if (n == 1) {
            return 0;
        }
        else if (n == 2) {
            return -3;
        }
        else if (n == 3) {
            return -5;
        }
        else {
            return 0;
        }
    }

    function RandomColor() {
        colors = ['#000000', '#00008B', '#0000FF', '#006400', '#008000', '#008B8B', '#00DED1', '#1E90FF', '#228B22', '#2F4F4F', '#483D8B', '#4B0082', '#556B2F', '#5F9EA0', '#6495ED', '#696969', '#7FFF00', '#8A2BE2', '#8B0000', '#8B008B', '#9400D3', '#9932CC', '#A52A2A', '#B22222', '#BDB76B', '#CD5C5C', '#D2691E', '#DC143C', '#DEB887', '#E9967A', '#FF7F50', '#FF8C00']
        return colors[Math.floor(Math.random() * colors.length)];
    }

    function arrayPush(arA, arB) {
        if (arB != null) {
            var n = arB.length;
            for (var i = 0; i < n; i++) {
                arB.push(arB[i]);
            }
        }
    }

    function WriteLog(log) {
        $('#log').html($('#log').html() + '<br/>' + log);
    }

    function Popup(latlng, content) {
        var popup = new L.Popup();
        popup.setLatLng(latlng);
        popup.setContent(content);
        map.openPopup(popup);
    }

    function MapPanToAndZoom(latlng, zoom) {
        if (mapData.LatLongBounds.length > 0) {
            var bounds = new L.LatLngBounds(mapData.LatLongBounds);
            map.fitBounds(bounds);
        }
    }

    function MapSetZoom(latlng, zoom) {
        //if (mapData.LatLongBounds.length > 0) {
        //    var bounds = new L.LatLngBounds(mapData.LatLongBounds);
        //    map.fitBounds(bounds);
        //}
        map.setView(latlng, zoom);
    }

    function RenderPolyline(latlngs, strLabel, strInfo, color, layer) {
        if (latlngs == null || latlngs.length < 2) {
            return 0;
        }

        polylineMCP = L.polyline(latlngs, { color: color });
        polyLineArrow = L.polylineDecorator(latlngs, {
            patterns: [
            { offset: 1, repeat: 100, symbol: L.Symbol.arrowHead({ pixelSize: 15, pathOptions: { color: color, fillOpacity: 0.6, weight: 0 } }) }
            ]
        });

        if (strLabel != '') {
            polylineMCP.bindLabel(strLabel, { noHide: true });
        }
        if (strInfo != '') {
            polylineMCP.bindPopup(strInfo);
        }

        if (layer != null) {
            layer.addLayer(polylineMCP);
            layer.addLayer(polyLineArrow);
            if (layer == mapData.LayerLineOutletSMSSASM) {
                map.addLayer(layer);
            }
        }

        return polylineMCP;
    }

    function RenderMarker(latlng, number, label, popup, icon, layer1, layer2) {
        if (latlng[0] != 0) {
            mapData.LatLongBounds.push(latlng);
        }

        var marker = L.marker(latlng, {
            icon: new placeMarker_double({
                labelText: number
            , labelAnchor: new L.Point(labelTextAnchor(number), -1)
            , iconUrl: '../Content/THP/markers/' + icon + '.png'
            })
        })

        if (label != '') {
            marker.bindLabel(label, { noHide: false })
        }
        if (popup != '') {
            marker.bindPopup(popup, { noHide: false });
        }

        if (layer1 != null) {
            layer1.addLayer(marker);
        }
        if (layer2 != null) {
            layer2.addLayer(marker);
        }

        return marker;
    }

    function RenderMarker(latlng, number, label, popup, icon, layer1, layer2, labelNoHide) {
        if (latlng[0] != 0) {
            mapData.LatLongBounds.push(latlng);
        }
        var iconURL = '../Content/THP/markers/' + icon + '.png';
        var marker = L.marker(latlng, {
            icon: new placeMarker_double({
                labelText: number
            , labelAnchor: new L.Point(labelTextAnchor(number), -1)
            , iconUrl: iconURL
            })
        })

        if (label != '') {
            marker.bindLabel(label, { noHide: labelNoHide })
        }
        if (popup != '') {
            marker.bindPopup(popup, { noHide: false });
        }

        if (layer1 != null) {
            layer1.addLayer(marker);
        }
        if (layer2 != null) {
            layer2.addLayer(marker);
        }

        return marker;
    }

    function UpdateMap() {
        mapData.MarkerOutletMCP = $("#MarkerOutletMCP").is(':checked');
        mapData.LineOutlet = $("#LineOutlet").is(':checked');
        mapData.MarkerSM = $("#MarkerSM").is(':checked');
        mapData.LineSM = $("#LineSM").is(':checked');
        mapData.MarkerSS = $("#MarkerSS").is(':checked');
        mapData.LineSS = $("#LineSS").is(':checked');
        mapData.MarkerASM = $("#MarkerASM").is(':checked');
        mapData.LineASM = $("#LineASM").is(':checked');
        mapData.MarkerOutlet = $("#MarkerOutlet").is(':checked');

        mapData.MarkerOutletT2 = $("#MarkerOutletT2").is(':checked');
        mapData.MarkerOutletT3 = $("#MarkerOutletT3").is(':checked');
        mapData.MarkerOutletT4 = $("#MarkerOutletT4").is(':checked');
        mapData.MarkerOutletT5 = $("#MarkerOutletT5").is(':checked');
        mapData.MarkerOutletT6 = $("#MarkerOutletT6").is(':checked');
        mapData.MarkerOutletT7 = $("#MarkerOutletT7").is(':checked');
        mapData.MarkerOutletCN = $("#MarkerOutletCN").is(':checked');

        MapShowHideLayer(mapData.LayerMarkerOutletMCP, mapData.MarkerOutletMCP, true);
        MapShowHideLayer(mapData.LayerMarkerOutlet, mapData.MarkerOutlet, true);
        MapShowHideLayer(mapData.LayerLineOutlet, mapData.LineOutlet, false);
        MapShowHideLayer(mapData.LayerMarkerSM, mapData.MarkerSM, true);
        MapShowHideLayer(mapData.LayerLineSM, mapData.LineSM, false);
        MapShowHideLayer(mapData.LayerMarkerSS, mapData.MarkerSS, true);
        MapShowHideLayer(mapData.LayerLineSS, mapData.LineSS, false);
        MapShowHideLayer(mapData.LayerMarkerASM, mapData.MarkerASM, true);
        MapShowHideLayer(mapData.LayerLineASM, mapData.LineASM, false);

        MapShowHideLayer(mapData.LayerMarkerOutletT2, mapData.MarkerOutletT2, true);
        MapShowHideLayer(mapData.LayerMarkerOutletT3, mapData.MarkerOutletT3, true);
        MapShowHideLayer(mapData.LayerMarkerOutletT4, mapData.MarkerOutletT4, true);
        MapShowHideLayer(mapData.LayerMarkerOutletT5, mapData.MarkerOutletT5, true);
        MapShowHideLayer(mapData.LayerMarkerOutletT6, mapData.MarkerOutletT6, true);
        MapShowHideLayer(mapData.LayerMarkerOutletT7, mapData.MarkerOutletT7, true);
        MapShowHideLayer(mapData.LayerMarkerOutletCN, mapData.MarkerOutletCN, true);

        ClearHeatMapAndRoutineLayer();
    }

    function MapShowHideLayer(layer, show, isMarkerLayer) {
        if (show) {
            if (map.hasLayer(layer) == false) {
                map.addLayer(layer);
                if (isMarkerLayer) {
                    mapData.markers.addLayer(layer);
                }
            }
        }
        else {
            if (map.hasLayer(layer) == true) {
                map.removeLayer(layer);

                if (isMarkerLayer) {
                    mapData.markers.removeLayer(layer);
                }
            }
        }
    }

    function ClearMap() {
        mapData.listRouteRender = [];
        mapData.listOutletInfo = [];
        mapData.listRouteInfo = [];
        mapData.LayerMarkerOutlet.clearLayers();
        mapData.LayerMarkerOutletMCP.clearLayers();
        mapData.LayerLineOutlet.clearLayers();

        mapData.LayerLineOutletSMSSASM.clearLayers();
        mapData.LayerMarkerOutletSMSSASM.clearLayers();

        mapData.LayerMarkerSM.clearLayers();
        mapData.LayerLineSM.clearLayers();
        mapData.listSMInfo = [];

        mapData.LayerMarkerSS.clearLayers();
        mapData.LayerLineSS.clearLayers();
        mapData.listSSInfo = [];

        mapData.LayerMarkerASM.clearLayers();
        mapData.LayerLineASM.clearLayers();
        mapData.listASMInfo = [];

        mapData.LayerMarkerSMLastLocation.clearLayers();
        mapData.listSMLastLocationInfo = [];

        mapData.LayerMarkerSSLastLocation.clearLayers();
        mapData.listSSLastLocationInfo = [];

        mapData.LayerMarkerASMLastLocation.clearLayers();
        mapData.listASMLastLocationInfo = [];

        mapData.LayerMarkerDistributor.clearLayers();
        mapData.listDistributorInfo = [];

        mapData.LatLongBounds = [];

        mapData.markers.clearLayers();

        mapData.LayerMarkerOutletT2.clearLayers();
        mapData.LayerMarkerOutletT3.clearLayers();
        mapData.LayerMarkerOutletT4.clearLayers();
        mapData.LayerMarkerOutletT5.clearLayers();
        mapData.LayerMarkerOutletT6.clearLayers();
        mapData.LayerMarkerOutletT7.clearLayers();
        mapData.LayerMarkerOutletCN.clearLayers();

        map.removeLayer(mapData.LayerMarkerOutletMCP);
        map.removeLayer(mapData.LayerLineOutlet);
        map.removeLayer(mapData.LayerLineOutletSMSSASM);
        map.removeLayer(mapData.LayerMarkerOutletSMSSASM);
        map.removeLayer(mapData.LayerLineSM);
        map.removeLayer(mapData.LayerMarkerSS);
        map.removeLayer(mapData.LayerLineSS);
        map.removeLayer(mapData.LayerMarkerASM);
        map.removeLayer(mapData.LayerLineASM);
        map.removeLayer(mapData.LayerMarkerSMLastLocation);
        map.removeLayer(mapData.LayerMarkerSSLastLocation);
        map.removeLayer(mapData.LayerMarkerASMLastLocation);
        map.removeLayer(mapData.LayerMarkerDistributor);

        map.removeLayer(mapData.LayerMarkerOutletT2);
        map.removeLayer(mapData.LayerMarkerOutletT3);
        map.removeLayer(mapData.LayerMarkerOutletT4);
        map.removeLayer(mapData.LayerMarkerOutletT5);
        map.removeLayer(mapData.LayerMarkerOutletT6);
        map.removeLayer(mapData.LayerMarkerOutletT7);
        map.removeLayer(mapData.LayerMarkerOutletCN);
    }
    ////##Map Utility


    //-----------------Outlet Render-----------------//
    function RenderOutletByRoute(routeCD, salesmanID, distributorID) {
        mapData.LatLongBounds = [];
        //GetParam();
        //alert("RenderOutletByRoute");
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/GetOutletInRoute', //Your form processing file url
            data: { routeCD: routeCD, salesmanID: salesmanID, distributorID: distributorID, strVisitDate: strVisitDate }, //Forms name
            dataType: 'json',
            success: function (data) {
                //insert vào list outlet để sử dụng cho Popup Info
                mapData.listOutletInfo = mapData.listOutletInfo.concat(data.html);
                mapData.listSMInfo = mapData.listSMInfo.concat(data.listSMVisit);
                mapData.listSSInfo = mapData.listSSInfo.concat(data.listSSVisit);
                mapData.listASMInfo = mapData.listASMInfo.concat(data.listASMVisit);

                if (mapData.listRouteInfo == null) {
                    mapData.listRouteInfo = [];
                }

                mapData.listRouteInfo.push(data.route);

                //alert("RenderOutletByRoute" + data.html.length + " - " + data.listSMVisit.length + " - " + data.listSSVisit.length + " - " + data.listASMVisit.length);

                //Render Outlet Marker and Line
                RenderOutletMarker(data.html, data.route);

                //Render Salesman Marker and Line
                RenderSalesmanMarker(data.listSMVisit, data.route);

                //Render SaleSup Marker and Line
                RenderSaleSupMarker(data.listSSVisit, data.route);

                //Render ASM Marker and Line
                RenderASMMarker(data.listASMVisit, data.route);

                UpdateMap();
            }
        });
    }

    function RenderOutletMarker(data, routeInfo) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var markerList = [];
        var latlngs = [];

        var lat = 0;
        var lng = 0;

        var text = '';
        var mlabel = '';

        for (var i = 0; i < n; i++) {
            if (data[i].ISMCP == 1) {
                if (data[i].RenderOrder != 0) {
                    mlabel = data[i].VisitOrder;
                    text = data[i].VisitOrder + '<br/><p class="real-order" style="display:inline;color:blue;z-index: 9999999999;position: absolute;background-color:#7cc1f0;">' + data[i].RenderOrder + '</p>'; //background-color:#7cc1f0;
                }
                else {
                    mlabel = data[i].VisitOrder;
                    text = data[i].VisitOrder;
                }
            }
            else {
                mlabel = data[i].strVisitInWeek;
                text = data[i].strVisitInWeek; // VisitOrder;
            }
            //else {
            //    mlabel = data[i].strVisitInWeek;
            //    text = data[i].strVisitInWeek; // VisitOrder;
            //}
            var marker = L.marker([data[i].Latitude, data[i].Longtitude], {
                icon: new placeMarker_double({
                    labelText: text//data[i].VisitOrder//
                    , labelAnchor: new L.Point(labelTextAnchor(mlabel), -1)
                    , iconUrl: '../Content/THP/markers/' + data[i].MarkerColor + '.png'
                })
            })
            .bindLabel(data[i].VisitOrder + ' - ' + data[i].OutletName, { noHide: false })//data[i].VisitOrder + ' :' + data[i].OutletID + ' - ' +
            .on('click', OutletClick);

            markerList.push(marker);

            if (data[i].ISMCP == 1) {
                if (data[i].Latitude != 0 && data[i].RenderOrder != 0) {// && data[i].RenderOrder != 0
                    latlngs.push([data[i].Latitude, data[i].Longtitude]);
                }
                mapData.LayerMarkerOutletMCP.addLayer(marker);
            }
            else {
                if (data[i].T2 == 1) {
                    mapData.LayerMarkerOutletT2.addLayer(marker);
                }
                if (data[i].T3 == 1) {
                    mapData.LayerMarkerOutletT3.addLayer(marker);
                }
                if (data[i].T4 == 1) {
                    mapData.LayerMarkerOutletT4.addLayer(marker);
                }
                if (data[i].T5 == 1) {
                    mapData.LayerMarkerOutletT5.addLayer(marker);
                }
                if (data[i].T6 == 1) {
                    mapData.LayerMarkerOutletT6.addLayer(marker);
                }
                if (data[i].T7 == 1) {
                    mapData.LayerMarkerOutletT7.addLayer(marker);
                }
                if (data[i].CN == 1) {
                    mapData.LayerMarkerOutletCN.addLayer(marker);
                }
            }

            if (data[i].Latitude != 0) {
                lat = data[i].Latitude;
                lng = data[i].Longtitude;
                mapData.LatLongBounds.push([data[i].Latitude, data[i].Longtitude]);
            }
        }

        MapPanToAndZoom([lat, lng], 16);

        //Render Route
        RenderPolyline(latlngs, routeInfo.RouteID + ' - ' + routeInfo.RouteName, StrRouteInfoPopup(routeInfo), 'blue', mapData.LayerLineOutlet); //RandomColor()
    }

    function OutletClick(e) {
        //mapData.LayerMarkerOutletMCP[1].fire('click');
        //PopupOutlet(mapData.LayerMarkerOutletMCP[1].getLatLng());
        PopupOutlet(e.latlng);
    }

    function PopupOutlet(curPos) {
        var n = mapData.listOutletInfo.length;
        for (var i = 0; i < n; i++) {
            if (mapData.listOutletInfo[i].Latitude == curPos.lat && mapData.listOutletInfo[i].Longtitude == curPos.lng) {
                Popup([mapData.listOutletInfo[i].Latitude, mapData.listOutletInfo[i].Longtitude], RenderOutletInfoPopup(mapData.listOutletInfo[i]));
                //Jquery tab for outlet popup info
                $('.header_tab').hover(function () {
                    //alert('click tab' + $(this).attr('rel'));
                    $('.content_tab').hide();
                    $('.' + $(this).attr('rel')).show();
                });
                $('.leaflet-popup-content').css("width", "auto");
                $('.content_tab').hide();
                $('.content1').show();
                //$('.content1').css("width", "auto");
                HoverZoom();

                map.addLayer(mapData.LayerMarkerOutletSMSSASM);
                map.addLayer(mapData.LayerLineOutletSMSSASM);
                break;
            }
        }
    }

    function RenderOutletInfoPopup(data) {
        map.removeLayer(mapData.LayerLineOutletSMSSASM);
        map.removeLayer(mapData.LayerMarkerOutletSMSSASM);
        mapData.LayerLineOutletSMSSASM.clearLayers();
        mapData.LayerMarkerOutletSMSSASM.clearLayers();

        var imagesCustomerUrl = '';
        //data.ImageFile = '/SFA/Outlet/images/' + data.ImageFile;//'http://eroute.thp.com.vn/SFA/SalesOrder/images/2014_05_08/1002330_SM00003512_0000520630_1399517845925.jpg';
        if (data.ImageFile != null && data.ImageFile != '') {
            imagesCustomerUrl = '<img src="' + OutletImageFolder + data.ImageFile + '" width="100px" class="hoverzoom" />';
        }
        infoHtml =
        '<div style="" >' +
        '<h3>' + data.OutletID + ' - ' + data.OutletName + '</h3>' +
        '<p><span class="alignleft">' + imagesCustomerUrl + '</span><span class="alignright" style="width: 64%;">' +
        '<strong>@Utility.Phrase("Contact")</strong>: ' + data.OutletName +
        '<br/><strong>@Utility.Phrase("Address")</strong>: ' + data.Address +
        '<br/><strong>@Utility.Phrase("Phone")</strong>: ' + data.Phone +
        '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.Latitude +
        '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.Longtitude +
        '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName +
        '<br/><strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteName +
        '<br/><strong>@Utility.Phrase("Salesman")</strong>: ' + data.SalesmanID + ' - ' + data.SalesmanName +
        '</span></p>' +
        '<br clear="all"/>';

        ////RENDER SALESMAN VISIT
        if (data.HasVisit == 1) {
            infoHtml += '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("OrderInfo")</h3>' +
            //'<strong>@Utility.Phrase("SalesmanID")</strong>: ' + data.SalesmanID +
            //'<br/><strong>@Utility.Phrase("SalesmanName")</strong>: ' + data.SalesmanName +
            //<span class="alignleft"></span><span class="alignright"></span>
                          '<strong>@Utility.Phrase("Date")</strong>: ' + data.VisitDate + '';
            var length = data.ListSMVisit.length;
            element = null;
            for (var i = 0; i < length; i++) {
                element = data.ListSMVisit[i];
                // Do something with element i.
                infoHtml += '<br/>------------------------';
                if (element.HasOrder == 1) {
                    infoHtml += '<p><span class="alignleft">' + '<img src="' + SalesOrdersImageFolder + element.ImageFile + '" width="100px" class="hoverzoom" />' + '</span><span class="alignright" style="width: 64%;">' +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("OrderCode")</strong>: ' + element.Code +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DropSize")</strong>: ' + element.DropSize +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TotalAmt")</strong>: ' + element.TotalAmt +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TotalSKU")</strong>: ' + element.TotalSKU +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SMTimeStart +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SMTimeEnd +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SMDistance + ' (m)' +
                                '</span></p><br clear="all"/>';
                }
                else if (element.HasOrder == 0) {
                    infoHtml += '<p><span class="alignleft">' + '<img src="' + SalesOrdersImageFolder + element.ImageFile + '" width="100px" class="hoverzoom" />' + '</span><span class="alignright" style="width: 64%;">' +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("OrderCode")</strong>: @Utility.Phrase("NoOrder")' +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Reason")</strong>: ' + element.Reason +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SMTimeStart +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SMTimeEnd +
                                '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SMDistance + ' (m)' +
                                '</span></p><br clear="all"/>';
                }

                //PolyLineProcess
                var latlngs = [];
                latlngs.push([data.Latitude, data.Longtitude]);
                latlngs.push([element.SMLatitude, element.SMLongitude]);
                RenderPolyline(latlngs, element.SMDistance + ' (m)', data.SalesmanName, 'black', mapData.LayerLineOutletSMSSASM);

                RenderMarker([element.SMLatitude, element.SMLongitude], '', data.SalesmanID + ' - ' + data.SalesmanName, '', 'SM', mapData.LayerMarkerOutletSMSSASM, null);
            }
            //infoHtml += '</p>';
        }
        ////##RENDER SALESMAN VISIT

        infoHtmlSSASM = '';
        ////RENDER SALESUP VISIT
        var SSVisit = data.ListSSVisit.length;
        if (SSVisit > 0) {
            infoHtmlSSASM += '<p>' +
                         '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("SaleSupVisitInfo")</h3>' +
                          '<strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName;
            element = null;
            for (var i = 0; i < SSVisit; i++) {
                element = data.ListSSVisit[i];
                // Do something with element i.
                infoHtmlSSASM += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.SUPTimeStart +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.SUPTimeEnd +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("DistanceToOutlet")</strong>: ' + element.SUPDistance + ' (m)' +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Latitude")</strong>: ' + element.SUPLatitudeStart +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Longitude")</strong>: ' + element.SUPLongtitudeStart;

                //PolyLineProcess
                var latlngs = [];
                latlngs.push([data.Latitude, data.Longtitude]);
                latlngs.push([element.SUPLatitudeStart, element.SUPLongtitudeStart]);
                RenderPolyline(latlngs, element.SUPDistance + ' (m)', data.SaleSupName, 'green', mapData.LayerLineOutletSMSSASM);

                RenderMarker([element.SUPLatitudeStart, element.SUPLongtitudeStart], '', data.SaleSupID + ' - ' + data.SaleSupName, '', 'SS', mapData.LayerMarkerOutletSMSSASM, null);
            }
            infoHtmlSSASM += '</p>';
        }
        ////##RENDER SALESUP VISIT

        ////RENDER ASM VISIT
        var ASMVisit = data.ListASMVisit.length;
        if (ASMVisit > 0) {
            infoHtmlSSASM += '<p>' +
                         '<h3 style="color:red;font-weight:bold;">@Utility.Phrase("ASMVisitInfo")</h3>' +
                          '<strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;
            element = null;
            for (var i = 0; i < ASMVisit; i++) {
                element = data.ListASMVisit[i];
                // Do something with element i.
                infoHtmlSSASM += '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeStart")</strong>: ' + element.ASMTimeStart +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("TimeEnd")</strong>: ' + element.ASMTimeEnd +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Distance")</strong>: ' + element.ASMDistance +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Latitude")</strong>: ' + element.ASMLatitudeStart + ' (m)' +
                            '<br/>&nbsp;&nbsp;<strong>@Utility.Phrase("Longitude")</strong>: ' + element.ASMLongtitudeStart;

                //PolyLineProcess
                var latlngs = [];
                latlngs.push([data.Latitude, data.Longtitude]);
                latlngs.push([element.ASMLatitudeStart, element.ASMLongtitudeStart]);

                RenderPolyline(latlngs, element.ASMDistance + ' (m)', data.ASMName, 'yellow', mapData.LayerLineOutletSMSSASM);

                RenderMarker([element.ASMLatitudeStart, element.ASMLongtitudeStart], '', data.ASMID + ' - ' + data.ASMName, '', 'ASM', mapData.LayerMarkerOutletSMSSASM, null);
            }
            infoHtmlSSASM += '</p>';
        }

        //Show tab popup info ASMSS
        if (ASMVisit > 0 || SSVisit > 0) {
            $('.header_tab2').show();
        }
        else {
            $('.header_tab2').hide();
        }

        ////##RENDER ASM VISIT
        infoHtml += '</div>';

        ////RENDER VISITIMAGE
        var infoHtmlVisitImage = '';
        var ImageVisit = data.ListVisitImage.length;
        if (ImageVisit > 0) {
            infoHtmlVisitImage += '';
            element = null;
            for (var i = 0; i < ImageVisit; i++) {
                element = data.ListVisitImage[i];
                infoHtmlVisitImage +=
                    '<div style="float: left; width: 100px; margin-right: 5px; border: .5px solid #bbb;" >' +
                        '<span style="float: left; width: 100%; text-align: center; color: blue;">' + element.strVisitDate + '</span>' +
                        '<img src="' + SalesOrdersImageFolder + element.ImageFile + '" width="100%;" class="hoverzoom" />' +
                    '</div>';
            }
        }
        ////####RENDER VISITIMAGE

        $('.content1').html(infoHtml);
        $('.content2').html(infoHtmlSSASM);
        $('.content3').html(infoHtmlVisitImage);



        return $("#data_popup").html();
    }
    //-----------------END Outlet Render-----------------//

    //-----------------Route Render-----------------//
    function StrRouteInfoPopup(routeInfo) {
        infoHtml = '<h3>' + routeInfo.RouteID + ' - ' + routeInfo.RouteName + '</h3>' +
               '<strong>@Utility.Phrase("Salesman")</strong>: ' + routeInfo.SalesmanID + ' - ' + routeInfo.SalesmanName +
               '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + routeInfo.DistributorCode + ' - ' + routeInfo.DistributorName +
               '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName +
               '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + routeInfo.ASMID + ' - ' + routeInfo.ASMName +
               '<br/><strong>@Utility.Phrase("OutletInRoute")</strong>: ' + routeInfo.OutletInRoute +
               '<br/><strong>@Utility.Phrase("OutletInSubRoute")</strong>: ' + routeInfo.OutletInSubRoute +
        //                       '<br/><strong>------------------------@Utility.Phrase("IsMCP")Đúng tuyến</strong>' +
        //                       '<br/><strong>@Utility.Phrase("OutletVisited")</strong>: ' + routeInfo.OutletVisited +
        //                       '<br/><strong>@Utility.Phrase("OutletHasOrder")</strong>: ' + routeInfo.OutletHasOrder +
        //                       '<br/><strong>@Utility.Phrase("OrderCount")</strong>: ' + routeInfo.OrderCount +
        //                       '<br/><strong>@Utility.Phrase("TotalSKU")</strong>: ' + routeInfo.TotalSKU +
        //                       '<br/><strong>@Utility.Phrase("LPPC")</strong>: ' + routeInfo.LPPC +
        //                       '<br/><strong>@Utility.Phrase("TotalAmount")</strong>: ' + routeInfo.TotalAmount +
        //                       '<br/><strong>@Utility.Phrase("TotalQuantity")</strong>: ' + routeInfo.TotalQuantity +
        //                       '<br/><strong>------------------------@Utility.Phrase("NotMCP")</strong>' +
        //                       '<br/><strong>@Utility.Phrase("OutletVisited")</strong>: ' + routeInfo.OutletVisited +
        //                       '<br/><strong>@Utility.Phrase("OutletHasOrder")</strong>: ' + routeInfo.OutletHasOrder +
        //                       '<br/><strong>@Utility.Phrase("OrderCount")</strong>: ' + routeInfo.OrderCount +
        //                       '<br/><strong>@Utility.Phrase("TotalSKU")</strong>: ' + routeInfo.TotalSKU +
        //                       '<br/><strong>@Utility.Phrase("LPPC")</strong>: ' + routeInfo.LPPC +
        //                       '<br/><strong>@Utility.Phrase("TotalAmount")</strong>: ' + routeInfo.TotalAmount +
        //                       '<br/><strong>@Utility.Phrase("TotalQuantity")</strong>: ' + routeInfo.TotalQuantity +
               '<br/>';
        return infoHtml;
    }

    function GetRoute(routeCD, distributorID, regionID, areaID) {
        //GetParam();
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/GetRouteByUser', //Your form processing file url
            data: { routeCD: routeCD, distributorID: distributorID, regionID: regionID, areaID: areaID }, //Forms name
            dataType: 'json',
            success: function (data) {
                if (data != null) {
                    //ClearMap();
                    mapData.listRouteRender = mapData.listRouteRender.concat(data.html);
                    RenderRouteSelectedByUser();
                }
            }
        });
    }

    function RenderRouteSelectedByUser() {
        if (mapData.listRouteRender != null) {
            var n = mapData.listRouteRender.length;
            for (var i = 0; i < n; i++) {
                //WriteLog('RenderRouteSelectedByUser ' + mapData.listRouteRender[i].RouteID + ' ' + mapData.listRouteRender[i].DistributorID.toString());
                RenderOutletByRoute(mapData.listRouteRender[i].RouteID, '', mapData.listRouteRender[i].DistributorID);
            }
            UpdateMap();
        }
    }
    //-----------------END Route Render-----------------//

    //-----------------Salesman Render-----------------//
    function RenderSalesmanMarker(data, routeInfo) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var latlngs = [];

        for (var i = 0; i < n; i++) {
            RenderMarker([data[i].SMLatitude, data[i].SMLongitude], (i + 1).toString(), data[i].SMTimeStart + ' - ' + data[i].SMTimeEnd, routeInfo.SalesmanID + ' - ' + routeInfo.SalesmanName, 'SM', mapData.LayerMarkerSM, null);

            if (data[i].SMLatitude != 0) {
                latlngs.push([data[i].SMLatitude, data[i].SMLongitude]);
            }
        }

        //Render Route
        RenderPolyline(latlngs, '', '', 'black', mapData.LayerLineSM);

        //Set View
        MapPanToAndZoom([data[n - 1].SMLatitude, data[n - 1].SMLongitude], 16);
    }
    //-----------------END Salesman Render-----------------//

    //-----------------SaleSup Render-----------------//
    function RenderSaleSupMarker(data, routeInfo) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var latlngs = [];

        for (var i = 0; i < n; i++) {
            RenderMarker([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart], (i + 1).toString(), data[i].SUPTimeStart + ' - ' + data[i].SUPTimeEnd, routeInfo.SaleSupID + ' - ' + routeInfo.SaleSupName, 'SS', mapData.LayerMarkerSS, null);

            if (data[i].SUPLatitudeStart != 0) {
                latlngs.push([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart]);
            }
        }

        //Render Route
        RenderPolyline(latlngs, '', '', 'green', mapData.LayerLineSS);
    }
    //-----------------END SaleSup Render-----------------//

    //-----------------ASM Render-----------------//
    function RenderASMMarker(data, routeInfo) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var latlngs = [];

        for (var i = 0; i < n; i++) {
            RenderMarker([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart], (i + 1).toString(), data[i].ASMTimeStart + ' - ' + data[i].ASMTimeEnd, routeInfo.ASMID + ' - ' + routeInfo.ASMName, 'ASM', mapData.LayerMarkerASM, null);

            if (data[i].ASMLatitudeStart != 0) {
                latlngs.push([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart]);
            }
        }

        //Render Route
        RenderPolyline(latlngs, '', '', 'yellow', mapData.LayerLineASM);
    }
    //-----------------END ASM Render-----------------//

    function LoadSalesman() {
        $("#loading").show();
        window.location = '@Url.Action("TerritoryPerformance","Tracking")' + '?strVisitDate=' + $('input[name="strFromDate"]').val();
        //GetParam();
        //                $.ajax({
        //                    url: '@Url.Action("LoadSalesman", "Tracking")',
        //                    type: "post",
        //                    data: { DistributorID: distributorIDSelected, strVisitDate: strVisitDate },
        //                    success: function (data) {
        //                        if (data != null) {
        //                            $('#checkBoxSM').html(data.html);
        //                            ToggleListSM();
        //                        }
        //                        else {
        //                            alert('Không hợp lệ');
        //                        }
        //                    },
        //                    error: function () {
        //                    }
        //                });
    };

    function ToggleListSM() {
        if (typeof listSM === "undefined")
            return false;

        if (checkAll.GetChecked()) {
            listSM.SelectAll();
        }
        else {
            listSM.UnselectAll();
        }
    };

    //-----------------SalesmanLastLocation Render-----------------//
    function GetSalesmanLastLocation() {
        //GetParam();
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/RenderListSMLastLocation', //Your form processing file url
            data: { strSMSelected: listSMSelected, distributorID: distributorIDSelected, salesSupID: salesupIDSelected, strVisitDate: strVisitDate }, //Forms name
            dataType: 'json',
            success: function (data) {
                //Clear data and layer
                mapData.listSMLastLocationInfo = [];
                mapData.LayerMarkerSMLastLocation.clearLayers();

                MapShowHideLayer(mapData.LayerMarkerSMLastLocation, false, true);

                mapData.listSMLastLocationInfo = mapData.listSMLastLocationInfo.concat(data.html);
                RenderSalesmanLastLocation(data.html);
            }
        });
    }

    function RenderSalesmanLastLocation(data) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;

        var SMlat = 0.0;
        var SMlng = 0.0;

        var lat = 0.0;
        var lng = 0.0;

        for (var i = 0; i < n; i++) {
            SMlat = 0.0;
            SMlng = 0.0;
            var label = data[i].SalesmanID + ' - ' + data[i].SalesmanName;
            if (data[i].ASMWW == 1 || data[i].SUPWW == 1) {
                label += ' (WW)';
            }

            if ($('#VisitLast').is(':checked')) {
                if (data[i].VisitTime != null) {
                    SMlat = data[i].Latitude;
                    SMlng = data[i].Longtitude;
                }
            }
            else if ($('#SyncDataFirst').is(':checked')) {
                if (data[i].FirstSyncTime != null) {
                    SMlat = data[i].FirstLatitudeSync;
                    SMlng = data[i].FirstLongtitudeSync;
                }
            }
            else if ($('#SyncDataLast').is(':checked')) {
                if (data[i].LastSyncTime != null) {
                    SMlat = data[i].LastLatitudeSync;
                    SMlng = data[i].LastLongtitudeSync;
                }
            }

            var m = RenderMarker([SMlat, SMlng], '', data[i].SalesmanID + ' - ' + data[i].SalesmanName, StrSalesmanLastLocationPopup(data[i]), 'SM', mapData.LayerMarkerSMLastLocation, null, true);
            //mapData.markers.addLayer(m);

            if (SMlat != 0) {
                lat = SMlat;
                lng = SMlng;
            }
        }
        MapShowHideLayer(mapData.LayerMarkerSMLastLocation, true, true);

        MapPanToAndZoom([lat, lng], 16);
    }

    function StrSalesmanLastLocationPopup(data) {
        infoHtml = '<h3>@Utility.Phrase("Salesman"): ' + data.SalesmanID + ' - ' + data.SalesmanName + '</h3>';
        infoHtml += '<strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteID;
        infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName;

        if (data.SUPWW == 1) {
            infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName + ' (WW)';
        }
        else {
            infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SaleSupID + ' - ' + data.SaleSupName;
        }

        if (data.ASMWW == 1) {
            infoHtml += '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName + ' (WW)';
        }
        else {
            infoHtml += '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;
        }

        if (data.FirstSyncTime != null) {
            infoHtml += '<br/><strong>-------------@Utility.Phrase("SMFirstSyncTimeInfo")-----------</strong>';
            infoHtml += '<br/><strong>@Utility.Phrase("FirstSyncTime")</strong>: ' + data.strFirstSyncTime;
            infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.FirstDistance + ' (m)';
            infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.FirstLatitudeSync;
            infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.FirstLongtitudeSync;
        }

        if (data.LastSyncTime != null) {
            infoHtml += '<br/><strong>-------------@Utility.Phrase("SMLastSyncTimeInfo")-----------</strong>';
            infoHtml += '<br/><strong>@Utility.Phrase("LastSyncTime")</strong>: ' + data.strLastSyncTime;
            infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.LastDistance + ' (m)';
            infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.LastLatitudeSync;
            infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.LastLongtitudeSync;
        }

        infoHtml += '<br/><strong>-------------@Utility.Phrase("SMLastVisitInfo")-----------</strong>';
        infoHtml += '<br/><strong>@Utility.Phrase("OutletLastVisit")</strong>: ' + data.OutletID + ' - ' + data.OutletName;
        infoHtml += '<br/><strong>@Utility.Phrase("VisitTime")</strong>: ' + data.VisitTime;
        infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.Distance + ' (m)';
        infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.Latitude;
        infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.Longtitude;
        infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="RenderOutletByRoute(\'' + data.RouteID + '\',\'\',\'' + data.DistributorID + '\',\'\',\'\');" />';
        infoHtml += '<br/>';

        //infoHtml += '<br/>' + $('#chart').html();
        return infoHtml;
    }
    //-----------------END SalesmanLastLocation Render-----------------//

    //-----------------SaleSupLastLocation Render-----------------//
    function GetSaleSupLastLocation() {
        //GetParam();
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/RenderListSSLastLocation', //Your form processing file url
            data: { regionID: regionIDSelected, areaID: areaIDSelected, salesupID: salesupIDSelected, distributorID: distributorIDSelected, strVisitDate: strVisitDate }, //Forms name
            dataType: 'json',
            success: function (data) {
                //Clear data and layer
                mapData.listSSLastLocationInfo = [];
                mapData.LayerMarkerSSLastLocation.clearLayers();

                MapShowHideLayer(mapData.LayerMarkerSSLastLocation, false, true);

                mapData.listSSLastLocationInfo = mapData.listSSLastLocationInfo.concat(data.html);
                RenderSaleSupLastLocation(data.html);
            }
        });
    }

    function RenderSaleSupLastLocation(data) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var lat = 0;
        var lng = 0;

        for (var i = 0; i < n; i++) {
            var label = data[i].SaleSupID + ' - ' + data[i].SaleSupName;
            if (data[i].WW == 1) {
                label += ' (WW)';
            }

            var m = RenderMarker([data[i].SUPLatitudeStart, data[i].SUPLongtitudeStart], '', label, StrSaleSupLastLocationPopup(data[i]), 'SS', mapData.LayerMarkerSSLastLocation, null, true);
            //mapData.markers.addLayer(m);

            if (data[i].SUPLatitudeStart != 0) {
                lat = data[i].SUPLatitudeStart;
                lng = data[i].SUPLongtitudeStart;
            }
        }
        MapShowHideLayer(mapData.LayerMarkerSSLastLocation, true, true);

        MapPanToAndZoom([lat, lng], 16);
    }

    function StrSaleSupLastLocationPopup(data) {
        infoHtml = '<h3>@Utility.Phrase("SaleSup"): ' + data.SaleSupID + ' - ' + data.SaleSupName + '</h3>' +
               '<strong>@Utility.Phrase("Area")</strong>: ' + data.AreaID + ' - ' + data.AreaName +
               '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;

        if (data.WW == 1) {
            infoHtml += '<br/><strong>@Utility.Phrase("WWInfo"): </strong>';
            infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName;
            infoHtml += '<br/><strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteName;
            infoHtml += '<br/><strong>@Utility.Phrase("Salesman")</strong>: ' + data.SalesmanID + ' - ' + data.SalesmanName;
            infoHtml += '<br/><strong>@Utility.Phrase("Time")</strong>: ' + data.SUPTimeStart;
            infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.SUPDistance + ' (m)';
            infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.SUPLatitudeStart;
            infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.SUPLongtitudeStart;
            infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="$(\'#MarkerSS\').attr(\'checked\', \'checked\'); $(\'#LineSS\').attr(\'checked\', \'checked\'); RenderOutletByRoute(\'' + data.RouteID + '\',\'\',\'' + data.DistributorID + '\',\'\',\'\');" /><input type="button" value="@Utility.Phrase("ViewSalesman")" onclick="SSPopupClick(\'' + data.SaleSupID + '\');" />';
        }

        infoHtml += '<br/>';
        return infoHtml;
    }
    //-----------------END SaleSupLastLocation Render-----------------//

    //-----------------ASMLastLocation Render-----------------//
    function GetASMLastLocation() {
        //GetParam();
        $.ajax({ //ProceASM the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/RenderListASMLastLocation', //Your form proceASMing file url
            data: { regionID: regionIDSelected, areaID: areaIDSelected, strVisitDate: strVisitDate }, //Forms name
            dataType: 'json',
            success: function (data) {
                //Clear data and layer
                mapData.listASMLastLocationInfo = [];
                mapData.LayerMarkerASMLastLocation.clearLayers();
                MapShowHideLayer(mapData.LayerMarkerASMLastLocation, false, true);

                mapData.listASMLastLocationInfo = mapData.listASMLastLocationInfo.concat(data.html);
                RenderASMLastLocation(data.html);
            }
        });
    }

    function RenderASMLastLocation(data) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var lat = 0;
        var lng = 0;

        for (var i = 0; i < n; i++) {
            var label = data[i].ASMID + ' - ' + data[i].ASMName;
            if (data[i].WW == 1) {
                label += ' (WW)';
            }

            var m = RenderMarker([data[i].ASMLatitudeStart, data[i].ASMLongtitudeStart], '', label, StrASMLastLocationPopup(data[i]), 'ASM', mapData.LayerMarkerASMLastLocation, null, true);
            //mapData.markers.addLayer(m);

            if (data[i].ASMLatitudeStart != 0) {
                lat = data[i].ASMLatitudeStart;
                lng = data[i].ASMLongtitudeStart;
            }
        }
        MapShowHideLayer(mapData.LayerMarkerASMLastLocation, true, true);

        MapPanToAndZoom([lat, lng], 16);
    }

    function StrASMLastLocationPopup(data) {
        infoHtml = '<h3>@Utility.Phrase("ASM"): ' + data.ASMID + ' - ' + data.ASMName + '</h3>' +
               '<strong>@Utility.Phrase("Area")</strong>: ' + data.AreaID + ' - ' + data.AreaName;

        if (data.WW == 1) {
            infoHtml += '<br/><strong>@Utility.Phrase("WWInfo"): </strong>';
            infoHtml += '<br/><strong>@Utility.Phrase("SaleSup")</strong>: ' + data.SalesSupID + ' - ' + data.SalesSupName;
            infoHtml += '<br/><strong>@Utility.Phrase("Distributor")</strong>: ' + data.DistributorCode + ' - ' + data.DistributorName;
            infoHtml += '<br/><strong>@Utility.Phrase("Route")</strong>: ' + data.RouteID + ' - ' + data.RouteName;
            infoHtml += '<br/><strong>@Utility.Phrase("Salesman")</strong>: ' + data.SalesmanID + ' - ' + data.SalesmanName;
            infoHtml += '<br/><strong>@Utility.Phrase("Time")</strong>: ' + data.ASMTimeStart;
            infoHtml += '<br/><strong>@Utility.Phrase("Distance")</strong>: ' + data.ASMDistance + ' (m)';
            infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.ASMLatitudeStart;
            infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.ASMLongtitudeStart;
            infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewLocation")" onclick="$(\'#MarkerASM\').attr(\'checked\', \'checked\'); $(\'#LineASM\').attr(\'checked\', \'checked\'); RenderOutletByRoute(\'' + data.RouteID + '\',\'\',\'' + data.DistributorID + '\',\'\',\'\');" /><input type="button" value="@Utility.Phrase("ViewSaleSup")" onclick="ASMPopupClick(\'' + data.AreaID + '\');" />';
        }

        infoHtml += '<br/>';
        return infoHtml;
    }
    //-----------------END ASMLastLocation Render-----------------//

    //-----------------DistributorLocation Render-----------------//
    function GetDistributorLocation() {
        //GetParam();
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/RenderListDistributorLocation', //Your form processing file url
            data: { regionID: regionIDSelected, areaID: areaIDSelected, salesupID: salesupIDSelected, distributorID: distributorIDSelected, strVisitDate: strVisitDate }, //Forms name
            dataType: 'json',
            success: function (data) {
                //Clear data and layer
                mapData.listDistributorInfo = [];
                mapData.LayerMarkerDistributor.clearLayers();

                MapShowHideLayer(mapData.LayerMarkerDistributor, false, true);

                mapData.listDistributorInfo = mapData.listDistributorInfo.concat(data.html);
                RenderDistributorLocation(data.html);
            }
        });
    }

    function RenderDistributorLocation(data) {
        if (data == null)
            return false;
        var n = data.length;
        if (n == 0)
            return false;
        var lat = 0;
        var lng = 0;

        for (var i = 0; i < n; i++) {
            var m = RenderMarker([data[i].LatitudeBase, data[i].LongtitudeBase], '', data[i].DistributorName, StrDistributorLocationPopup(data[i]), 'Distributor', mapData.LayerMarkerDistributor, null, true);
            //latlng, number, label, popup, icon, layer1, layer2, labelNoHide
            //mapData.markers.addLayer(m);

            if (data[i].LatitudeBase != 0) {
                lat = data[i].LatitudeBase;
                lng = data[i].LongtitudeBase;
            }
        }
        MapShowHideLayer(mapData.LayerMarkerDistributor, true, true);

        MapPanToAndZoom([lat, lng], 16);
    }

    function StrDistributorLocationPopup(data) {
        infoHtml = '<h3>@Utility.Phrase("Distributor"): ' + data.DistributorCode + ' - ' + data.DistributorName + '</h3>' +
               '<strong>@Utility.Phrase("Area")</strong>: ' + data.AreaID + ' - ' + data.AreaName +
               '<br/><strong>@Utility.Phrase("ASM")</strong>: ' + data.ASMID + ' - ' + data.ASMName;
        infoHtml += '<br/><strong>@Utility.Phrase("Address")</strong>: ' + data.Address;
        infoHtml += '<br/><strong>@Utility.Phrase("Phone")</strong>: ' + data.Phone1;
        infoHtml += '<br/><strong>@Utility.Phrase("Email")</strong>: ' + data.Email;
        infoHtml += '<br/><strong>@Utility.Phrase("Latitude")</strong>: ' + data.LatitudeBase;
        infoHtml += '<br/><strong>@Utility.Phrase("Longtitude")</strong>: ' + data.LongtitudeBase;
        infoHtml += '<br/><br/><input type="button" value="@Utility.Phrase("ViewSalesman")" onclick="DistributorPopupClick(\'' + data.DistributorID + '\');" />';

        infoHtml += '<br/>';
        return infoHtml;
    }
    //-----------------END DistributorLocation Render-----------------//
    //-----------------ReportSalesAssessment Render-----------------//
    function ToogleSalesAssessment() {
        if ($("#cbtbSalesAssessment").is(':checked')) {
            $(".list-search").show();
        }
        else {
            $(".list-search").hide();
        }
    }

    function ReportSalesAssessment(groupby) {
        //ClearReportSalesAssessment();
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/AJAXReportSalesAssessment', //Your form processing file url
            data: { regionID: regionIDSelected, areaID: areaIDSelected, salesupID: salesupIDSelected, distributorID: distributorIDSelected, strVisitDate: strVisitDate, salesmanID: listSMSelected, groupby: groupby, branchID: '', routeCD: '' }, //Forms name
            dataType: 'json',
            success: function (data) {
                if (data != null) {
                    ShowReportSalesAssessment(data);
                    //alert(data.length);
                }
            }
        });
    }

    //ShowReportSalesAssessment
    function ShowReportSalesAssessment(data) {
        $('#divVisitInfo').html('');
        if (data != null) {
            if (data.list != null && data.list.length > 0) {
                var index = data.list.length;
                var strTB = '';
                strTB += '<table class="visitInfoTable" cellpadding="0" cellspacing="0" >';
                strTB += '<thead>';
                strTB += '<tr>';
                @*strTB += '<th>@Utility.Phrase("Code")</th>';*@
                strTB += '<th style="width: 140px">@Utility.Phrase("Name")</th>';
                strTB += '<th >@Utility.Phrase("OutletMustVisit")</th>';
                strTB += '<th >@Utility.Phrase("OutletVisited")</th>';
                strTB += '<th >@Utility.Phrase("OrderCount")</th>';
                strTB += '<th >@Utility.Phrase("TotalSKU")</th>';
                strTB += '<th >@Utility.Phrase("LPPC")</th>';
                strTB += '<th >@Utility.Phrase("SOMCP")</th>';
                strTB += '<th >@Utility.Phrase("VisitMCP")</th>';
                strTB += '<th style="width: 80px">@Utility.Phrase("TotalQuantity")</th>';
                strTB += '<th >@Utility.Phrase("TotalAmount")</th>';
                strTB += '</tr>';
                strTB += '</thead>';
                strTB += '<tbody>';

                for (var i = 0; i < index; i++) {
                    strTB += '<tr>';
                    //strTB += '<td>' + data.list[i].Code + '</td>';
                    strTB += '<td style="width: 140px">' + data.list[i].Name + '</td>';
                    strTB += '<td>' + data.list[i].strOutletMustVisit + '</td>';
                    strTB += '<td>' + data.list[i].strOutletVisited + '</td>';
                    strTB += '<td>' + data.list[i].strOrderCount + '</td>';
                    strTB += '<td>' + parseInt(data.list[i].strTotalSKU) + '</td>';
                    strTB += '<td>' + data.list[i].strLPPC + '</td>';
                    strTB += '<td>' + data.list[i].strSOMCP + '</td>';
                    strTB += '<td>' + data.list[i].strVisitMCP + '</td>';
                    strTB += '<td style="width: 80px">' + parseInt(data.list[i].strTotalQuantity) + '</td>';
                    strTB += '<td>' + data.list[i].strTotalAmount + '</td>';
                    strTB += '</tr>';
                }

                strTB += '</tbody>';
                strTB += '</table>';
                $('#divVisitInfo').html(strTB);
            }
        }
    }
    //-----------------END ReportSalesAssessment Render-----------------//


    function ASMPopupClick(areaID) {
        mapData.LatLongBounds = [];
        areaIDSelected = areaID;
        GetSaleSupLastLocation();
        ReportSalesAssessment('Distributor');
    }

    function SSPopupClick(ssID) {
        mapData.LatLongBounds = [];
        salesupIDSelected = ssID;
        GetSalesmanLastLocation();
        ReportSalesAssessment('Salesman');
    }

    function DistributorPopupClick(ID) {
        mapData.LatLongBounds = [];
        distributorIDSelected = ID;
        GetSalesmanLastLocation();
        ReportSalesAssessment('Salesman');
    }

    function RenderSMSync() {
        //ViewInfoSelected();
        mapData.LatLongBounds = [];
        if (listSMSelected != '') {
            //alert(listSMSelected + ' - ' + distributorIDSelected);
            if ($('#VisitLast').is(':checked')) {
                RenderOutletByRoute('', listSMSelected, distributorIDSelected);
            }
            else {
                GetSalesmanLastLocation();
            }
            //GetDistributorLocation();
            //GetSalesmanLastLocation();
            ReportSalesAssessment('Salesman');
        }
        else if (distributorIDSelected != 0) {
            GetSaleSupLastLocation();
            GetDistributorLocation();
            GetSalesmanLastLocation();
            ReportSalesAssessment('Salesman');
        }
        else if (salesupIDSelected != '') {
            GetSaleSupLastLocation();
            GetDistributorLocation();
            GetSalesmanLastLocation();
            ReportSalesAssessment('Salesman');
        }
    }

    function GetParam() {
        strVisitDate = $('input[name="strFromDate"]').val();

        //                listSMSelected = '';
        //                if (typeof listSM != "undefined") {
        //                    var a = listSM.GetSelectedValues();
        //                    var n = a.length;
        //                    for (var i = 0; i < n; i++) {
        //                        listSMSelected += a[i] + ',';
        //                    }
        //                }

        //                distributorIDSelected = DistributorID.GetValue() == null ? 0 : DistributorID.GetValue();
        //                regionIDSelected = RegionID.GetValue() == null ? '' : RegionID.GetValue();
        //                areaIDSelected = AreaID.GetValue() == null ? '' : AreaID.GetValue();
        //                salesupIDSelected = SalesSupID.GetValue() == null ? '' : SalesSupID.GetValue();

        //listSMSelected = '';
        $.ajax({ //Process the form using $.ajax()
            type: 'POST', //Method type
            url: '/Tracking/TerritoryTreeViewSelected', //Your form processing file url
            data: { itemId: itemId }, //Forms name
            dataType: 'json',
            success: function (data) {
                listSMSelected = data.listSMSelected;
                distributorIDSelected = data.distributorIDSelected;
                regionIDSelected = data.regionIDSelected;
                areaIDSelected = data.areaIDSelected;
                salesupIDSelected = data.salesupIDSelected;

                //                        $("#itemId").html(itemId);
                //                        $("#regionIDSelected").html(regionIDSelected);
                //                        $("#areaIDSelected").html(areaIDSelected);
                //                        $("#distributorIDSelected").html(distributorIDSelected);
                //                        $("#salesupIDSelected").html(salesupIDSelected);
                //                        $("#listSMSelected").html(listSMSelected);

                //Region
                //Area
                //SaleSup
                //Route
                //Distributor

                if (listSMSelected != '') {
                    //alert(listSMSelected + ' - ' + distributorIDSelected);
                    if ($('#VisitLast').is(':checked')) {
                        RenderOutletByRoute('', listSMSelected, distributorIDSelected);
                    }
                    else {
                        GetSalesmanLastLocation();
                    }
                    //GetDistributorLocation();
                    //GetSalesmanLastLocation();
                    ReportSalesAssessment('Salesman');
                }
                else if (distributorIDSelected != 0) {
                    GetSaleSupLastLocation();
                    GetDistributorLocation();
                    GetSalesmanLastLocation();
                    ReportSalesAssessment('Salesman');
                }
                else if (salesupIDSelected != '') {
                    GetSaleSupLastLocation();
                    GetDistributorLocation();
                    GetSalesmanLastLocation();
                    ReportSalesAssessment('Salesman');
                }
                else if (areaIDSelected != '') {
                    GetSaleSupLastLocation();
                    GetDistributorLocation();
                    GetASMLastLocation();
                    ReportSalesAssessment('Distributor');
                }
                else if (regionIDSelected != '') {
                    GetDistributorLocation();
                    GetASMLastLocation();
                    ReportSalesAssessment('Area');
                }
            }
        });
    }

    function ViewInfoSelected() {
        ClearMap();
        GetParam();

        //                if (listSMSelected != '') {
        //                    //alert(listSMSelected + ' - ' + distributorIDSelected);
        //                    RenderOutletByRoute(listSMSelected, distributorIDSelected);
        //                }
        //                else if (distributorIDSelected != 0) {
        //                    GetSaleSupLastLocation();
        //                    GetSalesmanLastLocation();
        //                }
        //                else if (salesupIDSelected != '') {
        //                    GetSaleSupLastLocation();
        //                    GetSalesmanLastLocation();
        //                }
        //                else if (areaIDSelected != '') {
        //                    GetSaleSupLastLocation();
        //                    GetASMLastLocation();
        //                }
        //                else if (regionIDSelected != '') {
        //                    GetASMLastLocation();
        //                }
    }

    function Back() {
        window.location = '@Url.Action("Index", "Home")';
    }

    function HoverZoom() {
        //                $('.hoverzoom').mouseover(function () {
        //                    $(this).css("cursor", "pointer");
        //                    //$(this).css("width", "");
        //                    // Get on screen image
        //                    var screenImage = $(this);

        //                    // Create new offscreen image to test
        //                    var theImage = new Image();
        //                    theImage.src = screenImage.attr("src");

        //                    // Get accurate measurements from that.
        //                    var imageWidth = theImage.width;
        //                    //$(this).css("position", "absolute");
        //                    $(this).addClass("imghoverzoom");
        //                    $(this).css("width", imageWidth);

        //                });
        //
        //                $('.hoverzoom').mouseout(function() {
        //                    $(this).removeClass("imghoverzoom");
        //                    $(this).css("width", "100px");
        //                });
    }

    //            $(".dateInput").datepicker({
    //                dateFormat: 'dd-mm-yy'
    //            })
    //            .change(function () {
    //            });

    //$('.number').priceFormat({
    //    prefix: '',
    //    centsSeparator: '.',
    //    thousandsSeparator: ',',
    //    centsLimit: 0
    //});
    $('.number').css("text-align", "right");

    $(document).ajaxStart(function () {
        $("#loading").show();
    });
    $(document).ajaxStop(function () {
        $("#loading").hide();
    });
    $(document).ajaxError(function () {
        //alert("ajax có vấn đề");
    });

    $('#btnSearch').click(function () {
            window.location = '@Url.Action("TerritoryPerformance", "Tracking")' + '?strVisitDate=' + $('input[name="strFromDate"]').val() + '&strSearch=' + $('#txtSearch').val();
    });

    var strSearch = window.location.href;
    if (strSearch.indexOf("strSearch=") != -1) {
        treeView.ExpandAll();
    }

        </script>
        @*<script type="text/javascript" src="@Url.Action("GetTerritory", "Tracking")"></script>*@
    </div>
    <div id="loading" class="loading">
    </div>
</body>
</html>
