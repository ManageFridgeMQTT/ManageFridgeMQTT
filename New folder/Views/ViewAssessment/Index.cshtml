

@{
    ViewBag.Title = Utility.Phrase("ViewAssessment");
    Layout = "~/Views/Shared/_NewLayout.cshtml";
}
@model Hammer.Models.ViewAssessmentModel
<script type="text/javascript">    

    function EmployeeID_BeginCallback(s, e) {
        var date = ( FromDate.GetValue().getMonth() + 1) + '/'+ FromDate.GetValue().getDate() + '/' + FromDate.GetValue().getFullYear();
        e.customArgs['FromDate'] = date;
        //alert(HasTraining.GetValue());
        e.customArgs['HasTraining'] = HasTraining.GetValue();
    }
    function UniqueID_BeginCallback(s, e) {
        var date = (FromDate.GetValue().getMonth() + 1) + '/' + FromDate.GetValue().getDate() + '/' + FromDate.GetValue().getFullYear();
        e.customArgs['FromDate'] = date;
        //alert(HasTraining.GetValue());
        e.customArgs['HasTraining'] = HasTraining.GetValue();
        e.customArgs['EmployeeID'] = EmployeeID.GetValue();
    }
    function submitProcessSchedule(form) {
        //LoadingPanel.Show();
        var data = $(form).serialize();
        $.ajax({
            url: 'ProcessSchedule',
            data: data,
            type: 'POST',
            success: function (response) {
                //  LoadingPanel.Hide();
                renderExportExcelButton();
                $('#prepareScheduleContent').html(response);
                $('#action').css('display', '');
            },
            error: function (err) {
                //alert(err);
            }
        });
        return false;
    }
    function renderExportExcelButton() {
        var data = 'scheduleType';
        $.ajax({
            url: 'ExportExcelPartialView',
            data: data,
            type: 'POST',
            success: function (response) {
                $('#action').html(response);
            },
            error: function (err) {
                //alert(err);
            }
        });
    }
    function chcb_SelectedIndexChanged(s, e) {        
        //EmployeeID.SetValue("");
        EmployeeID.PerformCallback();
        //UniqueID.SetValue("");
        UniqueID.PerformCallback();
    }
</script>

<div class="insider">
     <div id="loading" class="loading"></div>


    <div class="row display-table w-100pr mb-10 content-header">
    <div class="report-content-header">
        <div class="col-sm-8">
            <h1>@Utility.Phrase("ViewAssessment")</h1>
        </div>
    </div>                      
                   
                   
             @using (Ajax.BeginForm("ProcessSchedule", "ViewAssessment",
            new AjaxOptions
            {
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "prepareScheduleContent"
            }, new { id = "frmProcessSchedule", onsubmit = "return submitProcessSchedule(this);" }
                ))
                {
                        <div class="item fl">                         
                        <div class="input-group">           
                            <div >
                               
                                 @Html.DevExpress().RadioButtonListFor(m => m.HasTraining, rd =>
                                {
                                    rd.Name = "HasTraining";
                                    rd.Properties.Items.Add(Utility.Phrase("Training"), true);
                                    rd.Properties.Items.Add(Utility.Phrase("NotTraning"), false);
                                    rd.Properties.RepeatColumns = 2;
                                    rd.Properties.ClientSideEvents.SelectedIndexChanged = "chcb_SelectedIndexChanged";
                                    rd.ControlStyle.CssClass = "no-selected item-border-none";
                                    //rd.Properties.RadioButtonStyle.CssClass = "border-none";
                                    
                                   // rd.Properties.ClientSideEvents.ValueChanged = "HasTraning_ValueChanged";
                                }).GetHtml()

                            </div>
                        </div>
                     </div>
                        <div class="item fl required">
                           <label for="display" class="fl"> @Utility.Phrase("Date")</label>
                        <div class="input-group">           
                            <div >
                                @Html.DevExpress().DateEditFor(model => model.FromDate, dateEdit =>
                        {
                            dateEdit.Name = "FromDate";
                            dateEdit.Properties.AllowUserInput = false;
                            dateEdit.Date = DateTime.Now.Date;
                            dateEdit.Properties.ClientSideEvents.DateChanged = "function(s, e) { EmployeeID.PerformCallback();}";       
                                          
                        }).GetHtml()

                                @*@Html.DevExpress().ComboBox(
                        settings =>
                        {
                            settings.Name = "RegionID";
                            settings.CallbackRouteValues = new { Controller = "ViewAssessment", Action = "ComboBoxPartialRegion" };
                            //settings.Width = System.Web.UI.WebControls.Unit.Percentage(105);                         
                            settings.Properties.AllowMouseWheel = true;
                            settings.Properties.TextFormatString = "{0}";
                            settings.Properties.ValueField = "RegionID";
                            settings.Properties.ValueType = typeof(string);
                            settings.ShowModelErrors = true;
                            settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                            settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                            settings.Properties.Columns.Add("RegionID", Utility.Phrase("RegionID"), 110);                         
                            settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { AreaID.PerformCallback(); EmployeeID.PerformCallback()}";
                            settings.PreRender = (sender, e) =>
                            {
                                MVCxComboBox cmb = sender as MVCxComboBox;
                                if (string.IsNullOrEmpty(Model.regionID))
                                {
                                    cmb.Value = Model.regionID;
                                }
                            };
                        }
                             ).BindList(Model.ListRegion).Bind(Model.regionID).GetHtml()*@

                            </div>
                        </div>
                     </div>
                        <div class="item fl required">
                         <label for="display" class="fl">@Utility.Phrase("Employee")</label>
                        <div class="input-group">           
                            <div class="input-group-btn">                               
                                 @Html.DevExpress().ComboBox(
                        settings =>
                        {
                            settings.Name = "EmployeeID";
                            settings.CallbackRouteValues = new { Controller = "ViewAssessment", Action = "ComboBoxPartial" };
                            settings.Properties.CallbackPageSize = 50;
                            //settings.Width = System.Web.UI.WebControls.Unit.Percentage(105);
                            settings.Properties.DropDownRows = 15;
                            settings.Properties.AllowMouseWheel = true;
                            settings.Properties.TextFormatString = "{1}";
                            settings.Properties.ValueField = "EmployeeID";
                            settings.Properties.ValueType = typeof(string);
                            settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                            settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                            settings.Properties.Columns.Add("EmployeeID", Utility.Phrase("EmployeeID"), 110);
                            settings.Properties.Columns.Add("EmployeeName", Utility.Phrase("EmployeeName"), 200);

                            settings.PreRender = (sender, e) =>
                            {
                                MVCxComboBox cmb = sender as MVCxComboBox;
                                if (string.IsNullOrEmpty(Model.EmployeeID))
                                {
                                    cmb.Value = Model.EmployeeID;
                                }
                            };
                            //settings.Properties.EnableCallbackMode = true;
                            settings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { UniqueID.PerformCallback(); }";
                            settings.Properties.ClientSideEvents.BeginCallback = "EmployeeID_BeginCallback";
                        }
                            ).BindList(Model.EmployeeID).Bind(Model.EmployeeID).GetHtml()

                            </div>
                        </div>
                     </div>
                 
                    
                       <div class="item fl required">
                         <label for="display" class="fl"> @Utility.Phrase("SubmitAssessment.Messages.UniqueID")</label>
                        
                        <div class="input-group">           
                            <div class="input-group-btn">   
                              @Html.DevExpress().ComboBox( cb =>
                       {
                           cb.Name = "UniqueID";
                           cb.CallbackRouteValues = new { Controller = "ViewAssessment", Action = "ComboBoxUniqueIDPartial" };
                           cb.ShowModelErrors = true;
                           cb.Properties.AnimationType = AnimationType.Fade;
                           cb.ReadOnly = false;
                           cb.Properties.ValueField = "UniqueID";
                           cb.Properties.TextField = "UniqueID";
                           cb.Properties.TextFormatString = "{0}";
                           cb.Properties.ValueType = typeof(string);
                           cb.Properties.ValueType = typeof(string);
                           cb.Properties.Columns.Add("UniqueID").Caption = Utility.Phrase("SubmitAssessment.Messages.UniqueID");
                           cb.Properties.Columns.Add("StartTime", Utility.Phrase("StartDate"), 150);
                           cb.Properties.Columns.Add("EndTime", Utility.Phrase("EndDate"), 150);
                           cb.PreRender = (sender, e) =>
                           {
                               MVCxComboBox cmb = sender as MVCxComboBox;
                               if (string.IsNullOrEmpty(Model.UniqueID))
                               {
                                   cmb.Value = Model.UniqueID;
                               }
                           };
                           cb.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                           //cb.Properties.Columns.Add("Level");
                           //cb.Width = System.Web.UI.WebControls.Unit.Percentage(105);
                           cb.Properties.ClientSideEvents.BeginCallback = "UniqueID_BeginCallback";
                           cb.Properties.ClientSideEvents.EndCallback = "function(s, e) {  s.SetValue(null);}";
                           // cb.Properties.ClientSideEvents.SelectedIndexChanged = "cbEmployeeID_SelectedIndexChanged";
                       }).BindList(Model.ListUniqueID).Bind(Model.UniqueID).GetHtml()

                            </div>
                        </div>
                     </div>
                    
                    
                    
                     
                  
                     <div class="item fl">
                           <button class="btn-Add" id="btnAdd" title="@Utility.Phrase("Load")"><i class="icon-progress"></i>@Utility.Phrase("Load")</button>
                           @*@Html.DevExpress().Button(button =>
                                           {
                                               button.Name = "btnAdd";
                                               button.Text = @Utility.Phrase("PrepareScheduleNew.Messages.btnLoad");
                                               button.UseSubmitBehavior = true;
                                           }).GetHtml()*@
                         </div>                    
                  
                }
                  
</div>


    

 <div class="content-body row">
	    <div class="tab-content wrapper">
	                 <div id="prepareScheduleContent">
                    </div>  
	    </div>
    </div>

</div>






