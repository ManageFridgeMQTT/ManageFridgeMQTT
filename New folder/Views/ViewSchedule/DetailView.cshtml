@model Hammer.Models.SMAssessmentModel
<table width="60%" cellpadding="2" cellspacing="2">
    <tr>
        <td style="width: 30px">
            @Html.DevExpress().LabelFor(m => m.Header.UniqueID, label =>
       {
           label.Text = Utility.Phrase("SubmitAssessment.Messages.UniqueID");
       }).GetHtml()
            @Html.DevExpress().ComboBoxFor(m => m.Header.UniqueID, date =>
       {
           date.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           date.ReadOnly = true;
       }).GetHtml()
        </td>
        <td style="width: 30px">
            @Html.DevExpress().LabelFor(m => m.Header.AssessmentFor, label =>
    {
        label.Text = Utility.Phrase("SubmitAssessment.Messages.LBSM");
    }).GetHtml()
            @Html.DevExpress().ComboBoxFor(m => m.Header.AssessmentFor, cb =>
   {
       cb.Width = System.Web.UI.WebControls.Unit.Percentage(100);             
           cb.Properties.ValueField = "SalespersonCD";
           cb.Properties.TextField = "Descr";
           cb.Properties.TextFormatString = "{0} - {1}";
           cb.Properties.ValueType = typeof(string);
           cb.Properties.Columns.Add("SalespersonCD");
           cb.Properties.Columns.Add("Descr");          
           cb.ReadOnly = true;  
       }).BindList(eRoute.Models.eCalendar.HammerDataProvider.GetNameSM(Model.Header.AssessmentFor)).GetHtml()
     @*  cb.Width = System.Web.UI.WebControls.Unit.Percentage(50);
       cb.ReadOnly = true;*@
   @*}).GetHtml()*@
        </td>
    </tr>
    <tr>
        <td width="30%" align="left">
            @Html.DevExpress().LabelFor(m => m.Header.DistributorID, label =>
     {
         label.Text = Utility.Phrase("SubmitAssessment.Messages.DistributorID");
     }).GetHtml()
            @Html.DevExpress().ComboBoxFor(m => m.Header.DistributorID, cb =>
       {
            cb.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           cb.ReadOnly = true;
           cb.Properties.ValueField = "CompanyID";
           cb.Properties.TextField = "CompanyCD";
           cb.Properties.TextFormatString = "{0} - {1}";
           cb.Properties.ValueType = typeof(string);
           cb.Properties.Columns.Add("CompanyCD");
           cb.Properties.Columns.Add("CompanyName");          
           //cb.Width = System.Web.UI.WebControls.Unit.Percentage(80);
       }).BindList(eRoute.Models.eCalendar.HammerDataProvider.GetDistributorsNPP(Convert.ToInt32(Model.Header.DistributorID))).GetHtml()
          @* cb.Width = System.Web.UI.WebControls.Unit.Percentage(50);
           cb.ReadOnly = true;
       }).GetHtml()*@
        </td>
        <td width="30%">
            @Html.DevExpress().LabelFor(m => m.Header.AreaID, label =>
     {
         label.Text = Utility.Phrase("SubmitAssessment.Messages.AreaID");
     }).GetHtml()
            @Html.DevExpress().ComboBoxFor(m => m.Header.AreaID, cb =>
       {
           cb.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           cb.ReadOnly = true;
            cb.Properties.ValueField = "AreaID";
           cb.Properties.TextField = "AreaName";
           cb.Properties.TextFormatString = "{0} - {1}";
           cb.Properties.ValueType = typeof(string);
           cb.Properties.Columns.Add("AreaID");
           cb.Properties.Columns.Add("AreaName");  
       }).BindList(eRoute.Models.eCalendar.HammerDataProvider.GetAreas(Model.Header.AreaID)).GetHtml()
          @* cb.Width = System.Web.UI.WebControls.Unit.Percentage(50);
           cb.ReadOnly = true;
       }).GetHtml()*@
        </td>
    </tr>
    <tr>
        <td width="30%">
            @Html.DevExpress().LabelFor(m => m.Header.SalesObjective, label =>
       {
           label.Text = Utility.Phrase("SubmitAssessment.Messages.SalesObjective");
       }).GetHtml()
            @Html.DevExpress().MemoFor(m => m.Header.SalesObjective, memo =>
       {
           memo.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           memo.Properties.Rows = 4;
           memo.ReadOnly = true;
       }).GetHtml()
        </td>
        <td width="30%">
            @Html.DevExpress().LabelFor(m => m.Header.TraningObjective, label =>
       {
           label.Text = Utility.Phrase("SubmitAssessment.Messages.TrainingObjective");
       }).GetHtml()
            @Html.DevExpress().MemoFor(m => m.Header.TraningObjective, memo =>
       {
           memo.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           memo.Properties.Rows = 4;
           memo.ReadOnly = true;

       }).GetHtml()
        </td>
    </tr>
</table>
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabDailyWork";
    settings.HeaderText = "Công việc hằng ngày";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table  width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.DailyWorks.Count; i++)
        {
            ViewContext.Writer.Write("<tr>");
            ViewContext.Writer.Write("<td style=\"width:300px;\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].CriteriaID, label =>
                {
                    label.Text =
                        eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.DailyWorks[i].CriteriaID);
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].AssessmentDate).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].CriteriaID).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].AssessmentFor).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].UserID).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.DailyWorks[i].UniqueID).ToHtmlString());
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td style=\"width:100px;\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].CriteriaScore, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (

                Html.DevExpress().SpinEditFor(m => m.DailyWorks[i].CriteriaScore, spin =>
                {
                    spin.Properties.MinValue = 1;
                    spin.Properties.MaxValue = 5;
                    spin.ReadOnly = true;
                    spin.Width = 50;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Pros, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Pros, memo =>
                {
                    memo.ReadOnly = true;
                    memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Cons, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");

                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Cons, memo =>
                {
                    memo.ReadOnly = true;
                    memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");
            ViewContext.Writer.Write("<td valigh=\"top\">");
            ViewContext.Writer.Write
            (
                Html.DevExpress().LabelFor(m => m.DailyWorks[i].Note, label =>
                {
                    label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write
            (
                Html.DevExpress().MemoFor(m => m.DailyWorks[i].Note, memo =>
                {
                    memo.ReadOnly = true;
                    memo.Width = 200;
                    memo.Properties.Rows = 5;
                }).GetHtml().ToHtmlString()
            );
            ViewContext.Writer.Write("</td>");

            ViewContext.Writer.Write("</tr>");
        }

        ViewContext.Writer.Write("</table>");
    });
}).GetHtml()
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabTools";
    settings.HeaderText = "4 công cụ";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table  width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.Tools.Count; i++)
        {
            if (Model.Tools[i].CriteriaID == 5)
            {
            }
            else if (Model.Tools[i].CriteriaID == 6)
            { }
            else
            {
                ViewContext.Writer.Write("<tr>");
                ViewContext.Writer.Write("<td style=\"width:300px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].CriteriaID, label =>
                    {
                        label.Text =
                            eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.Tools[i].CriteriaID);
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style=\"width:100px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].CriteriaScore, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (

                    Html.DevExpress().SpinEditFor(m => m.Tools[i].CriteriaScore, spin =>
                    {
                        spin.Properties.MinValue = 1;
                        spin.Properties.MaxValue = 5;
                        spin.ReadOnly = true;
                        spin.Width = 50;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Pros, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Pros, memo =>
                    {
                        memo.ReadOnly = true;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Cons, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Cons, memo =>
                    {
                        memo.ReadOnly = true;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Tools[i].Note, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Tools[i].Note, memo =>
                    {
                        memo.ReadOnly = true;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
            }
        }
        ViewContext.Writer.Write("</table>");
    });

}).GetHtml()
@Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "tabSteps";
    settings.HeaderText = "9 bước bán hàng";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<table  width='100%' cellpadding='1' cellspacing='1'>");

        for (int i = 0; i < Model.Steps.Count; i++)
        {
            if (Model.Steps[i].CriteriaID != 16)
            {
                ViewContext.Writer.Write("<tr>");
                ViewContext.Writer.Write("<td style=\"width:300px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].CriteriaID, label =>
                    {
                        label.Text =
                           eRoute.Models.eCalendar.HammerDataProvider.GetSMCriteriaDescription(Model.Steps[i].CriteriaID);
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].AssessmentDate).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].CriteriaID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].AssessmentFor).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].UserID).ToHtmlString());
                ViewContext.Writer.Write(Html.HiddenFor(m => m.Steps[i].UniqueID).ToHtmlString());
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style=\"width:100px;\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].CriteriaScore, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Score");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (

                    Html.DevExpress().SpinEditFor(m => m.Steps[i].CriteriaScore, spin =>
                    {
                        spin.Properties.MinValue = 1;
                        spin.Properties.MaxValue = 5;
                        spin.ReadOnly = true;
                        //spin.ClientEnabled = !Model.Header.Released;
                        spin.Width = 50;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");



                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Pros, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Pros");

                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Pros, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ReadOnly = true;
                        //memo.ClientEnabled = !Model.Header.Released;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Cons, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Cons");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Cons, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ReadOnly = true;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td valigh=\"top\">");
                ViewContext.Writer.Write
                (
                    Html.DevExpress().LabelFor(m => m.Steps[i].Note, label =>
                    {
                        label.Text = Utility.Phrase("SubmitAssessment.Messages.Plan");
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write
                (
                    Html.DevExpress().MemoFor(m => m.Steps[i].Note, memo =>
                    {
                        memo.ShowModelErrors = true;
                        memo.ReadOnly = true;
                        memo.Width = 200;
                        memo.Properties.Rows = 5;
                    }).GetHtml().ToHtmlString()
                );
                ViewContext.Writer.Write("</td>");

                ViewContext.Writer.Write("</tr>");
            }
        }
        ViewContext.Writer.Write("</table>");
    });
}).GetHtml()
<table width="100%">
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.Header.Comment, label =>
       {
           label.Text = Utility.Phrase("SubmitAssessment.Messages.Comment");
       }).GetHtml()
            @Html.DevExpress().MemoFor(m => m.Header.Comment, memo =>
       {
           memo.Width = System.Web.UI.WebControls.Unit.Percentage(100);
           memo.Properties.Rows = 4;
           memo.ReadOnly = true;

       }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().LabelFor(m => m.Header.NextTrainingObjective, label =>
       {
           label.Text = Utility.Phrase("SubmitAssessment.Messages.NextTrainingObjective");
       }).GetHtml()
            @Html.DevExpress().MemoFor(m => m.Header.NextTrainingObjective, memo =>
            {
                memo.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                memo.Properties.Rows = 4;
                memo.ReadOnly = true;
            }).GetHtml()
        </td>
    </tr>
</table>
